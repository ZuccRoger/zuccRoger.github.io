<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>雷火助理系统-会话ID分配问题处理</title>
    <link href="/2022/10/25/%E9%9B%B7%E7%81%AB%E5%8A%A9%E7%90%86%E7%B3%BB%E7%BB%9F-%E4%BC%9A%E8%AF%9DID%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/"/>
    <url>/2022/10/25/%E9%9B%B7%E7%81%AB%E5%8A%A9%E7%90%86%E7%B3%BB%E7%BB%9F-%E4%BC%9A%E8%AF%9DID%E5%88%86%E9%85%8D%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="碰到的问题"><a href="#碰到的问题" class="headerlink" title="碰到的问题"></a>碰到的问题</h2><p>​需要在群聊中触发 @人工 关键字之后<strong>员工</strong>发出的消息，会分配不同的会话ID进而分配 <strong>助理</strong> 去进行对应的支持。</p><p>​如果<strong>员工</strong>长时间未响应则会关闭会话创建一个新的会话ID，这个时候就碰到了本文所提到问题：会话ID的新生成或者拿到上一次的策略。</p><h2 id="我是怎么做的："><a href="#我是怎么做的：" class="headerlink" title="我是怎么做的："></a>我是怎么做的：</h2><h3 id="方案一-：通过redis-mysql的形式"><a href="#方案一-：通过redis-mysql的形式" class="headerlink" title="方案一 ：通过redis + mysql的形式"></a>方案一 ：通过redis + mysql的形式</h3><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7hnu00h69j30ow0wotb1.jpg" alt="redis+mysql实现"></p><p>​细思极恐的问题就是当同时有两个请求进来，会去争抢这个maxId，导致两个不同的用户会去共享一个会话Id. </p><h3 id="方案二-：通过mysql的唯一索引实现"><a href="#方案二-：通过mysql的唯一索引实现" class="headerlink" title="方案二 ：通过mysql的唯一索引实现"></a>方案二 ：通过mysql的唯一索引实现</h3><p>​通过新增了表的唯一索引，通过 insert ignore into 的方式去实现会话Id的分配。</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7hl9a60xtj30we0u0adp.jpg" alt="通过mysql的唯一索引实现"></p>]]></content>
    
    
    <categories>
      
      <category>项目实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node.js中小数计算溢出问题以及如何解决</title>
    <link href="/2022/10/24/Node-js%E4%B8%AD%E5%B0%8F%E6%95%B0%E8%AE%A1%E7%AE%97%E6%BA%A2%E5%87%BA%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3/"/>
    <url>/2022/10/24/Node-js%E4%B8%AD%E5%B0%8F%E6%95%B0%E8%AE%A1%E7%AE%97%E6%BA%A2%E5%87%BA%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<figure class="highlight fix"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">0.1 + 0.2 </span>=<span class="hljs-string"> 0.30000000000000004 </span><br><span class="hljs-string">记一次八方翻译平台相似度检测的bug跟进以及问题反馈。</span><br></code></pre></td></tr></table></figure><p>雷火八方翻译平台有一个相似度检测的功能，其中有一个计算两个字符串相似度的函数结果发现两个完全一模一样的字符串返回的相似度竟然为 ，根据 余弦相似度算法[1] 得到 <img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7hixu0397j30ee01w749.jpg" alt="余弦相似度算法结果">，小于用户传递的最小相似度阈值1，因此归到了低相似度的文本中了。</p><p>为什么会这样：</p><p>因为计算机执行的是二进制,并且js中数字都是浮点数表示的，并且规定了是 IEEE754的标准的双精度浮点数。</p><p>IEEE 754 规定了两种基本浮点格式：单精度和双精度。</p><p>单精度格式：具有24 位有效数字精度(包含符号)，并总共占用32 位。</p><p>双精度格式：具有53 位有效数字精度(包含符号)，并总共占用64 位。</p><p>再次深入一下：</p><p>我们使用 0.1 + 0.2进行推算</p><p>0.1转换为二进制 &#x3D;&gt; 0.0001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1001 1100 …</p><p>0.2转换为二进制 &#x3D;&gt; 0.0011 0011 0011 0011 0011 0011 0011 0011 0011 0011 0011 0011 0011 …</p><p>相加 &#x3D;&gt; 0.0100 1100 1100 1100 1100 1100 1100 1100 1100 1100 1100 1100 1100 1100</p><p>按照IEEE 754标准保留 52位，按权相加法, 0舍1入 来取值 &#x3D;&gt; sum ≈ 0.30000000000000004</p><p>解决方案：</p><ol><li>tofixed</li></ol><p>优点：简单粗暴</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7hivygfrpj315c08kq3d.jpg" alt="tofixed">缺点：不会四舍五入</p><p>如下图：</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7hiw6wb6xj31i808qgm8.jpg" alt="image-20221025143517159"></p><ol start="2"><li>小数-&gt;整数-&gt;小数 （即十进制的先左移然后右移）</li></ol><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7hiwkmvi7j31f20u078a.jpg" alt="小数-&gt;整数-&gt;小数 ">3. 可以使用第三方库</p><p>Math.js 用于 JavaScript 和 Node.js 的扩展数学库。 它具有支持符号计算的灵活表达式解析器，大量内置函数和常量，并提供了集成的解决方案来处理不同的数据类型，例如数字，大数，复数，分数，单位和矩阵。强大且易于使用。<br><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7hiwy831uj30na0wqq41.jpg" alt="Math.js"></p><p>decimal.js JavaScript 的任意精度的十进制类型。</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7hix600wuj30ou0w8dh0.jpg" alt="decimal.js"></p><p>big.js 一个小型，快速，易于使用的库，用于任意精度的十进制算术运算。</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7hixd0ow9j30j811wq47.jpg" alt="big.js"></p><p>从周下载量来说无脑选big.js, 用法也非常简单.</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7hixiqipkj31hq0jm770.jpg" alt="big.js用法"></p><p>参考资料 ：</p><ol><li><a href="https://www.cnblogs.com/airnew/p/9563703.html">https://www.cnblogs.com/airnew/p/9563703.html</a></li><li><a href="https://www.withyou.ink/bignumber-js/">https://www.withyou.ink/bignumber-js/</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>nodejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node.js学习札记</title>
    <link href="/2022/10/24/Node-js%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0/"/>
    <url>/2022/10/24/Node-js%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>我们可以创建一个 nodejs 的项目</p><figure class="highlight vim"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs vim"><span class="hljs-built_in">mkdir</span> <span class="hljs-keyword">later</span><br><span class="hljs-keyword">cd</span> <span class="hljs-keyword">later</span><br>npm init -<span class="hljs-keyword">y</span><br></code></pre></td></tr></table></figure><p>通过 npm init 可以让我快速 初始化 package.json，它会让我们确认各种东西，所以如果想快速初始化可以 通过 npm init -y 这个指令<br>当然 我们可以通过 最简单的 npm install 去安装依赖， –save 可以让它保存在package.json中, 然后输出一棵 ** node_modules ** 树 ，理应来说它 npm install 应该是一个 ** 纯函数** </p><blockquote><ol><li>不同版本npm的安装算法不同  </li><li>某些依赖自上次安装以来，可能已经发布了新的版本，因此将根据package.json中的semverrang version去更新依赖</li></ol></blockquote><p>比如</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">npm install --<span class="hljs-built_in">save</span> <span class="hljs-built_in">express</span> <br></code></pre></td></tr></table></figure><p>当我们想卸载该依赖的时候我们可以</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">npm rm <span class="hljs-built_in">express</span> --<span class="hljs-built_in">save</span><br></code></pre></td></tr></table></figure><p>这个时候我们发现 会在该文件下的目录下面，有一个 package-lock.json 文件，字面上理解 是锁定版本的意思。<br>我们再来谈一下这个<strong>package-lock.json</strong>文件</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-string">&quot;devDependencies&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;@types/ffi&quot;</span>: <span class="hljs-string">&quot;^0.5.7&quot;</span>,<br>  <span class="hljs-string">&quot;@types/mocha&quot;</span>: <span class="hljs-string">&quot;^8.2.0&quot;</span>,<br>  <span class="hljs-string">&quot;@types/node&quot;</span>: <span class="hljs-string">&quot;^14.14.30&quot;</span>,<br>  <span class="hljs-string">&quot;@types/power-assert&quot;</span>: <span class="hljs-string">&quot;^1.5.3&quot;</span>,<br>  <span class="hljs-string">&quot;espower-typescript&quot;</span>: <span class="hljs-string">&quot;^9.0.2&quot;</span>,<br>  <span class="hljs-string">&quot;mocha&quot;</span>: <span class="hljs-string">&quot;^8.2.1&quot;</span>,<br>  <span class="hljs-string">&quot;power-assert&quot;</span>: <span class="hljs-string">&quot;^1.6.1&quot;</span>,<br>  <span class="hljs-string">&quot;typescript&quot;</span>: <span class="hljs-string">&quot;^4.0.0&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其中的^是什么意思呢？</p><h3 id="module模块概念"><a href="#module模块概念" class="headerlink" title="module模块概念"></a>module模块概念</h3><ol><li><div class="code-wrapper"><pre><code class="hljs">每个.js文件即是一个模块。当我们 console.log(module)的时候 </code></pre></div><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">Module &#123;<br>  id: &#x27;.&#x27;,<br>  path: &#x27;D:<span class="hljs-symbol">\\</span>code<span class="hljs-symbol">\\</span>AICode20200624<span class="hljs-symbol">\\</span>Engine<span class="hljs-symbol">\\</span>src&#x27;,<br>  exports: &#123; a: 1 &#125;,<br>  parent: null,<br>  filename: &#x27;D:<span class="hljs-symbol">\\</span>code<span class="hljs-symbol">\\</span>AICode20200624<span class="hljs-symbol">\\</span>Engine<span class="hljs-symbol">\\</span>src<span class="hljs-symbol">\\</span>index.js&#x27;,<br>  loaded: false,<br>  children: [],<br>  paths: [<br>    &#x27;D:<span class="hljs-symbol">\\</span>code<span class="hljs-symbol">\\</span>AICode20200624<span class="hljs-symbol">\\</span>Engine<span class="hljs-symbol">\\</span>src<span class="hljs-symbol">\\</span>node_modules&#x27;,<br>    &#x27;D:<span class="hljs-symbol">\\</span>code<span class="hljs-symbol">\\</span>AICode20200624<span class="hljs-symbol">\\</span>Engine<span class="hljs-symbol">\\</span>node_modules&#x27;,<br>    &#x27;D:<span class="hljs-symbol">\\</span>code<span class="hljs-symbol">\\</span>AICode20200624<span class="hljs-symbol">\\</span>node_modules&#x27;,<br>    &#x27;D:<span class="hljs-symbol">\\</span>code<span class="hljs-symbol">\\</span>node_modules&#x27;,<br>    &#x27;D:<span class="hljs-symbol">\\</span>node_modules&#x27;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><p>会输出如上所示的数据格式，其中 拥有 exports 属性  </p></li><li><div class="code-wrapper"><pre><code class="hljs">exports 和 module.exports的关系</code></pre></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span> 对象是由模块系统创建的。<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">module</span>.<span class="hljs-keyword">exports</span> = &#123;<br>    a: <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-keyword">exports</span>.a = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>以上的使用方式是等效的，如果 exports.b &#x3D; 2 ，那么输出的export则是以下内容</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">Module &#123;<br>  id: &#x27;.&#x27;,<br>  path: &#x27;D:<span class="hljs-symbol">\\</span>code<span class="hljs-symbol">\\</span>AICode20200624<span class="hljs-symbol">\\</span>Engine<span class="hljs-symbol">\\</span>src&#x27;,<br>  exports: &#123; b: 2, a: 1 &#125;,<br>  parent: null,<br>  filename: &#x27;D:<span class="hljs-symbol">\\</span>code<span class="hljs-symbol">\\</span>AICode20200624<span class="hljs-symbol">\\</span>Engine<span class="hljs-symbol">\\</span>src<span class="hljs-symbol">\\</span>index.js&#x27;,<br>  loaded: false,<br>  children: [],<br>  paths: [<br>    &#x27;D:<span class="hljs-symbol">\\</span>code<span class="hljs-symbol">\\</span>AICode20200624<span class="hljs-symbol">\\</span>Engine<span class="hljs-symbol">\\</span>src<span class="hljs-symbol">\\</span>node_modules&#x27;,<br>    &#x27;D:<span class="hljs-symbol">\\</span>code<span class="hljs-symbol">\\</span>AICode20200624<span class="hljs-symbol">\\</span>Engine<span class="hljs-symbol">\\</span>node_modules&#x27;,<br>    &#x27;D:<span class="hljs-symbol">\\</span>code<span class="hljs-symbol">\\</span>AICode20200624<span class="hljs-symbol">\\</span>node_modules&#x27;,<br>    &#x27;D:<span class="hljs-symbol">\\</span>code<span class="hljs-symbol">\\</span>node_modules&#x27;,<br>    &#x27;D:<span class="hljs-symbol">\\</span>node_modules&#x27;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ！">Express是以Node自带的http模块为基础，致力于在HTTP请求和响应上来建模Web程序<br></code></pre></td></tr></table></figure><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d1d1294454cd40aaad062a005a9b996e~tplv-k3u1fbpfcp-zoom-1.image"></p><blockquote><p>中间件的本质其实是一个函数，在接收到和返回的过程中进行处理。  </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> <span class="hljs-title class_">Koa</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;koa&#x27;</span>);<br><span class="hljs-keyword">let</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Koa</span>();<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">async</span> (ctx,next)=&gt;&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br>   <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>);<br>&#125;);<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">async</span> (ctx,next)=&gt;&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>);<br>   <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">4</span>);<br>&#125;);<br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-string">&quot;3000&quot;</span>); <br></code></pre></td></tr></table></figure><p>先来看看这段代码输出是的 1324 ,它的执行过程很像一颗洋葱,以 next 作为分界，先执行next之前的内容</p><h3 id="本地变量-和-模块变量之间的关系"><a href="#本地变量-和-模块变量之间的关系" class="headerlink" title="本地变量 和 模块变量之间的关系"></a>本地变量 和 模块变量之间的关系</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ！">前文:笔者在本地 a.js 新建了一个变量a=1.1在b.js 新建了一个变量a=2 导出了一个module.exports=&#123;a&#125;,在主模块index.js引用了之后发现a被赋值为2<br></code></pre></td></tr></table></figure><p>这个时候是因为模块间相互调用导致的,在模块间相互只用之前，a会导出一个export供另外一个使用，直到另一个完全执行完了，才会export b给a</p><h3 id="通过Path-resolve-API聊一聊nodejs中路径的问题"><a href="#通过Path-resolve-API聊一聊nodejs中路径的问题" class="headerlink" title="通过Path.resolve API聊一聊nodejs中路径的问题"></a>通过Path.resolve API聊一聊nodejs中路径的问题</h3><p>如果没有以’.&#x2F;‘,’..&#x2F;‘和’&#x2F;‘开头的文件，在CommonJS里面，寻找依赖模块是 比如a&#x2F;b&#x2F;c.js 其中c.js引用了d.js,那么模块的查找顺序为a&#x2F;b&#x2F;node_moudles&#x2F;d,如果再找不到则会去调用a&#x2F;node_modules&#x2F;d，最后会在全局目录加载<br>如果是目录模块，在 package.json 文件中，会指定一个main入口.如果一个都找不到则会报错<br>can’t find module xxxx</p><h3 id="Content-type的类型"><a href="#Content-type的类型" class="headerlink" title="Content-type的类型"></a>Content-type的类型</h3><blockquote><div class="code-wrapper"><pre><code class="hljs">POST请求的消息主体放在entity body中，服务端根据请求头中的Content-Type字段来获取消息主体的编码方式，进而进行解析数据。</code></pre></div><p>一、application&#x2F;x-www-form-urlencoded<br><strong>最常见</strong>的 POST 提交数据的方式，原生Form表单，如果不设置 enctype 属性，默认为application&#x2F;x-www-form-urlencoded 方式提交数据。<br>首先，Content-Type被指定为 application&#x2F;x-www-form-urlencoded；其次，提交的表单数据会转换为键值对并按照 key1&#x3D;val1&amp;key2&#x3D;val2 的方式进行编码，key 和 val 都进行了 URL 转码。大部分服务端语言都对这种方式有很好的支持。<br>另外，如利用AJAX 提交数据时，也可使用这种方式。例如 jQuery，Content-Type 默认值都是”application&#x2F;x-www-form-urlencoded;charset&#x3D;utf-8”。<br>二、multipart&#x2F;form-data<br>另一个常见的 POST 数据提交的方式， Form 表单的 enctype 设置为multipart&#x2F;form-data，它会将表单的数据处理为一条消息，以标签为单元，用分隔符（这就是boundary的作用）分开，类似我们上面Content-Type中的例子。<br>由于这种方式将数据有很多部分，它既可以上传键值对，也可以上传文件，甚至多个文件。当上传的字段是文件时，会有Content-Type来说明文件类型；Content-disposition，用来说明字段的一些信息。每部分都是以 –boundary 开始，紧接着是内容描述信息，然后是回车，最后是字段具体内容（字段、文本或二进制等）。如果传输的是文件，还要包含文件名和文件类型信息。消息主体最后以 –boundary– 标示结束。<br>三、application&#x2F;json<br>Content-Type: application&#x2F;json 作为响应头比较常见。实际上，现在越来越多的人把它作为请求头，用来告诉服务端消息主体是序列化后的 JSON 字符串，其中一个好处就是JSON 格式支持比键值对复杂得多的结构化数据。由于 JSON 规范的流行，除了低版本 IE 之外的各大浏览器都原生支持JSON.stringify，服务端语言也都有处理 JSON 的函数，使用起来没有困难。<br>Google 的 AngularJS 中的 Ajax 功能，默认就是提交 JSON 字符串。<br>四、text&#x2F;xml<br>XML的作用不言而喻，用于传输和存储数据，它非常适合万维网传输，提供统一的方法来描述和交换独立于应用程序或供应商的结构化数据，在JSON出现之前是业界一大标准（当然现在也是），相比JSON的优缺点大家有兴趣可以上网search。因此，在POST提交数据时，xml类型也是不可缺少的一种，虽然一般场景上使用JSON可能更轻巧、灵活。<br>五、binary (application&#x2F;octet-stream)<br>在Chrome浏览器的Postman工具中，还可以看到”binary“这一类型，指的就是一些二进制文件类型。如application&#x2F;pdf，指定了特定二进制文件的MIME类型。就像对于text文件类型若没有特定的子类型（subtype），就使用 text&#x2F;plain。类似的，二进制文件没有特定或已知的 subtype，即使用 application&#x2F;octet-stream，这是应用程序文件的默认值，一般很少直接使用 。<br>对于application&#x2F;octet-stream，只能提交二进制，而且只能提交一个二进制，如果提交文件的话，只能提交一个文件，后台接收参数只能有一个，而且只能是流（或者字节数组）。<br>很多web服务器使用默认的 application&#x2F;octet-stream 来发送未知类型。出于一些安全原因，对于这些资源浏览器不允许设置一些自定义默认操作，导致用户必须存储到本地以使用。一般来说，设置正确的MIME类型很重要。    </p></blockquote><p>其中参数对象需要JSON.stringify.</p><h3 id="nodejs高并发控制"><a href="#nodejs高并发控制" class="headerlink" title="nodejs高并发控制"></a>nodejs高并发控制</h3><blockquote><p>Q: 如何控制高并发 如果有50个api 但是一次性只能7个api<br>A: nodejs高并发大流量的设计实现,控制并发的三种方法 eventproxy、async.mapLimit、async.queue控制并发</p></blockquote><h2 id="crypto-模块"><a href="#crypto-模块" class="headerlink" title="crypto 模块"></a>crypto 模块</h2><ol><li>RSA算法<blockquote><p>RSA算法是1977年由Ron Rivest、Adi Shamir和Leonard Adleman共同提出的，所以以他们三人的姓氏的头字母命名。</p></blockquote></li></ol><p>RSA是一种非对称加密的算法，是一个公钥和一个私钥组成的密钥对，可以通过</p><blockquote><div class="code-wrapper"><pre><code class="hljs">* 公钥加密，私钥解密* 私钥加密, 公钥解密</code></pre></div></blockquote><p>公钥可以暴露的但是私钥是一定是私有的。</p><h3 id="dependencies-和-devDependencies-的区别"><a href="#dependencies-和-devDependencies-的区别" class="headerlink" title="dependencies 和 devDependencies 的区别"></a>dependencies 和 devDependencies 的区别</h3><hr><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">npm install *** --save<br>npm install ***  --save-dev<br><span class="hljs-regexp">//</span>–save会把依赖包名称添加到package.json文件dependencies键下，–save-dev则添加到package.json文件devDependencies键下<br>链接：https:<span class="hljs-regexp">//</span>juejin.im<span class="hljs-regexp">/post/</span><span class="hljs-number">6844903794086510600</span><br></code></pre></td></tr></table></figure><p>devDependencies 依赖只用于开发环境，不用于生产环境。<br>dependencies  依赖只用于生产环境，开发环境。</p><table><thead><tr><th>全部</th><th>简写</th><th>解释</th></tr></thead><tbody><tr><td>–save-dev</td><td>-D</td><td>安装到开发环境中</td></tr><tr><td></td><td>-S</td><td>安装到生产环境中</td></tr><tr><td>cnpm i</td><td>-</td><td>不写入package.json</td></tr><tr><td>–</td><td>–</td><td></td></tr><tr><td>–save-dev ，缩写为 -D</td><td></td><td></td></tr></tbody></table><h3 id="require闭环检测器"><a href="#require闭环检测器" class="headerlink" title="require闭环检测器"></a>require闭环检测器</h3><hr><p>当我们在a.js 和 b.js文件中，相互require对方，会发现undefined的返回，因此有了nocycle(npm)神器!<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1725297ae2744873a211e70e620a8fba~tplv-k3u1fbpfcp-watermark.image"></p><h3 id="asserts"><a href="#asserts" class="headerlink" title="asserts"></a>asserts</h3><p>assert 模块提供了一组断言函数，用于验证不变量。</p><hr><h3 id="pakcage-json"><a href="#pakcage-json" class="headerlink" title="pakcage.json"></a>pakcage.json</h3><blockquote><div class="code-wrapper"><pre><code class="hljs">前言</code></pre></div><ol><li><div class="code-wrapper"><pre><code class="hljs">concurrently</code></pre></div></li><li><div class="code-wrapper"><pre><code class="hljs">如何指定nodejs启动在固定的端口</code></pre></div>  –port 7001 , 比如 node app.js –port 7001 即将node服务启动在端口为7001上。</li><li>如何判断当前的Node环境是开发环境还是生产环境</li></ol></blockquote><div class="code-wrapper"><pre><code class="hljs">process.env.NODE_ENV === &#39;development&#39; true -&gt; 开发模式process.env.NODE_ENV === &#39;production&#39; true -&gt; 生产模式</code></pre></div><hr><h3 id="npm-script"><a href="#npm-script" class="headerlink" title="npm script"></a>npm script</h3>]]></content>
    
    
    <categories>
      
      <category>nodejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node.jsEtimeout解决方案</title>
    <link href="/2022/10/24/Node-jsEtimeout%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2022/10/24/Node-jsEtimeout%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<figure class="highlight stylus"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs stylus">DNS解析需要花大量时间的，导致了阻塞，这个时候会返回etimeout的错误,只需要简单的将 process<span class="hljs-selector-class">.env</span><span class="hljs-selector-class">.UV_THREADPOOL_SIZE</span> = <span class="hljs-string">&#x27;128&#x27;</span> 设置一下，最大支持 <span class="hljs-number">1024</span><br></code></pre></td></tr></table></figure><p>在压测绝对演绎朋友圈服务的时候，因为接入了易盾的敏感词检测是http的请求，在TPS数百的时候，服务内部大量报错了 ETIMEOUT 的错误;</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7hj0cx5o1j31r20380uu.jpg" alt="敏感词检测"></p><p>在Node.js中可以在程序的入口文件类似 server.ts | app.ts 或者 入口文件 中 插入以下代码：</p><p>process.env.UV_THREADPOOL_SIZE &#x3D; ‘128’</p><p>但可以在启动时通过将<code>UV_THREADPOOL_SIZE</code>环境变量设置为任何值来更改它 （最大值为 1024）。</p><p>Node.js默认该值为4。</p><p>因为在DNS解析需要花大量时间的，导致了阻塞，这个时候会返回etimeout的错误。</p><p>在设置 UV_THREADPOOL_SIZE 属性之前 ，有近1%的请求是因为etimeout返回了http code 为 500的错误。</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7hj0ozpjvj31qo0ggjtb.jpg" alt="http-code 500错误"></p><p>设置之后：</p><p> 该问题得到了解决。</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7hj125c20j31qm0hkq4z.jpg" alt="完成500异常"></p><p>参考资料：</p><ul><li><a href="https://stackoverflow.com/questions/35387264/node-js-request-module-getting-etimedout-and-esockettimedout">https://stackoverflow.com/questions/35387264/node-js-request-module-getting-etimedout-and-esockettimedout</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>nodejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>端午AR抽奖逻辑大揭秘</title>
    <link href="/2022/10/24/%E7%AB%AF%E5%8D%88AR%E6%8A%BD%E5%A5%96%E9%80%BB%E8%BE%91%E5%A4%A7%E6%8F%AD%E7%A7%98/"/>
    <url>/2022/10/24/%E7%AB%AF%E5%8D%88AR%E6%8A%BD%E5%A5%96%E9%80%BB%E8%BE%91%E5%A4%A7%E6%8F%AD%E7%A7%98/</url>
    
    <content type="html"><![CDATA[<p>解密端午抽奖实现逻辑:</p><p>首先抽奖的前提肯定是：</p><ol><li>保证在抽奖奖池抽完后，将奖品刚刚好发完，并且每个人都抽过奖。</li><li>每个人中奖的概率是一样的。</li></ol><p>实现：<br>提前统计参与抽奖的人，形成一个数组，比如2600人抽奖，初始化好一个 2600长度的 数组，丢进redis，比如有50个人可以中奖，就将号码牌&lt;50的抽奖号视为中奖。</p><p>redis 中spop的实现抽奖</p><table><thead><tr><th>intset 编码的实现方法</th><th>hashtable 编码的实现方法</th></tr></thead><tbody><tr><td>调用 intsetRandom 函数， 从整数集合中随机取出一个元素， 在将这个随机元素返回给客户端之后， 调用 intsetRemove 函数， 将随机元素从整数集合中删除掉。</td><td>调用 dictGetRandomKey 函数， 从字典中随机取出一个字典键， 在将这个随机字典键的值返回给客户端之后， 调用 dictDelete 函数， 从字典中删除随机字典键所对应的键值对。</td></tr></tbody></table><p>验证每个人的公平程度:<br>假设有2600个人抽奖，有50个中奖卡牌，抽奖后将卡牌丢弃。</p><p>第一个人抽奖中奖概率：  50&#x2F;2600</p><p>第二个人中奖概率 : </p><p>（50&#x2F;2600) * (49&#x2F;2599) + (2550&#x2F;2600)*(50&#x2F;2599)&#x3D;50&#x2F;2600</p><p>可以验证得到中奖概率一致是公平的。</p>]]></content>
    
    
    <categories>
      
      <category>项目实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于SVN的CICD调研和实践总结</title>
    <link href="/2022/10/24/%E5%9F%BA%E4%BA%8ESVN%E7%9A%84CICD%E8%B0%83%E7%A0%94%E5%92%8C%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/"/>
    <url>/2022/10/24/%E5%9F%BA%E4%BA%8ESVN%E7%9A%84CICD%E8%B0%83%E7%A0%94%E5%92%8C%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<figure class="highlight erlang"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs erlang">组内基于SVN的CICD调研和实践总结落地调研,持续更新中...<br></code></pre></td></tr></table></figure><h3 id="定个小目标"><a href="#定个小目标" class="headerlink" title="定个小目标"></a>定个小目标</h3><div class="code-wrapper"><pre><code class="hljs"> 经过沟通后，第一阶段来说是至少将 dnm 项目的后端(基于Springboot框架) 代码上传到 svn 之后, 能够容器化地去做到热部署。</code></pre></div><h3 id="CICD工具现状"><a href="#CICD工具现状" class="headerlink" title="CICD工具现状"></a>CICD工具现状</h3><div class="code-wrapper"><pre><code class="hljs">工具的选择：</code></pre></div><table><thead><tr><th>比较项目</th><th>Jenkins</th><th>Drone</th><th>GitlabCi（不考虑）</th></tr></thead><tbody><tr><td>空间容量清理问题</td><td>需要定时清理，否则占空间越来越大</td><td>无残留</td><td></td></tr><tr><td>插件升级</td><td>每次需要在新环境(测试环境上)，升级测试一下，比较繁琐</td><td>插件都是docker容易,一切都是全自动的.</td><td></td></tr><tr><td>生态的构建</td><td><strong>强大</strong>,插件很多</td><td>完全基于容器来实现的 CI&#x2F;CD 工具，构建的过程也完全是在容器中实现的。</td><td></td></tr><tr><td>CSV支持(关键)</td><td>git、svn</td><td>git. <a href="https://github.com/harness/drone/issues/2799">Do drone Support the SVN?</a></td><td>git</td></tr></tbody></table><div class="code-wrapper"><pre><code class="hljs">    其中 新锐Drone 以及 老牌的gitlabCI 需要和git搭配,但是 我们 效能平台部 以及整个雷火的游戏都是在svn上的，所以可以告别这俩只有Jenkins。</code></pre></div><h3 id="方案选定"><a href="#方案选定" class="headerlink" title="方案选定"></a>方案选定</h3><ol><li>Jenkins + Docker 自动化集成环境搭建</li></ol><h3 id="我遇到的问题"><a href="#我遇到的问题" class="headerlink" title="我遇到的问题"></a>我遇到的问题</h3><ol><li><p>缺失 构建一个maven项目 的选项.<img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h25ptdixcxj21pa0u0n2b.jpg" alt="image-20220512164618895"></p><p>【解决方案 I 】是需要去插件市场下载的 maven integration </p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h25puly2mvj22ue0u0444.jpg" alt="image-20220512164730229"></p><p>【解决方案 II】 直接在maven的镜像中打jar包进行代码的编译打包，至于我是怎么做的<strong>后文有介绍</strong>.</p></li><li><p>对于java的项目我该配置哪些流程</p><ol><li><p>流程拆解<img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h25meu2vudj21hu0ha76h.jpg" alt="整体流程"></p></li><li><p>pull code选择的是最简单的 poll SCM的形式，会每一分钟去触发一次。</p><ol><li><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2bj4j0byhj21je0u0jum.jpg" alt="image-20220517172814179"></p></li><li><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2bj4mkehrj21zi0le0vm.jpg" alt="image-20220517172820245"></p></li></ol></li><li><p>完整的dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> hub.fuxi.netease.com/qa-web/jenkins-maven:<span class="hljs-number">3.6002</span> AS mvn<br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /tmp</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> / /tmp</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> mvn clean package</span><br><br><span class="hljs-keyword">FROM</span> openjdk:<span class="hljs-number">8</span>-jdk-stretch<br><span class="hljs-keyword">COPY</span><span class="language-bash"> --from=mvn /tmp/target/jenkinsImage-0.0.1-SNAPSHOT.jar <span class="hljs-string">&quot;/tmp/jenkinsImage-0.0.1-SNAPSHOT.jar&quot;</span></span><br><span class="hljs-comment"># 启动应用程序</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;-server&quot;</span>, <span class="hljs-string">&quot;-Xms2048m&quot;</span>, <span class="hljs-string">&quot;-Xmx4096m&quot;</span>, <span class="hljs-string">&quot;-XX:+UseG1GC&quot;</span>, <span class="hljs-string">&quot;-jar&quot;</span>, <span class="hljs-string">&quot;/tmp/jenkinsImage-0.0.1-SNAPSHOT.jar&quot;</span>, <span class="hljs-string">&quot;--spring.profiles.active=test&quot;</span>]</span><br></code></pre></td></tr></table></figure></li><li><p>命令</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">1</span>. docker buildx build -t hub<span class="hljs-selector-class">.fuxi</span><span class="hljs-selector-class">.netease</span>.com/luojiajun/jenkins-build:<span class="hljs-number">1.1</span> .<br>(含义是: 使用当前目录的 Dockerfile 创建镜像，标签为 hub<span class="hljs-selector-class">.fuxi</span><span class="hljs-selector-class">.netease</span>.com/luojiajun/jenkins-build:<span class="hljs-number">1.1</span>)<br><br><span class="hljs-number">2</span>. docker login hub<span class="hljs-selector-class">.fuxi</span><span class="hljs-selector-class">.netease</span><span class="hljs-selector-class">.com</span><br><span class="hljs-number">3</span>. docker push hub<span class="hljs-selector-class">.fuxi</span><span class="hljs-selector-class">.netease</span>.com/luojiajun/jenkins-build:<span class="hljs-number">1.1</span><br></code></pre></td></tr></table></figure><p>命令详解</p><ol><li><table><thead><tr><th>Command</th><th>–</th></tr></thead><tbody><tr><td>docker buildx build</td><td>构建镜像</td></tr><tr><td><strong>–tag, -t:</strong></td><td>镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。</td></tr></tbody></table></li></ol></li></ol></li><li><p>Docker部署后发现<img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2705a6d4gj22xq08eq5l.jpg" alt="运行失败"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Failed to execute goal org.springframework.boot:spring-boot-maven-plugin:<span class="hljs-number">2.6</span><span class="hljs-number">.7</span>:repackage (repackage) on project jenkinsImage: Execution repackage of goal org.springframework.boot:spring-boot-maven-plugin:<span class="hljs-number">2.6</span><span class="hljs-number">.7</span>:repackage failed: Unable to find main class -&gt; [Help <span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><p>查看自己的dockerfile文件,只有短短几行就是做了一个复制到&#x2F;tmp下然后进行mvn clean package.结果说找不到主类.</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> hub.fuxi.netease.com/qa-web/jenkins-maven:<span class="hljs-number">3.6</span> AS mvn<br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /tmp</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> * /tmp</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> mvn clean package</span><br></code></pre></td></tr></table></figure><p>于是自己到镜像中查看</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2708ex4xkj22hw07e0un.jpg" alt="镜像中目录文件">好家伙发现没有src目录。</p><p>找到了一个<a href="https://github.com/moby/moby/issues/15858">病友</a>, 现象是:  </p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h270tl1b9bj20a40a8jri.jpg" alt="copy前">   <img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h270ttuxraj20h207y74e.jpg" alt="copy后"></p><p>最后通过修改dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> hub.fuxi.netease.com/qa-web/jenkins-maven:<span class="hljs-number">3.6</span> AS mvn<br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /tmp</span><br><span class="hljs-comment"># 注意这里是 / 不是 * </span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> / /tmp  </span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> mvn clean package</span><br></code></pre></td></tr></table></figure><p>最后完美运行。</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h270oopltej22ls0ban00.jpg" alt="主类问题解决正常打包"></p></li><li><p>当把镜像推送上去之后发现,本地运行发现</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># mac M1 上不能运行,linux正常。</span><br>qemu: uncaught target signal 11 (Segmentation fault) - core dumped<br></code></pre></td></tr></table></figure></li><li><p>举个栗子🌰，Jenkins通常内存占用较大，部署在一台单独的机器上称作A，等它镜像打包部署推送完成后,那么如果通知B上的机器去更新其应用呢？</p><ol><li>可以通过ssh去处理,前提是需要到jenkins的插件管理市场中下载ssh.</li></ol><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2bi6p0nmaj22320ns427.jpg" alt="image-20220517165543290"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 登陆docker</span><br><span class="hljs-built_in">cat</span> /home/luojiajun/docker/fuxiDockerPasswd | sudo docker login -u luojiajun  hub.fuxi.netease.com --password-stdin<br><span class="hljs-comment"># 拉取镜像</span><br>sudo docker pull hub.fuxi.netease.com/luojiajun/jenkins-build:latest<br><span class="hljs-comment"># 运行镜像 需要提前 chmod 777.sh文件  </span><br><span class="hljs-built_in">source</span> /home/luojiajun/docker/jenkinsBuild/jenkinsBuild.sh<br></code></pre></td></tr></table></figure><p>通过执行在某个目录下的sh脚本去完成。这样不管是第一次运行镜像还是后续维护都能正确执行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># shell 文件</span><br><span class="hljs-keyword">if</span> [ $(sudo docker ps -a|grep jenkins_build |<span class="hljs-built_in">wc</span> -l) != <span class="hljs-string">&quot;0&quot;</span> ]<br><span class="hljs-keyword">then</span><br>    sudo docker stop jenkins_build<br>    sudo docker <span class="hljs-built_in">rm</span> jenkins_build<br><span class="hljs-keyword">fi</span><br>sudo docker run -it -d -p 3426:8080 --name=jenkins_build hub.fuxi.netease.com/luojiajun/jenkins-build:latest<br></code></pre></td></tr></table></figure></li><li><p>mvn 下载依赖速度过慢，导致整个CICD流程因为该关键节点所delay。就连下载最基础的Spring framework依赖都花费了10min!.</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2abo4d3xvj21il0u0n27.jpg" alt="image-20220516162440142"></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2abokpqw8j22gl0u0q7s.jpg" alt="image-20220516162508450"></p><p><strong>先看效果</strong></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2bhfiw8k4j22fk0qijwb.jpg" alt="image-20220517162936029"></p><ol><li><p>其实就是把本地已经安装好的依赖放到maven的基础镜像库中如何实现可以看步骤一。</p></li><li><p>步骤拆解</p><ol><li><p>第一步</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> hub.fuxi.netease.com/qa-web/jenkins-maven:<span class="hljs-number">3.6</span> AS mvn<br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">mkdir</span> /root/.m2/repository/org</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> / /root/.m2/repository/org</span><br></code></pre></td></tr></table></figure></li><li><p>第二步</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># docker buildx build构建镜像</span><br><span class="hljs-comment"># **--tag, -t:** 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。</span><br>docker buildx build -t hub.fuxi.netease.com/qa-web/jenkins-maven:latest .<br><span class="hljs-comment"># 登陆仓库</span><br>docker login hub.fuxi.netease.com<br><span class="hljs-comment"># push镜像</span><br>docker push hub.fuxi.netease.com/luojiajun/jenkins-build:1.1<br></code></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h3 id="需要解决的事情-持续更新中-按照优先级排序"><a href="#需要解决的事情-持续更新中-按照优先级排序" class="headerlink" title="需要解决的事情(持续更新中,按照优先级排序)"></a>需要解决的事情(持续更新中,按照优先级排序)</h3><ol><li>不同机器之间如何部署？<ol><li><a href="https://juejin.cn/post/7000534516410351646">Jenkins通过Publish Over SSH实现前端项目部署到远程服务全纪录</a></li></ol></li><li>多module的问题是如何处理？</li><li>代码的diff,类似发布系统，两个环境的代码进行比对。</li><li>热部署,在服务升级的时候最好不出现502等问题，用户无感知地去升级</li></ol><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://blog.csdn.net/chenjie19891104/article/details/42807959">热部署</a></li><li><a href="https://zhuanlan.zhihu.com/p/89312003">手把手带你搭建jenkins</a></li><li><a href="https://kms.netease.com/article/38761">基于轻舟CICD的代码静态扫描流程分享</a></li><li><a href="https://www.infoq.cn/article/432edcqbiu5je_dqj3zx">阿里巴巴如何基于 Kubernetes 实践 CI&#x2F;CD</a></li><li><a href="https://www.i4k.xyz/article/weixin_38087538/109080218">修改docker镜像并重新推送到镜像仓库</a></li><li><a href="https://yeasy.gitbook.io/docker_practice/image/multistage-builds">Dockerfile 多阶段构建</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>部署教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用的消息队列对比分析</title>
    <link href="/2022/10/24/%E5%B8%B8%E7%94%A8%E7%9A%84%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90/"/>
    <url>/2022/10/24/%E5%B8%B8%E7%94%A8%E7%9A%84%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%AF%B9%E6%AF%94%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<figure class="highlight"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs">分析了 kafka、RabbitMq 以及 Rocket 三种常用的消息队列<br></code></pre></td></tr></table></figure><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>消息队列是消息的传输过程中保存信息的容器，用于接受消息并以文件的方式存储，一个消息队列可以被一个或者多个消息者消费。</p><h3 id="对比分析"><a href="#对比分析" class="headerlink" title="对比分析"></a>对比分析</h3><p> <a href="https://so.csdn.net/so/search?q=ActiveMQ&spm=1001.2101.3001.7020">ActiveMQ</a> 5.x 维护越来越少，较少在大规模吞吐的场景中使用所以不做讨论。</p><table><thead><tr><th>–</th><th>apache&#x2F;Kafa</th><th align="left">RabbitMQ</th><th>apache&#x2F;RocketMQ</th></tr></thead><tbody><tr><td>GitHub star</td><td>21.9k</td><td align="left">9.5k</td><td>17.2k</td></tr><tr><td>特点</td><td><strong>它是一个分布式的，支持多分区、多副本，基于 Zookeeper 的分布式消息流平台</strong>，它同时也是一款开源的基于发布订阅模式的消息引擎系统。</td><td align="left"></td><td>它是纯 Java 开发，<strong>具有高性能、高可靠、高实时、适合大规模分布式系统应用的特点</strong></td></tr><tr><td>优点</td><td>1. 高吞吐、低延迟<br />2.高伸缩性<br />3.高稳定性<br />4.持久性、可靠性、可回溯性<br />5. 消息有序<br />6.有优秀的第三方kafka web界面</td><td align="left">1. 支持几乎所有最受欢迎的编程语言：Java，C，C ++，C＃，Ruby，Perl，Python，PHP等等；<br/>2. 支持消息路由：RabbitMQ 可以通过不同的交换器支持不同种类的消息路由；<br/>3. 消息时序：通过延时队列，可以指定消息的延时时间，过期时间TTL等；<br/>4. 支持容错处理：通过交付重试和死信交换器（DLX）来处理消息处理故障；<br/>5. 提供了一个易用的用户界面，使得用户可以监控和管理消息 Broker；<br/>6. 社区活跃度高。<br/></td><td>1.高吞吐：借鉴 Kafka 的设计，单一队列百万消息的堆积能力；<br/>2.高伸缩性：灵活的分布式横向扩展部署架构，整体架构其实和 kafka 很像；<br/>3. 高容错性：通过ACK机制，保证消息一定能正常消费；<br/>4. 持久化、可回溯：消息可以持久化到磁盘中，支持消息回溯；<br/>5. 消息有序：在一个队列中可靠的先进先出（FIFO）和严格的顺序传递；<br/>6. 支持发布&#x2F;订阅和点对点消息模型，支持拉、推两种消息模式；<br/>7. 提供 docker 镜像用于隔离测试和云集群部署，提供配置、指标和监控等功能丰富的 Dashboard。<br/></td></tr><tr><td>缺点</td><td>1. 单机如果超过64个队列或者分区,Load会发生明显飙高的现象,队列越多,load越高,发送消息相应时间变长<br />2. 不支持消息路由，不支持延时发送，不支持消息重试<br />3. 社区更新较慢</td><td align="left">1. Erlang开发，不利于做二次开发和维护<br />2. RabbitMQ吞吐量会低一些<br />3. 不支持消息有序、持久化不好、不支持消息回溯、伸缩性一般。</td><td>1. 不支持消息路由,目前是主要是Java 和c++(c++不成熟)<br /></td></tr></tbody></table><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://blog.csdn.net/qq_19007169/article/details/124702533">面试官问：消息队列该怎么选择？Kafka、RocketMQ 、RabbitMQ 和 ActiveMQ</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>kafka</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>了解websocket</title>
    <link href="/2022/10/24/%E4%BA%86%E8%A7%A3websocket/"/>
    <url>/2022/10/24/%E4%BA%86%E8%A7%A3websocket/</url>
    
    <content type="html"><![CDATA[<figure class="highlight"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs">websocker协议简介，踩坑经验以及在nodejs中的实践<br></code></pre></td></tr></table></figure><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>WebSocket 协议在2008年诞生，2011年成为国际标准。所有浏览器都已经支持了。</p><p>它的<strong>最大特点</strong>就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种。</p><p><strong>其他特点包括：</strong></p><p>（1）建立在 TCP 协议之上，服务器端的实现比较容易。</p><p>（2）与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。</p><p>（3）数据格式比较轻量，性能开销小，通信高效。</p><p>（4）可以发送文本，也可以发送二进制数据。</p><p>（5）没有同源限制，客户端可以与任意服务器通信。</p><p>（6）协议标识符是ws（如果加密，则为wss），服务器网址就是 URL。</p><h1 id="readyState"><a href="#readyState" class="headerlink" title="readyState"></a>readyState</h1><table><thead><tr><th>Constant</th><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>CONNECTING</td><td>0</td><td>The connection is not yet open.</td></tr><tr><td>OPEN</td><td>1</td><td>The connection is open and ready to communicate.</td></tr><tr><td>CLOSING</td><td>2</td><td>The connection is in the process of closing.</td></tr><tr><td>CLOSED</td><td>3</td><td>The connection is closed.</td></tr></tbody></table><blockquote><p>坑点: websocket.readyState &#x3D;&#x3D;&#x3D;3 这里 没有走 close 的生命周期  </p></blockquote><h3 id="断线重连解决方案"><a href="#断线重连解决方案" class="headerlink" title="断线重连解决方案"></a>断线重连解决方案</h3><ol><li>在websocket&#x2F;ws 这个框架中，会有open,message,close 和 error生命周期。</li><li>可以在 close 的生命周期中，执行reconnect流程<a href="https://stackoverflow.com/questions/22431751/websocket-how-to-automatically-reconnect-after-it-dies/23176223">参考最高赞答案</a>.然后在error的生命周期中 打印crash日志,由于 error 必定触发close 所以只需要在 close 生命周期中进行 reconnect方法。<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stata">ws.<span class="hljs-keyword">on</span>(<span class="hljs-string">&quot;close&quot;</span>, function <span class="hljs-keyword">close</span>() &#123;<br>    console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;ai connect close&quot;</span>);<br>    reconnect(); <span class="hljs-comment">/// 每隔5s 重连 </span><br>&#125;);<br>ws.<span class="hljs-keyword">on</span>(<span class="hljs-string">&quot;error&quot;</span>, function <span class="hljs-keyword">error</span>(<span class="hljs-keyword">error</span>) &#123;<br>    console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;ai connect error&quot;</span>, <span class="hljs-keyword">error</span>);<br>    errorLogger.<span class="hljs-keyword">error</span>(<span class="hljs-string">&quot;ai connect error&quot;</span>, <span class="hljs-keyword">error</span>); <span class="hljs-comment">//打印crash日志</span><br>    ws.<span class="hljs-keyword">close</span>()<br>&#125;);<br></code></pre></td></tr></table></figure></li><li>readyState&#x3D;3 不会触发close的生命周期，所以需要对其单独处理，一旦检测到 其为3,则 terminate()该websocket.当然还有一种解决方案，因为在websocket中有心跳包的存在,详见<a href="https://github.com/websockets/ws">How to detect and close broken connections?</a>，可以在接收到来自其他socketServer的’pong’的信号,则写一个定时器，如果规定时间内，没有收到来自下一个的心跳包则 terminate 该socket<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (message === <span class="hljs-string">&#x27;pong&#x27;</span>) &#123;<br>        <span class="hljs-built_in">clearTimeout</span>(aliveInterval);<br>        aliveInterval = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            wsObj.<span class="hljs-property">wsAI</span>.<span class="hljs-title function_">terminate</span>()<br>        &#125;, <span class="hljs-number">10000</span> + <span class="hljs-number">1000</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><blockquote><p>ws&#x2F;websocket 官方Tip: Use <code>WebSocket#terminate()</code>, which immediately destroys the connection,<br>instead of <code>WebSocket#close()</code>, which waits for the close timer.<br>之我的理解: terminate() 能够立马 destory 连接,如果是close()的话，意味着还需要等待 close 的任务  </p></blockquote><blockquote><p>工程化  Tips:   </p><ul><li>当我们搭建 websocketServer的时候，常常会遇到socket.readyState &#x3D;0 的情况, 会报Error: WebSocket is not open: readyState 0 (CONNECTING)这个错误,所以在我们和每个socket通信的时候，可以增加前提 ws.readyState&#x3D;&#x3D;&#x3D;1 才进行ws.send()，否则socket中断，如何socket发送方没有做socket重连的话，会导致服务的崩溃。</li><li>我们可以实时检测是否有 readyState &#x3D;&#x3D;&#x3D;2 或者 readyState &#x3D;&#x3D;&#x3D;3 的socket连接，主动去执行ws.terminate(),因为在实战的过程中，发现某个socket状态持续为 2(即closing),而不是3(closed)</li></ul></blockquote><p>最后 放上两个websocket的nodejs的框架</p><p>1 <a href="https://socket.io/">https://socket.io/</a><br>2. <a href="https://github.com/websockets/ws">https://github.com/websockets/ws</a></p>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
      <category>websocket</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手把手带你实践Kafka</title>
    <link href="/2022/10/24/%E6%89%8B%E6%8A%8A%E6%89%8B%E5%B8%A6%E4%BD%A0%E5%AE%9E%E8%B7%B5Kafka/"/>
    <url>/2022/10/24/%E6%89%8B%E6%8A%8A%E6%89%8B%E5%B8%A6%E4%BD%A0%E5%AE%9E%E8%B7%B5Kafka/</url>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><strong>分布式</strong>的事件流平台， 被数千家用于高性能的数据管道、流分析、数据集成和关键任务应用。  基于<strong>发布&#x2F;订阅</strong>模式的<strong>消息队列</strong>,</p><h3 id="传统消息队列应用场景"><a href="#传统消息队列应用场景" class="headerlink" title="传统消息队列应用场景"></a>传统消息队列应用场景</h3><ol><li>缓存&#x2F;消峰</li><li>解耦</li><li>异步通信</li></ol><h3 id="安装-docker版本"><a href="#安装-docker版本" class="headerlink" title="安装[docker版本]"></a>安装[docker版本]</h3><div class="code-wrapper"><pre><code class="hljs">kafka需要配合zookeeper联合使用,所以为了方便安装部署直接上docker-compose.yml.你可能和我会有同样的疑惑，我装一个kafka为什么还要给我整个ZooKeper？这不是要往死里学了吗-_-! 其实：这里的zookeeper事Kafka用来负责群元数据的管理、控制器的选举等操作的。可以看一下这篇文章[利用docker和docker-compose部署单机kafka](https://segmentfault.com/a/1190000021746086)</code></pre></div><p>或者直接用我的，直接docker-compose -up就行了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;2&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">zookeeper:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">&#x27;zookeeper:latest&#x27;</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">zookeeper</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">zookeeper_1</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;2181:2181&#x27;</span><br>    <span class="hljs-attr">expose:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;2181&#x27;</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-comment"># 匿名登录--必须开启</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ALLOW_ANONYMOUS_LOGIN=yes</span><br>  <span class="hljs-attr">kafka:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">&#x27;bitnami/kafka:latest&#x27;</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">kafka</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;9092:9092&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;9082:9082&#x27;</span><br>    <span class="hljs-attr">expose:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;9092&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;9082&#x27;</span><br>    <span class="hljs-attr">environment:</span><br>       <span class="hljs-comment"># broker 的编号，如果集群中有多个 broker，则每个 broker 的编号需要设置的 不同</span><br>      <span class="hljs-attr">KAFKA_BROKER_ID:</span> <span class="hljs-number">0</span><br>      <span class="hljs-attr">KAFKA_ADVERTISED_LISTENERS:</span> <span class="hljs-string">PLAINTEXT://127.0.0.1:9092</span><br>      <span class="hljs-attr">KAFKA_CREATE_TOPICS:</span> <span class="hljs-string">&quot;kafeidou:2:0&quot;</span> <span class="hljs-comment">#kafka启动后初始化一个有2个partition(分区)0个副本名叫kafeidou的topic </span><br>      <span class="hljs-attr">KAFKA_ZOOKEEPER_CONNECT:</span> <span class="hljs-string">zookeeper:2181</span><br>      <span class="hljs-comment"># broker 对外提供 的服务入 口地址</span><br>      <span class="hljs-attr">KAFKA_LISTENERS:</span> <span class="hljs-string">PLAINTEXT://0.0.0.0:9092</span><br>      <span class="hljs-attr">ALLOW_PLAINTEXT_LISTENER:</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;zookeeper&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./kafka-logs:/kafka</span><br></code></pre></td></tr></table></figure><h4 id="Zookeeper为Kafka做了哪些事情？"><a href="#Zookeeper为Kafka做了哪些事情？" class="headerlink" title="Zookeeper为Kafka做了哪些事情？"></a>Zookeeper为Kafka做了哪些事情？</h4><ol><li>Broker的注册</li><li>Topic的注册</li><li>负载均衡</li></ol><h4 id="测试是否正确运行了"><a href="#测试是否正确运行了" class="headerlink" title="测试是否正确运行了"></a>测试是否正确运行了</h4><ol><li><p>创建topic</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">kafka-topics.sh --create --topic test-topic --bootstrap-server localhost:9092 --replication-factor 1 --partitions 4<br><br><span class="hljs-comment"># terminal中会输出 Created topic test-topic.</span><br></code></pre></td></tr></table></figure></li><li><p>开两个 terminal </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 消费者进程</span><br>kafka-console-producer.sh --broker-list localhost:9092 --topic test-topic<br><span class="hljs-comment"># 生产者进程</span><br>kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test-topic<br></code></pre></td></tr></table></figure></li><li><p>运行效果</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2ca09tj0qj21l70u0wgf.jpg" alt="image-20220518085819457"></p></li></ol><h3 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h3><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2c72fk3q4j21340j0goe.jpg" alt="image-20220518071633538"></p><h3 id="代码实现生产者消费者"><a href="#代码实现生产者消费者" class="headerlink" title="代码实现生产者消费者"></a>代码实现生产者消费者</h3><h4 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.KafkaProducer;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProducerFastStart</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">brokerList</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;localhost:9092&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">topic</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test-topic&quot;</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    properties.put(<span class="hljs-string">&quot;key.serializer&quot;</span>, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);<br>    properties.put(<span class="hljs-string">&quot;value.serializer&quot;</span>, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);<br>    properties.put(<span class="hljs-string">&quot;bootstrap.servers&quot;</span>, brokerList);<br><br>    KafkaProducer&lt;String, String&gt; producer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaProducer</span>&lt;&gt;(properties);<br>    ProducerRecord&lt;String, String&gt; record = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProducerRecord</span>&lt;&gt;(topic, <span class="hljs-string">&quot;hello, Kafka!&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>      producer.send(record);<br>      <span class="hljs-comment">//            producer.send(record).get();</span><br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      e.printStackTrace();<br>    &#125;<br>    producer.close();<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;<br><br><span class="hljs-keyword">import</span> java.time.Duration;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsumerFastStart</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">brokerList</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;localhost:9092&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">topic</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test-topic&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">groupId</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;0&quot;</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    properties.put(<span class="hljs-string">&quot;key.deserializer&quot;</span>, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);<br>    properties.put(<br>        <span class="hljs-string">&quot;value.deserializer&quot;</span>, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);<br>    properties.put(<span class="hljs-string">&quot;bootstrap.servers&quot;</span>, brokerList);<br>    properties.put(<span class="hljs-string">&quot;group.id&quot;</span>, groupId);<br><br>    KafkaConsumer&lt;String, String&gt; consumer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaConsumer</span>&lt;&gt;(properties);<br>    consumer.subscribe(Collections.singletonList(topic));<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>      ConsumerRecords&lt;String, String&gt; records = consumer.poll(Duration.ofMillis(<span class="hljs-number">1000</span>));<br>      <span class="hljs-keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;<br>        System.out.println(record.value());<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h4><p>可以看到捕获到的事heelo wordl 说明的确是能够消费到的。</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2ca3czl7ij21il0u0jz6.jpg" alt="image-20220518090116867"></p>]]></content>
    
    
    <categories>
      
      <category>Kafka</category>
      
      <category>部署教程</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring中@Schedule和@Async注解实现细粒度定时任务</title>
    <link href="/2022/10/24/Spring%E4%B8%AD-Schedule%E5%92%8C-Async%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E7%BB%86%E7%B2%92%E5%BA%A6%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <url>/2022/10/24/Spring%E4%B8%AD-Schedule%E5%92%8C-Async%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E7%BB%86%E7%B2%92%E5%BA%A6%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<figure class="highlight makefile"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">前言:多任务并发执行,同一任务的异步执行并且需要自定义线程池从而做到对线程得更加细粒度的控制,请问你该如何实现?</span><br></code></pre></td></tr></table></figure><p>首先仅仅@Schedule发现用的是仅仅同一个线程会发生线程的阻塞.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CurrThreadRun</span> &#123;<br>    <span class="hljs-meta">@Scheduled(fixedRate = 3000)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">scheduledTask</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>();<br>        sdf.applyPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss a&quot;</span>);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        System.out.println(sdf.format(date) + Thread.currentThread().getName() + <span class="hljs-string">&quot;===1 run&quot;</span>);<br>        Thread.sleep(<span class="hljs-number">6</span> * <span class="hljs-number">1000</span>);<br>        date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        System.out.println(sdf.format(date) + Thread.currentThread().getName() + <span class="hljs-string">&quot;===1 end&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Scheduled(fixedRate = 3000)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">scheduledTask2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>();<br>        sdf.applyPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss a&quot;</span>);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        System.out.println(sdf.format(date) + Thread.currentThread().getName() + <span class="hljs-string">&quot;===2 run&quot;</span>);<br>        Thread.sleep(<span class="hljs-number">6</span> * <span class="hljs-number">1000</span>);<br>        date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        System.out.println(sdf.format(date) + Thread.currentThread().getName() + <span class="hljs-string">&quot;===2 end&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>控制台的输出为以下内容,可以看到@shedule是个同步执行的任务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">2022-03-06 16:26:39.744  INFO 63252 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8091 (http) with context path <span class="hljs-string">&#x27;&#x27;</span><br>2022-03-06 16:26:39.749  INFO 63252 --- [           main] s.a.ScheduledAnnotationBeanPostProcessor : More than one TaskScheduler bean exists within the context, and none is named <span class="hljs-string">&#x27;taskScheduler&#x27;</span>. Mark one of them as primary or name it <span class="hljs-string">&#x27;taskScheduler&#x27;</span> (possibly as an <span class="hljs-built_in">alias</span>); or implement the SchedulingConfigurer interface and call ScheduledTaskRegistrar<span class="hljs-comment">#setScheduler explicitly within the configureTasks() callback: [scheduledTaskTwo, scheduledTaskOne]</span><br>2022-03-06 16:26:39 下午pool-1-thread-1===1 run<br>2022-03-06 16:26:39.753  INFO 63252 --- [           main] c.r.s.SpringbootDemoApplication          : Started SpringbootDemoApplication <span class="hljs-keyword">in</span> 1.198 seconds (JVM running <span class="hljs-keyword">for</span> 1.407)<br>2022-03-06 16:26:45 下午pool-1-thread-1===1 end<br>2022-03-06 16:26:45 下午pool-1-thread-1===2 run<br>2022-03-06 16:26:51 下午pool-1-thread-1===2 end<br>2022-03-06 16:26:51 下午pool-1-thread-1===1 run<br></code></pre></td></tr></table></figure><p>打开了ThreadPoolTaskScheduler源码发0现(Set the ScheduledExecutorService’s pool size. Default is 1.<br>This setting can be modified at runtime, for example through JMX.)默认开启的线程数量为一。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPoolSize</span><span class="hljs-params">(<span class="hljs-type">int</span> poolSize)</span> &#123;<br>Assert.isTrue(poolSize &gt; <span class="hljs-number">0</span>, <span class="hljs-string">&quot;&#x27;poolSize&#x27; must be 1 or higher&quot;</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.scheduledExecutor <span class="hljs-keyword">instanceof</span> ScheduledThreadPoolExecutor) &#123;<br>((ScheduledThreadPoolExecutor) <span class="hljs-built_in">this</span>.scheduledExecutor).setCorePoolSize(poolSize);<br>&#125;<br><span class="hljs-built_in">this</span>.poolSize = poolSize;<br>&#125;<br></code></pre></td></tr></table></figure><p>于是我们的代码又有了以下的改动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> TaskScheduler <span class="hljs-title function_">taskScheduler</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ThreadPoolTaskScheduler</span> <span class="hljs-variable">taskScheduler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolTaskScheduler</span>();<br>    taskScheduler.setPoolSize(<span class="hljs-number">2</span>);<span class="hljs-comment">//我这里设置的线程数是2,可以根据需求调整</span><br>    <span class="hljs-keyword">return</span> taskScheduler;<br>&#125;<br></code></pre></td></tr></table></figure><p>做到这里我们实现了多任务并发执行,但是同一任务异步执行还没有实现.这个需求就更加简单了.<br>加上@Async之后,我们可以实现了同一任务的异步执行.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CurrThreadRun</span> &#123;<br>    <span class="hljs-meta">@Async</span><br>    <span class="hljs-meta">@Scheduled(fixedRate = 3000)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">scheduledTask</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>();<br>        sdf.applyPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss a&quot;</span>);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        System.out.println(sdf.format(date) + Thread.currentThread().getName() + <span class="hljs-string">&quot;===1 run&quot;</span>);<br>        Thread.sleep(<span class="hljs-number">6</span> * <span class="hljs-number">1000</span>);<br>        date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        System.out.println(sdf.format(date) + Thread.currentThread().getName() + <span class="hljs-string">&quot;===1 end&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Async</span><br>    <span class="hljs-meta">@Scheduled(fixedRate = 3000)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">scheduledTask2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>();<br>        sdf.applyPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss a&quot;</span>);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        System.out.println(sdf.format(date) + Thread.currentThread().getName() + <span class="hljs-string">&quot;===2 run&quot;</span>);<br>        Thread.sleep(<span class="hljs-number">6</span> * <span class="hljs-number">1000</span>);<br>        date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        System.out.println(sdf.format(date) + Thread.currentThread().getName() + <span class="hljs-string">&quot;===2 end&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> TaskScheduler <span class="hljs-title function_">taskScheduler</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ThreadPoolTaskScheduler</span> <span class="hljs-variable">taskScheduler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolTaskScheduler</span>();<br>        taskScheduler.setPoolSize(<span class="hljs-number">2</span>);<span class="hljs-comment">//我这里设置的线程数是2,可以根据需求调整</span><br>        <span class="hljs-keyword">return</span> taskScheduler;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出为以下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">2022</span>-<span class="hljs-number">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">16</span>:<span class="hljs-number">40</span>:<span class="hljs-number">55.794</span>  INFO <span class="hljs-number">63750</span> --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on <span class="hljs-title function_">port</span><span class="hljs-params">(s)</span>: <span class="hljs-number">8091</span> (http) with context path <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-number">2022</span>-<span class="hljs-number">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">16</span>:<span class="hljs-number">40</span>:<span class="hljs-number">55.799</span>  INFO <span class="hljs-number">63750</span> --- [taskScheduler-<span class="hljs-number">1</span>] .s.a.AnnotationAsyncExecutionInterceptor : More than one TaskExecutor bean found within the context, and none is named <span class="hljs-string">&#x27;taskExecutor&#x27;</span>. Mark one of them as primary or name it <span class="hljs-string">&#x27;taskExecutor&#x27;</span> (possibly as an alias) in order to use it <span class="hljs-keyword">for</span> async processing: [taskScheduler, scheduledTaskTwo, scheduledTaskOne]<br><span class="hljs-number">2022</span>-<span class="hljs-number">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">16</span>:<span class="hljs-number">40</span>:<span class="hljs-number">55</span> 下午SimpleAsyncTaskExecutor-<span class="hljs-number">2</span>===<span class="hljs-number">2</span> run<br><span class="hljs-number">2022</span>-<span class="hljs-number">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">16</span>:<span class="hljs-number">40</span>:<span class="hljs-number">55</span> 下午SimpleAsyncTaskExecutor-<span class="hljs-number">1</span>===<span class="hljs-number">1</span> run<br><span class="hljs-number">2022</span>-<span class="hljs-number">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">16</span>:<span class="hljs-number">40</span>:<span class="hljs-number">55.801</span>  INFO <span class="hljs-number">63750</span> --- [           main] c.r.s.SpringbootDemoApplication          : Started SpringbootDemoApplication in <span class="hljs-number">1.261</span> seconds (JVM running <span class="hljs-keyword">for</span> <span class="hljs-number">1.581</span>)<br><span class="hljs-number">2022</span>-<span class="hljs-number">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">16</span>:<span class="hljs-number">40</span>:<span class="hljs-number">58</span> 下午SimpleAsyncTaskExecutor-<span class="hljs-number">3</span>===<span class="hljs-number">1</span> run<br><span class="hljs-number">2022</span>-<span class="hljs-number">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">16</span>:<span class="hljs-number">40</span>:<span class="hljs-number">58</span> 下午SimpleAsyncTaskExecutor-<span class="hljs-number">4</span>===<span class="hljs-number">2</span> run<br><span class="hljs-number">2022</span>-<span class="hljs-number">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">16</span>:<span class="hljs-number">41</span>:<span class="hljs-number">01</span> 下午SimpleAsyncTaskExecutor-<span class="hljs-number">6</span>===<span class="hljs-number">2</span> run<br><span class="hljs-number">2022</span>-<span class="hljs-number">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">16</span>:<span class="hljs-number">41</span>:<span class="hljs-number">01</span> 下午SimpleAsyncTaskExecutor-<span class="hljs-number">5</span>===<span class="hljs-number">1</span> run<br><span class="hljs-number">2022</span>-<span class="hljs-number">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">16</span>:<span class="hljs-number">41</span>:<span class="hljs-number">01</span> 下午SimpleAsyncTaskExecutor-<span class="hljs-number">2</span>===<span class="hljs-number">2</span> end<br></code></pre></td></tr></table></figure><p>但是这个输出的线程池名称让人难以理解，因为@Async是Async用的是默认的SimpleAsyncTaskExecutor作为线程池,所以 为了日志的可阅读性,<br>带着好奇心看了一下SimpleAsyncTaskExecutor这个线程池,文件开头就出现了一注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">TaskExecutor implementation that fires up a <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span> <span class="hljs-keyword">for</span> each task, executing it asynchronously.<br>Supports limiting concurrent threads through the <span class="hljs-string">&quot;concurrencyLimit&quot;</span> bean property. By <span class="hljs-keyword">default</span>, the number of concurrent threads is unlimited.<br>NOTE: This implementation does not reuse threads! Consider a thread-pooling TaskExecutor implementation instead, in particular <span class="hljs-keyword">for</span> executing a large number of <span class="hljs-type">short</span>-lived tasks  <br>TaskExecutor 实现为每个任务启动一个新线程，异步执行它。<br>支持通过“concurrencyLimit”bean 属性限制并发线程。 默认情况下，并发线程数是无限的。<br>注意：此实现不重用线程！ 考虑一个线程池 TaskExecutor 实现，特别是用于执行大量短期任务<br></code></pre></td></tr></table></figure><p>所以该线程池默认来一个任务创建一个线程，若系统中不断的创建线程，最终会导致系统占用内存过高，引发OutOfMemoryError错误。所以严格意义上说这个人并不是啥线程池我们要重新设置一下。</p><p>那么@Async是如何配置线程池的呢，这个我会另外再写一篇@Async配置线程池的文章进行描述.</p><p>为了满足前言的需求，我简单将@Async配置了ThreadPoolTaskScheduler,全部的代码如下图所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CurrThreadRun</span> &#123;<br><br>    <span class="hljs-meta">@Async(&quot;scheduledTaskOne&quot;)</span><br>    <span class="hljs-meta">@Scheduled(fixedRate = 3000)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">scheduledTask</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>();<br>        sdf.applyPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss a&quot;</span>);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        System.out.println(sdf.format(date) + Thread.currentThread().getName() + <span class="hljs-string">&quot;===1 run&quot;</span>);<br>        Thread.sleep(<span class="hljs-number">6</span> * <span class="hljs-number">1000</span>);<br>        date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        System.out.println(sdf.format(date) + Thread.currentThread().getName() + <span class="hljs-string">&quot;===1 end&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Async(&quot;scheduledTaskTwo&quot;)</span><br>    <span class="hljs-meta">@Scheduled(fixedRate = 3000)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">scheduledTask2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sdf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>();<br>        sdf.applyPattern(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss a&quot;</span>);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        System.out.println(sdf.format(date) + Thread.currentThread().getName() + <span class="hljs-string">&quot;===2 run&quot;</span>);<br>        Thread.sleep(<span class="hljs-number">6</span> * <span class="hljs-number">1000</span>);<br>        date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        System.out.println(sdf.format(date) + Thread.currentThread().getName() + <span class="hljs-string">&quot;===2 end&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    ThreadPoolTaskScheduler <span class="hljs-title function_">scheduledTaskTwo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ThreadPoolTaskScheduler</span> <span class="hljs-variable">threadPoolTaskScheduler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolTaskScheduler</span>();<br>        threadPoolTaskScheduler.setPoolSize(<span class="hljs-number">2</span>);<br>        threadPoolTaskScheduler.setAwaitTerminationSeconds(<span class="hljs-number">60</span>);<br>        threadPoolTaskScheduler.setThreadNamePrefix(<span class="hljs-string">&quot;TASK_SCHEDULER_SECOND-AAA-&quot;</span>);<br>        <span class="hljs-keyword">return</span> threadPoolTaskScheduler;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    ThreadPoolTaskScheduler <span class="hljs-title function_">scheduledTaskOne</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ThreadPoolTaskScheduler</span> <span class="hljs-variable">threadPoolTaskScheduler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolTaskScheduler</span>();<br>        threadPoolTaskScheduler.setPoolSize(<span class="hljs-number">2</span>);<br>        threadPoolTaskScheduler.setThreadNamePrefix(<span class="hljs-string">&quot;TASK_SCHEDULER_SECOND-BBB-&quot;</span>);<br>        <span class="hljs-keyword">return</span> threadPoolTaskScheduler;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>得到了输出的控制台如下所示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">2022</span>-<span class="hljs-number">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">10</span>:<span class="hljs-number">18.509</span>  INFO <span class="hljs-number">64755</span> --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on <span class="hljs-title function_">port</span><span class="hljs-params">(s)</span>: <span class="hljs-number">8091</span> (http) with context path <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-number">2022</span>-<span class="hljs-number">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">10</span>:<span class="hljs-number">18.513</span>  INFO <span class="hljs-number">64755</span> --- [           main] s.a.ScheduledAnnotationBeanPostProcessor : More than one TaskScheduler bean exists within the context, and none is named <span class="hljs-string">&#x27;taskScheduler&#x27;</span>. Mark one of them as primary or name it <span class="hljs-string">&#x27;taskScheduler&#x27;</span> (possibly as an alias); or implement the SchedulingConfigurer <span class="hljs-keyword">interface</span> <span class="hljs-title class_">and</span> call ScheduledTaskRegistrar#setScheduler explicitly within the <span class="hljs-title function_">configureTasks</span><span class="hljs-params">()</span> callback: [scheduledTaskTwo, scheduledTaskOne]<br><span class="hljs-number">2022</span>-<span class="hljs-number">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">10</span>:<span class="hljs-number">18.516</span>  INFO <span class="hljs-number">64755</span> --- [           main] c.r.s.SpringbootDemoApplication          : Started SpringbootDemoApplication in <span class="hljs-number">1.391</span> seconds (JVM running <span class="hljs-keyword">for</span> <span class="hljs-number">1.613</span>)<br><span class="hljs-number">2022</span>-<span class="hljs-number">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">10</span>:<span class="hljs-number">18</span> 下午TASK_SCHEDULER_SECOND-BBB-<span class="hljs-number">1</span>===<span class="hljs-number">1</span> run<br><span class="hljs-number">2022</span>-<span class="hljs-number">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">10</span>:<span class="hljs-number">18</span> 下午TASK_SCHEDULER_SECOND-AAA-<span class="hljs-number">1</span>===<span class="hljs-number">2</span> run<br><span class="hljs-number">2022</span>-<span class="hljs-number">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">10</span>:<span class="hljs-number">21</span> 下午TASK_SCHEDULER_SECOND-BBB-<span class="hljs-number">2</span>===<span class="hljs-number">1</span> run<br><span class="hljs-number">2022</span>-<span class="hljs-number">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">10</span>:<span class="hljs-number">21</span> 下午TASK_SCHEDULER_SECOND-AAA-<span class="hljs-number">2</span>===<span class="hljs-number">2</span> run<br><span class="hljs-number">2022</span>-<span class="hljs-number">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">10</span>:<span class="hljs-number">24</span> 下午TASK_SCHEDULER_SECOND-BBB-<span class="hljs-number">1</span>===<span class="hljs-number">1</span> end<br><span class="hljs-number">2022</span>-<span class="hljs-number">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">10</span>:<span class="hljs-number">24</span> 下午TASK_SCHEDULER_SECOND-AAA-<span class="hljs-number">1</span>===<span class="hljs-number">2</span> end<br><span class="hljs-number">2022</span>-<span class="hljs-number">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">10</span>:<span class="hljs-number">24</span> 下午TASK_SCHEDULER_SECOND-BBB-<span class="hljs-number">1</span>===<span class="hljs-number">1</span> run<br><span class="hljs-number">2022</span>-<span class="hljs-number">03</span>-<span class="hljs-number">06</span> <span class="hljs-number">17</span>:<span class="hljs-number">10</span>:<span class="hljs-number">24</span> 下午TASK_SCHEDULER_SECOND-AAA-<span class="hljs-number">1</span>===<span class="hljs-number">2</span> run<br></code></pre></td></tr></table></figure><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ol><li><a href="https://segmentfault.com/a/1190000015253688">SpringBoot @Scheduled注解使用: 同步&#x2F;异步同一任务及多任务并发执行</a></li><li><a href="https://www.cnblogs.com/wlandwl/p/async.html">Spring使用@Async注解</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【TODO】Spring多线程共享变量</title>
    <link href="/2022/10/23/Spring%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%85%B1%E4%BA%AB%E5%8F%98%E9%87%8F/"/>
    <url>/2022/10/23/Spring%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%85%B1%E4%BA%AB%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<ol><li>如何保证线程安全？</li><li></li></ol>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>todo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1024技术马拉松-webShell检测</title>
    <link href="/2022/10/22/webShell%E6%A3%80%E6%B5%8B/"/>
    <url>/2022/10/22/webShell%E6%A3%80%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​参加了我司的1024程序员技术节，是一个安全方向的题目。要求2天内去实现 “检测扫描可能存在的java web shell文件”，对于我组来说是一个全新的未知的领域，一切都靠自己去研究和学习。最后结果是非常nice的，获得了第二名🥈的好成绩！在16支队伍汇总脱颖而出！</p><h2 id="什么是webShell？"><a href="#什么是webShell？" class="headerlink" title="什么是webShell？"></a>什么是webShell？</h2><h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h3><p>​能够执行系统命令、加载代码的函数，或者组合一些普通函数，完成一些高级间谍功能的网站后门脚本，就叫做webShell.</p><h2 id="如何检测webShell"><a href="#如何检测webShell" class="headerlink" title="如何检测webShell?"></a>如何检测webShell?</h2><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7e73m8ldmj30yj0jkdhi.jpg" alt="如何检测webShell"></p><h2 id="先上结果！"><a href="#先上结果！" class="headerlink" title="先上结果！"></a>先上结果！</h2><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7fh59xapaj30qs0hy0tu.jpg" alt="请求执行流程"></p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7fhadorp0j30eg0veacq.jpg" alt="请求具体流程图"></p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7fbp9taywj30k20c274h.jpg" alt="扫描变化优化"></p><h3 id="首次准确率-78-125"><a href="#首次准确率-78-125" class="headerlink" title="首次准确率 78.125%"></a>首次准确率 78.125%</h3><h3 id="使用到的方式："><a href="#使用到的方式：" class="headerlink" title="使用到的方式："></a>使用到的方式：</h3><h4 id="内容相似度-模糊哈希算法"><a href="#内容相似度-模糊哈希算法" class="headerlink" title="内容相似度(模糊哈希算法):"></a>内容相似度(模糊哈希算法):</h4><p>因为绝大概率是文件的多处修改、增加、删除部分内容，从而植入恶意脚本。</p><table><thead><tr><th></th><th>逐个字节对比</th><th>分片哈希(piecewise hashing)</th><th>模糊哈希算法（基于内容分割的分片哈希算法 context triggered piecewise hashing, CTPH）</th></tr></thead><tbody><tr><td>存在的问题</td><td>1. n个文件寻找相似关系，每个文件需要读取和对比n-1次；<br />2. 即便是只修改文件中的一个字节，得到的结果也会大不相同（这是哈希算法的基本要求）</td><td>1. 局部的修改只会影响少量分片的哈希结果，因此从整个文件看还是会有较高的相似性（虽然不是100%)<br />2. 即在一个文件中插入或删除一个字节，就会失效</td><td>性能相比较弱</td></tr><tr><td>主要原理</td><td>逐个字节对比</td><td>每隔一个固定间隔就将文件分片，对每片计算一个哈希值，将这些哈希值一起作相似比较</td><td>使用一个弱哈希计算文件局部内容，在特定条件下对文件进行分片，然后使用一个强哈希对文件每片计算哈希值，取这些值的一部分并连接起来，与分片条件一起构成一个模糊哈希结果。使用一个字符串相似性对比算法判断两个模糊哈希值的相似度有多少，从而判断两个文件的相似程度。</td></tr><tr><td>优点</td><td>简单</td><td>数据可以较为均匀地分配到各节点，并发写入性能更好</td><td>1. 大量<strong>被用于恶意代码检测</strong>，最近又有用于开源软件漏洞挖掘等<br />2. 对文件的部分变化（包括在多处修改、增加、删除部分内容），使用模糊哈希均能发现与源文件的相似关系，是目前判断相似性较好的一种方法。</td></tr></tbody></table><p>文件文本内容读取 与 特征库正样本的内容计算hash值 来判断阈值，首先排除了4k以内的小文件 , 如果相似度&gt;80%那么极大可能说明是个 webShell.</p><figure class="highlight ini"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs ini">Ajax_PHP Command <span class="hljs-attr">Shell.txt</span>=<span class="hljs-number">192</span>:m8w0x1clNhL8wWSewS8wHYAMAY/o7SLCqwvz7ef8WHeepSqU:Xx1clNhL8wTewS8w4DAqo2LpwH8g<br>Antichat Shell <span class="hljs-attr">v1.3.txt</span>=<span class="hljs-number">192</span>:s08vOJJGKejPc1DUacgad3qdbTBchHSGMNwsEE5xO0mU:eZ7E1YhJd3qdbNchjMNhD5I05<br>Ayyildiz Tim  -AYT- Shell v 2.1 <span class="hljs-attr">Biz.txt</span>=<span class="hljs-number">192</span>:G1mF5CZk6Q8Az8P1Az8P8Az8PCfAFsHC6yY/dTJKo2mmGXfa6qMtMWwQKVazgpm/:G4Urw8P1w8P8w8PCfssHF/<span class="hljs-number">2</span>mmGXfa6q2<br>等等，剩下的hash为了观看体验省略<br></code></pre></td></tr></table></figure><h4 id="正则匹配高危关键词"><a href="#正则匹配高危关键词" class="headerlink" title="正则匹配高危关键词"></a>正则匹配高危关键词</h4><p>如果检测到了关键词则说明是个异常的webShell.</p><p>比如 Runtime、eval、write以及exec等。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Static]</span><br>数据库后门=(\$a5\\n\$b33\\n\$c87\\n\$d23\\n\$e09\\n\$f23\\n\$g32\\n\$h65|\$msg8873)<br>习科后门=(blackbap\.org|silic\sgroup\shacker\sarmy)<br><span class="hljs-attr">c99.php</span>=(c99sh_surl|c99shvars|c99shcook|c99_buff_prepare)<br><span class="hljs-attr">c100.php</span>=(M5mBAUJmUD4i2hKsKFSBhC9RRFN1FK1bRpSK1jXEfHCD|p8QyxuODTvDDTFtxK4AUzeBJNfZJmoceA1Jlb2EK47y)<br><span class="hljs-attr">c2007.php</span>=(hcmdldCkgfHwgZGllKCJFcnJvcjogJCFcbiIp|OKTsNCmNsb3NlKFNURE9VVCk7DQpjbG9zZShTVERFUlIpOw|fs_rmobj)<br>剩下的hash为了观看体验省略<br><br></code></pre></td></tr></table></figure><h4 id="贝叶斯模型"><a href="#贝叶斯模型" class="headerlink" title="贝叶斯模型"></a>贝叶斯模型</h4><p>通过贝叶斯模型分类加密文件，这里通过NeoPi工具的几个维度(压缩比、信息墒、重合指数、最长单词)来训练数据.</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7fabttjenj30ae0hv751.jpg" alt="贝叶斯分类"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arff">0.403372,5.560183,0.012844,184384,546200,yes<br>0.757997,6.002106,0.01562,65644,65652,yes<br>0.757997,6.002106,0.01562,65644,65652,yes<br>0.627644,6.406372,0.016304,565,96432,yes<br>0.759292,6.007194,0.015599,23308,23327,yes<br>0.759274,6.006697,0.015608,23730,23749,yes<br>0.758414,6.078658,0.015112,14157,15005,yes<br>0.61079,6.408259,0.016056,613,127471,yes<br>0.758414,6.078658,0.015112,14157,15005,yes<br>0.5796,5.846444,0.030049,213,1049,yes<br>0.5796,5.846444,0.030049,213,1049,yes<br>0.746059,6.108262,0.014913,5855,12180,yes<br>0.269673,5.79752,0.019535,196040,196056,yes<br>...部分正样本<br></code></pre></td></tr></table></figure><p>通过上述几个方式串联执行 发现了 150 个异常文件，一共192个文件 , 结果是78.125%</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">2022-10-22 17:50:09.823  INFO 55082 --- [       Thread-5] com.okami.MonitorClientApplication       : 共192待扫描文件<br>2022-10-22 17:50:09.827  INFO 55082 --- [       Thread-5] com.okami.MonitorClientApplication       : Scan Start<br>2022-10-22 17:50:11.695  INFO 55082 --- [       Thread-5] com.okami.MonitorClientApplication       : WebshellFeature&lt;FuzzHash&gt; load success<br>2022-10-22 17:50:22.610  INFO 55082 --- [       Thread-5] com.okami.MonitorClientApplication       : Found value: Runtime.getRuntime().<span class="hljs-built_in">exec</span>(<br>2022-10-22 17:50:22.685  INFO 55082 --- [       Thread-5] com.okami.MonitorClientApplication       : Found value: exeCmd(<br>2022-10-22 17:50:22.865  INFO 55082 --- [       Thread-5] com.okami.MonitorClientApplication       : Found value: Runtime.getRuntime().<span class="hljs-built_in">exec</span>(<br>2022-10-22 17:50:23.056  INFO 55082 --- [       Thread-5] com.okami.MonitorClientApplication       : Found value: Runtime.getRuntime().<span class="hljs-built_in">exec</span>(<br>2022-10-22 17:50:23.056  INFO 55082 --- [       Thread-5] com.okami.MonitorClientApplication       : full Scan Finished, Found 150 evil file<br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7fhkorcx9j30yg0madgn.jpg" alt="单个分析结果"></p><h3 id="优化改进"><a href="#优化改进" class="headerlink" title="优化改进"></a>优化改进</h3><ol><li><p>新增了Content 正则匹配高风险 语法规则, 根据jsp 新增了如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">stream_write.jsp</span>=(\.write\()<br><span class="hljs-attr">runtime_getRuntime.jsp</span>=(runtime\.exec)<br></code></pre></td></tr></table></figure></li><li><p>新增了高风险文件内容散列hash</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">1</span>=<span class="hljs-number">384</span>:E10yca3w+hGweWpWSExUKoSE14JeLd6yylV6hEwk4Zay2ZaU+<span class="hljs-number">2</span>U+<span class="hljs-number">4</span>iDDRUnXwRRU:wtP<br><span class="hljs-attr">2</span>=<span class="hljs-number">3072</span>:rryQNmSkHqnPjZsdsW2RsDGjv20FPi6szKNVP8IowQT+<span class="hljs-number">5</span>n5xBG7nSHhmU44B2wO/:MTwQT+ZqwOe+tV<br><span class="hljs-attr">3</span>=<span class="hljs-number">24</span>:sScja5ZZ+s5hQdlUHFL5wUHFKicuNVxi7NVxi4V4ibZQHzWze5SQ92eAJAeaDNEQ:Zn5q6tw6KqMcvTxAQMeAmea5fZai<br><span class="hljs-attr">4</span>=<span class="hljs-number">48</span>:zXAxVZaor6myJ4X33rbpIpJXypbhslFK6/lgSDZYogfqrx8Raqi3Ch/NOr+DbpIe:I/xySKzi92OwXCoGC8RK3CnuY8dE<br><span class="hljs-attr">5</span>=<span class="hljs-number">24</span>:S4ZKOg41Tb3U6Lr/<span class="hljs-number">2</span>wTEy+eqNn/NnGxV3j0BR7wwU254/<span class="hljs-number">6</span>O1TjH81o:S40O31X3UGy0keC1I0P54d2K<br><span class="hljs-attr">6</span>=<span class="hljs-number">3</span>:nQW6ciLHQM4XNMd1KwP2017zAsXXvn:QQOLP2Mn7nvn<br><span class="hljs-attr">7</span>=<span class="hljs-number">48</span>:Zvtmk8jxr28ktxXpdh6uxxVxnzqAAQTSB0ndeMWUIIjcBBIU58FS5xAnPv4t:Zvtmk81SvxX/h6O/dzjTSSnEMWUFjcAk<br><span class="hljs-attr">8</span>=<span class="hljs-number">3</span>:nQW6ciLHQM4XNMd1KwP2017zAsXXvn:QQOLP2Mn7nvn<br>Ajax_PHP Command <span class="hljs-attr">Shell.txt</span>=<span class="hljs-number">192</span>:m8w0x1clNhL8wWSewS8wHYAMAY/o7SLCqwvz7ef8WHeepSqU:Xx1clNhL8wTewS8w4DAqo2LpwH8g<br></code></pre></td></tr></table></figure></li></ol><p>发现了 178 个异常文件，一共192个文件 , 结果是&#x3D;92.7%</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">2022-10-22 17:50:09.823  INFO 55082 --- [       Thread-5] com.okami.MonitorClientApplication       : 共192待扫描文件<br>2022-10-22 17:50:09.827  INFO 55082 --- [       Thread-5] com.okami.MonitorClientApplication       : Scan Start<br>2022-10-22 17:50:11.695  INFO 55082 --- [       Thread-5] com.okami.MonitorClientApplication       : WebshellFeature&lt;FuzzHash&gt; load success<br>2022-10-22 17:50:22.610  INFO 55082 --- [       Thread-5] com.okami.MonitorClientApplication       : Found value: Runtime.getRuntime().<span class="hljs-built_in">exec</span>(<br>2022-10-22 17:50:22.685  INFO 55082 --- [       Thread-5] com.okami.MonitorClientApplication       : Found value: exeCmd(<br>2022-10-22 17:50:22.865  INFO 55082 --- [       Thread-5] com.okami.MonitorClientApplication       : Found value: Runtime.getRuntime().<span class="hljs-built_in">exec</span>(<br>2022-10-22 17:50:23.056  INFO 55082 --- [       Thread-5] com.okami.MonitorClientApplication       : Found value: Runtime.getRuntime().<span class="hljs-built_in">exec</span>(<br>2022-10-22 17:50:23.056  INFO 55082 --- [       Thread-5] com.okami.MonitorClientApplication       : full Scan Finished, Found 150 evil file<br></code></pre></td></tr></table></figure><h3 id="首次速度结果"><a href="#首次速度结果" class="headerlink" title="首次速度结果"></a>首次速度结果</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">2022-10-23 15:08:53.852  INFO 79058 --- [       Thread-5] com.okami.MonitorClientApplication       : 共192待扫描文件<br>2022-10-23 15:08:53.855  INFO 79058 --- [       Thread-5] com.okami.MonitorClientApplication       : Scan Start<br>2022-10-23 15:08:53.884  INFO 79058 --- [       Thread-5] com.okami.MonitorClientApplication       : WebshellFeature&lt;FuzzHash&gt; load success<br>2022-10-23 15:08:58.785  INFO 79058 --- [       Thread-5] com.okami.MonitorClientApplication       : full Scan Finished, Found 192 evil file<br></code></pre></td></tr></table></figure><p>可以看到从 2022-10-23 10:14:28.596 到 2022-10-23 10:14:35.309 一共约7秒。</p><p>通过 本地存储一个已经通过检测安全的Map，key为存储文件的绝对路径 value为上一次修改时间.</p><p>修改了2个文件然后因为上一次修改时间变动了所以可以在几毫秒内瞬间完成</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">2022-10-23 15:11:40.738  INFO 79058 --- [       Thread-7] com.okami.MonitorClientApplication       : 共2待扫描文件<br>2022-10-23 15:11:40.741  INFO 79058 --- [       Thread-7] com.okami.MonitorClientApplication       : Scan Start<br>2022-10-23 15:11:40.741  INFO 79058 --- [       Thread-7] com.okami.MonitorClientApplication       : WebshellFeature&lt;FuzzHash&gt; load success<br>2022-10-23 15:11:40.794  INFO 79058 --- [       Thread-7] com.okami.MonitorClientApplication       : full Scan Finished, Found 2 evil file<br></code></pre></td></tr></table></figure><h2 id="发现的常见问题"><a href="#发现的常见问题" class="headerlink" title="发现的常见问题"></a>发现的常见问题</h2><p><img src="https://img-blog.csdnimg.cn/a3990c331c41478699204dfd04582c2e.png" alt="JSP的命令执行"></p><h2 id="临时解决方案"><a href="#临时解决方案" class="headerlink" title="临时解决方案"></a>临时解决方案</h2><ol><li>直接将文件content hash 得到写入到ini配置文件中。</li></ol><h2 id="额外功能"><a href="#额外功能" class="headerlink" title="额外功能"></a>额外功能</h2><ol><li>排除某个文件夹，防止说因为频繁改动的jsp文件，而进行无意义扫描，节约大量时间！</li></ol><h2 id="对面评委的潜在问题回答"><a href="#对面评委的潜在问题回答" class="headerlink" title="对面评委的潜在问题回答"></a>对面评委的潜在问题回答</h2><h3 id="为什么阈值选择了80"><a href="#为什么阈值选择了80" class="headerlink" title="为什么阈值选择了80?"></a>为什么阈值选择了80?</h3><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://blog.csdn.net/qq_35029061/article/details/126093738">https://blog.csdn.net/qq_35029061/article/details/126093738</a></li><li><a href="https://github.com/tdebatty/java-spamsum">java-spamsum</a></li><li><a href="https://www.claudxiao.net/2012/02/fuzzy_hashing/">模糊哈希算法的原理与应用</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>计算机安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【todo】日志查看tips</title>
    <link href="/2022/10/19/%E6%97%A5%E5%BF%97%E6%9F%A5%E7%9C%8Btips/"/>
    <url>/2022/10/19/%E6%97%A5%E5%BF%97%E6%9F%A5%E7%9C%8Btips/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>todo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Prometheus+Grafana部署教程</title>
    <link href="/2022/10/14/Spring%E7%9B%91%E6%8E%A7%E8%B0%83%E7%A0%94/"/>
    <url>/2022/10/14/Spring%E7%9B%91%E6%8E%A7%E8%B0%83%E7%A0%94/</url>
    
    <content type="html"><![CDATA[<h2 id="Prometheus"><a href="#Prometheus" class="headerlink" title="Prometheus"></a>Prometheus</h2><h3 id="详细信息"><a href="#详细信息" class="headerlink" title="详细信息"></a>详细信息</h3><p><a href="http://10.246.201.219:9090/graph">http://10.246.201.219:9090/graph</a></p><h3 id="如何部署？"><a href="#如何部署？" class="headerlink" title="如何部署？"></a>如何部署？</h3><ol><li>放的位置是:&#x2F;usr&#x2F;local&#x2F;prometheus</li></ol><h3 id="使用截图"><a href="#使用截图" class="headerlink" title="使用截图"></a>使用截图</h3><p>如果看到了这个页面就说明 Prometheus 部署完成啦！ 然后如果在  Enable query history 下方的输入框中输入 jvm 等点击 Execute 如果有JVM等信息的采集说明就成功了！否则就说明JVM等各种信息没有采集到。</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h79j7qevbij31s70u00wl.jpg" alt="校验是否完成采集工作"></p><h2 id="NodeExporter"><a href="#NodeExporter" class="headerlink" title="NodeExporter"></a>NodeExporter</h2><p>NodeExporter 是 Prometheus 提供的一个可以采集到主机信息的应用程序，它能采集到机器的 CPU、内存、磁盘等信息。</p><h3 id="详细信息-1"><a href="#详细信息-1" class="headerlink" title="详细信息"></a>详细信息</h3><p> <a href="http://10.246.201.219:9100/">http://10.246.201.219:9100/</a></p><h2 id="Grafana"><a href="#Grafana" class="headerlink" title="Grafana"></a>Grafana</h2><h3 id="为什么要引入这个？"><a href="#为什么要引入这个？" class="headerlink" title="为什么要引入这个？"></a>为什么要引入这个？</h3><p>​Prometheus UI 提供了快速验证 PromQL 以及临时可视化支持的能力，但其可视化能力却比较弱。一般情况下，我们都用 Grafana 来实现对 Prometheus 的可视化实现。</p><h3 id="详细信息-2"><a href="#详细信息-2" class="headerlink" title="详细信息"></a>详细信息</h3><p>​访问地址:<a href="http://10.246.201.219:3000/?orgId=1">http://10.246.201.219:3000/?orgId=1</a></p><h3 id="部署中出现的问题"><a href="#部署中出现的问题" class="headerlink" title="部署中出现的问题"></a>部署中出现的问题</h3><ol><li>您可以尝试用 –skip-broken 来解决该问题<br>您可以尝试运行： rpm -Va –nofiles –nodigest</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><pre><code class="hljs sh">root@qa-test-webserver-12:/opt/soft<span class="hljs-comment"># yum localinstall grafana-6.6.0-1.x86_64.rpm</span><br>设置本地安装进程<br>诊断 grafana-6.6.0-1.x86_64.rpm: grafana-6.6.0-1.x86_64<br>grafana-6.6.0-1.x86_64.rpm 将被安装<br>解决依赖关系<br>--&gt; 执行事务检查<br>---&gt; Package grafana.x86_64 0:6.6.0-1 will be 安装<br>--&gt; 处理依赖关系 /bin/sh，它被软件包 grafana-6.6.0-1.x86_64 需要<br>--&gt; 处理依赖关系 /bin/sh，它被软件包 grafana-6.6.0-1.x86_64 需要<br>--&gt; 处理依赖关系 /sbin/service，它被软件包 grafana-6.6.0-1.x86_64 需要<br>--&gt; 处理依赖关系 fontconfig，它被软件包 grafana-6.6.0-1.x86_64 需要<br>--&gt; 处理依赖关系 freetype，它被软件包 grafana-6.6.0-1.x86_64 需要<br>--&gt; 处理依赖关系 urw-fonts，它被软件包 grafana-6.6.0-1.x86_64 需要<br>--&gt; 处理依赖关系 /sbin/service，它被软件包 grafana-6.6.0-1.x86_64 需要<br>--&gt; 处理依赖关系 /bin/sh，它被软件包 grafana-6.6.0-1.x86_64 需要<br>--&gt; 处理依赖关系 /bin/sh，它被软件包 grafana-6.6.0-1.x86_64 需要<br>--&gt; 完成依赖关系计算<br>错误：软件包：grafana-6.6.0-1.x86_64 (/grafana-6.6.0-1.x86_64)<br>          需要：/bin/sh<br>错误：软件包：grafana-6.6.0-1.x86_64 (/grafana-6.6.0-1.x86_64)<br>          需要：freetype<br>错误：软件包：grafana-6.6.0-1.x86_64 (/grafana-6.6.0-1.x86_64)<br>          需要：urw-fonts<br>错误：软件包：grafana-6.6.0-1.x86_64 (/grafana-6.6.0-1.x86_64)<br>          需要：fontconfig<br>错误：软件包：grafana-6.6.0-1.x86_64 (/grafana-6.6.0-1.x86_64)<br>          需要：/sbin/service<br> 您可以尝试用 --skip-broken 来解决该问题<br> 您可以尝试运行： rpm -Va --nofiles --nodigest<br>root@qa-test-webserver-12:/opt/soft<span class="hljs-comment"># systemctl enable grafana-server</span><br>Failed to <span class="hljs-built_in">enable</span> unit: Unit file grafana-server.service does not exist.<br>root@qa-test-webserver-12:/opt/soft<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p>这个是因为没有收集到来自 Prometheus 的收集<img src="https://tva1.sinaimg.cn/large/008vxvgGly1h79ff9ouw7j31ow0u0wiu.jpg" alt="Grafana没有数据"></p><p>解决方案:</p><p>prometheus.yml修改一下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># my global config</span><br><span class="hljs-attr">global:</span><br>  <span class="hljs-attr">scrape_interval:</span> <span class="hljs-string">15s</span> <span class="hljs-comment"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span><br>  <span class="hljs-attr">evaluation_interval:</span> <span class="hljs-string">15s</span> <span class="hljs-comment"># Evaluate rules every 15 seconds. The default is every 1 minute.</span><br>  <span class="hljs-comment"># scrape_timeout is set to the global default (10s).</span><br><br><span class="hljs-comment"># Alertmanager configuration</span><br><span class="hljs-attr">alerting:</span><br>  <span class="hljs-attr">alertmanagers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">static_configs:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span><br>          <span class="hljs-comment"># - alertmanager:9093</span><br><br><span class="hljs-comment"># Load rules once and periodically evaluate them according to the global &#x27;evaluation_interval&#x27;.</span><br><span class="hljs-attr">rule_files:</span><br>  <span class="hljs-comment"># - &quot;first_rules.yml&quot;</span><br>  <span class="hljs-comment"># - &quot;second_rules.yml&quot;</span><br><br><span class="hljs-comment"># A scrape configuration containing exactly one endpoint to scrape:</span><br><span class="hljs-comment"># Here it&#x27;s Prometheus itself.</span><br><span class="hljs-attr">scrape_configs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&quot;prometheus&quot;</span><br>    <span class="hljs-attr">static_configs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span> [<span class="hljs-string">&quot;localhost:9090&quot;</span>]<br>  <span class="hljs-comment"># 采集node exporter监控数据</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&quot;node&quot;</span><br>    <span class="hljs-attr">static_configs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span> [<span class="hljs-string">&quot;localhost:9100&quot;</span>]<br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">job_name:</span> <span class="hljs-string">&quot;assistant-system&quot;</span><br>    <span class="hljs-attr">file_sd_configs:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">files:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">/usr/local/prometheus/telegraf.yaml</span><br>    <span class="hljs-attr">metrics_path:</span> <span class="hljs-string">/actuator/prometheus</span><br></code></pre></td></tr></table></figure><p>其中 telegraf.yaml 文件中有:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">targets:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">locahost:9000</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-string">qa-test-webserver-12</span><br></code></pre></td></tr></table></figure><p>这样做的好处是 可以同一个服务部署N台机器 只要修改 telegraf.yaml .</p><h3 id="部署效果"><a href="#部署效果" class="headerlink" title="部署效果"></a>部署效果</h3><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h79j2aaw3lj31pe0u0n31.jpg" alt="JVM看板"></p></li></ol><h2 id="报警机器人"><a href="#报警机器人" class="headerlink" title="报警机器人"></a>报警机器人</h2><h2 id="Micrometer"><a href="#Micrometer" class="headerlink" title="Micrometer"></a>Micrometer</h2><p>在 Spring 2.x 之前，SpringBoot 使用 Actuator 模块进行监控，而在 Spring 2.x 之后，SpringBoot 使用了 Micrometer 进行监控。</p><p><strong>简单地说，actuator 是真正去采集数据的模块，而 Micrometer 更像是一个适配器，将 actuator 采集到的数据适合给各种监控工具。</strong></p><h2 id="Spring的项目如何引入"><a href="#Spring的项目如何引入" class="headerlink" title="Spring的项目如何引入?"></a>Spring的项目如何引入?</h2><ol><li>在pom.xml中增加下列依赖：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.micrometer<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>micrometer-registry-prometheus<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p>在application.yml中新增如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoint:</span><br>    <span class="hljs-attr">metrics:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">prometheus:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">&#x27;*&#x27;</span><br>  <span class="hljs-attr">metrics:</span><br>    <span class="hljs-attr">export:</span><br>      <span class="hljs-attr">prometheus:</span><br>        <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="如何检验是否完成？"><a href="#如何检验是否完成？" class="headerlink" title="如何检验是否完成？"></a>如何检验是否完成？</h3><p>​访问<a href="http://localhost:服务端口/actuator">http://localhost:服务端口/actuator</a> 如果出现了下面页面则说明配置完成!</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7af2glox7j31oi0u0wj1.jpg" alt="自测是否actauator接入完成"></p><h2 id="使用中遇到的问题"><a href="#使用中遇到的问题" class="headerlink" title="使用中遇到的问题"></a>使用中遇到的问题</h2><ol><li>每次新加一个配置，都restart prometheus 导致 Grafana上</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://www.cnblogs.com/chanshuyi/p/02_grafana_quick_start.html">Prometheus 快速入门教程（二）：Prometheus + Grafana实现可视化、告警 </a></li></ol><h2 id="几个备选项"><a href="#几个备选项" class="headerlink" title="几个备选项"></a>几个备选项</h2><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>为什么不用：每次配置新项目都需要去 cat 的项目里面添加配置， 另外 需要c++去进行维护，开源部分比较少。</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><table><thead><tr><th></th><th><a href="https://github.com/spring-projects/spring-boot/tree/main/spring-boot-project/spring-boot-actuator">Spring Boot Actuator</a></th><th><a href="https://github.com/pinpoint-apm/pinpoint">pinpoint</a></th><th><a href="https://github.com/prometheus/prometheus">prometheus</a></th><th>spring-boot-admin</th><th>网易哨兵系统</th><th>Cat</th></tr></thead><tbody><tr><td>star</td><td>63.6k</td><td>3.6k</td><td>44.8k</td><td>11.2k</td><td>-</td><td>17.3k</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="prometheus"><a href="#prometheus" class="headerlink" title="prometheus"></a>prometheus</h2><p>基本架构图:</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h780sk9rlzj31bh0u0ae6.jpg" alt="image-20221017091852834"></p><h3 id="技术方案："><a href="#技术方案：" class="headerlink" title="技术方案："></a>技术方案：</h3><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h756s802s5j32fq0n241x.jpg" alt="image-20221014222927478"></p><h4 id="Micrometer-1"><a href="#Micrometer-1" class="headerlink" title="Micrometer"></a>Micrometer</h4><p> micrometer号称监控界的SLF4J，以极低的开销为基于<a href="https://so.csdn.net/so/search?q=JVM&spm=1001.2101.3001.7020">JVM</a>的程序收集监控指标。</p><h4 id="Grafana-1"><a href="#Grafana-1" class="headerlink" title="Grafana"></a>Grafana</h4><p>就是一个前端面板而已。</p>]]></content>
    
    
    <categories>
      
      <category>部署教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手把手带你部署sonarQube</title>
    <link href="/2022/10/13/sonarqube%E9%83%A8%E7%BD%B2/"/>
    <url>/2022/10/13/sonarqube%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="sonarQube介绍"><a href="#sonarQube介绍" class="headerlink" title="sonarQube介绍"></a>sonarQube介绍</h2><p>​SonarQube是开源的代码质量管理平台，支持Java, C#, C&#x2F;C++, PL&#x2F;SQL, Cobol, JavaScrip, Groovy 等二十几种编程语言的代码质量管理与检测，可以从代码规范、潜在bug、耦合、重复代码、安全漏洞、注释等多维度检测代码质量，同时拥有优秀的可视化界面，是DevOps流程中CI&#x2F;CD环节重要的一环</p><p>​随着项目团队规模日益壮大，项目代码量也越来越多。且不说团队成员编码水平层次不齐，即便是大佬，也难免因为代码量的增加和任务的繁重而忽略代码的质量，最终的问题便是bug的增多和代码债务的堆积。因此，采用了自动化代码review的工具，<strong>SonarQube</strong>，降低人工code review的成本！  </p><h2 id="老司机手把手带你如何部署上线"><a href="#老司机手把手带你如何部署上线" class="headerlink" title="老司机手把手带你如何部署上线"></a>老司机手把手带你如何部署上线</h2><h3 id="第一步-下载zip包"><a href="#第一步-下载zip包" class="headerlink" title="第一步: 下载zip包"></a>第一步: 下载zip包</h3><h4 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h4><p>点击 <a href="https://www.sonarqube.org/downloads/">https://www.sonarqube.org/downloads/</a>, 然后根据下面两个图找到对应的jar文件。<br><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h73gr73t89j31gm05kab2.jpg" alt="sonar7.6"></p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h73grjtxubj31dg0u0gq6.jpg" alt="如何找到sonar 历史版本的下载url"></p><p>因为组内开发都是用 Java8 的原因，sonar支持最高版本是7.9 综合部署和软件的综合考虑选择了 <a href="https://docs.sonarqube.org/7.6/requirements/requirements/">sonarQube 7.6版本</a><br>另外不同的sonarQube的版本 支持的jdk版本不一样，所以我们一定要选择好自己适应的jdk版本。<img src="https://tva1.sinaimg.cn/large/008vxvgGly1h74vtwu1xwj31ol0u0tck.jpg" alt="sonar 7.6支持的jdk版本"></p><h3 id="第二步-把zip包解压，放到服务器上"><a href="#第二步-把zip包解压，放到服务器上" class="headerlink" title="第二步: 把zip包解压，放到服务器上"></a>第二步: 把zip包解压，放到服务器上</h3><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h74vy6lgphj31g80d20u9.jpg" alt="sonarQube部署到服务器上"></p><h3 id="第三步：-配置-SonarQube"><a href="#第三步：-配置-SonarQube" class="headerlink" title="第三步： 配置 SonarQube"></a>第三步： 配置 SonarQube</h3><h4 id="mysql-配置修改"><a href="#mysql-配置修改" class="headerlink" title="mysql 配置修改"></a>mysql 配置修改</h4><figure class="highlight sh"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs sh">vim /srv/sonarqube-7.6/conf/sonar.properties<br></code></pre></td></tr></table></figure><p>找到 下面的几处地方 并且 修改对应文本。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">sonar.jdbc.url=jdbc:mysql://此处填写你的mysqlUrl:此处填写你的mysqlPort/sonar?useUnicode=<span class="hljs-literal">true</span>&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=<span class="hljs-literal">true</span>&amp;useConfigs=maxPerformance&amp;useSSL=<span class="hljs-literal">false</span><br>sonar.jdbc.username=此处填写你的mysql账户<br>sonar.jdbc.password=此处填写你的mysql密码<br></code></pre></td></tr></table></figure><h4 id="es和项目的启动port配置修改"><a href="#es和项目的启动port配置修改" class="headerlink" title="es和项目的启动port配置修改"></a>es和项目的启动port配置修改</h4><p>因为服务器上可能有其他服务占用9000和9001端口，所以可以自己按需将 sonar.web.port 的默认端口 9000 修改一下，作者修改成了9003.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># Web context. When set, it must start with forward slash (for example /sonarqube).</span><br><span class="hljs-comment"># The default value is root context (empty value).</span><br><span class="hljs-comment">#sonar.web.context=</span><br><span class="hljs-comment"># TCP port for incoming HTTP connections. Default value is 9000.</span><br>sonar.web.port=9003<br></code></pre></td></tr></table></figure><p>另外 sonar 服务依赖es 所以可以按需修改 es 的端口号。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># Elasticsearch port. Default is 9001. Use 0 to get a free port.</span><br><span class="hljs-comment"># As a security precaution, should be blocked by a firewall and not exposed to the Internet.</span><br>sonar.search.port=9004<br></code></pre></td></tr></table></figure><h3 id="第四步-启动！"><a href="#第四步-启动！" class="headerlink" title="第四步: 启动！"></a>第四步: 启动！</h3><p>找到你的 sonar bin目录，然后根据你的服务器类型找到对应的目录，以下是作者的服务器启动的sh脚本所在的地方。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 找到你的 sonar bin目录，然后根据你的服务器类型找到对应的目录，以下是作者的服务器启动的sh脚本所在的地方。</span><br><span class="hljs-built_in">cd</span> /srv/sonarqube-7.6/bin/linux-x86-64<br><span class="hljs-comment"># 启动脚本！</span><br>./sonar.sh  start <br></code></pre></td></tr></table></figure><p>如果 你在这步骤出现了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">Starting SonarQube...<br>Failed to start SonarQube.<br></code></pre></td></tr></table></figure><p>可以继续看下文，<strong>如果恰好都有你出现的异常情况</strong>，作者都给出了解决方案。</p><h2 id="我遇到的问题"><a href="#我遇到的问题" class="headerlink" title="我遇到的问题"></a>我遇到的问题</h2><h3 id="sonar-启动异常"><a href="#sonar-启动异常" class="headerlink" title="sonar 启动异常"></a>sonar 启动异常</h3><h4 id="fail-to-start-soarQube"><a href="#fail-to-start-soarQube" class="headerlink" title="fail to start soarQube"></a>fail to start soarQube</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">luojiajun@qa-test-webserver-12:/srv/sonarqube-7.6/bin/linux-x86-64$ ./sonar.sh start<br>Starting SonarQube...<br>Failed to start SonarQube.<br></code></pre></td></tr></table></figure><p><strong>解决方案</strong>: </p><p><strong>一定请到 &#x2F;sonarqube-7.6&#x2F;logs 到这个路径下面看日志报错</strong>，以下是我接入过程中发现的问题以及如何解决的。</p><ol><li><p>JVM没有找到如果是的话 -&gt; 修改 sonarqube-7.6&#x2F;conf&#x2F;wrapper.conf 文件 指定JVM路径。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># Path to JVM executable. By default it must be available in PATH.</span><br><span class="hljs-comment"># Can be an absolute path, for example:</span><br><span class="hljs-comment">#wrapper.java.command=/path/to/my/jdk/bin/java</span><br><span class="hljs-comment">#下方是 替换 后的java地址</span><br>wrapper.java.command=/srv/jdk/jdk1.8.0_311/bin/java <br></code></pre></td></tr></table></figure></li><li><p>Process [es] is stopped</p></li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Running</span> SonarQube...<br><span class="hljs-attribute">wrapper</span>  | --&gt; Wrapper Started as Console wrapper  | Launching a JVM...<br><span class="hljs-attribute">jvm</span> <span class="hljs-number">1</span>    | Wrapper (Version <span class="hljs-number">3</span>.<span class="hljs-number">2</span>.<span class="hljs-number">3</span>) http://wrapper.tanukisoftware.org<br><span class="hljs-attribute">jvm</span> <span class="hljs-number">1</span>    |   Copyright <span class="hljs-number">1999</span>-<span class="hljs-number">2006</span> Tanuki Software, Inc.  <span class="hljs-literal">All</span> Rights Reserved.<br><span class="hljs-attribute">jvm</span> <span class="hljs-number">1</span>    |<br><span class="hljs-attribute">jvm</span> <span class="hljs-number">1</span>    | <span class="hljs-number">2017</span>.<span class="hljs-number">12</span>.<span class="hljs-number">14</span> <span class="hljs-number">18</span>:<span class="hljs-number">45</span>:<span class="hljs-number">28</span> INFO  app[][o.s.a.AppFileSystem] Cleaning or creating temp directory /etc/sonarqube/temp<br><span class="hljs-attribute">jvm</span> <span class="hljs-number">1</span>    | <span class="hljs-number">2017</span>.<span class="hljs-number">12</span>.<span class="hljs-number">14</span> <span class="hljs-number">18</span>:<span class="hljs-number">45</span>:<span class="hljs-number">28</span> INFO  app[][o.s.a.es.EsSettings] Elasticsearch listening <span class="hljs-literal">on</span> /<span class="hljs-number">127.0.0.1:9001</span><br><span class="hljs-attribute">jvm</span> <span class="hljs-number">1</span>    | <span class="hljs-number">2017</span>.<span class="hljs-number">12</span>.<span class="hljs-number">14</span> <span class="hljs-number">18</span>:<span class="hljs-number">45</span>:<span class="hljs-number">29</span> INFO  app[][o.s.a.p.ProcessLauncherImpl] Launch process[[key=&#x27;es&#x27;, ipcIndex=<span class="hljs-number">1</span>, logFilenamePrefix=es]] from    <span class="hljs-meta"> [/etc/sonarqube/elasticsearch]: /etc/sonarqube/elasticsearch/bin/elasticsearch -Epath.conf=/etc/sonarqube/temp/conf/es</span><br><span class="hljs-meta">jvm 1    | 2017.12.14 18:45:29 INFO  app[][o.s.a.SchedulerImpl] Waiting for Elasticsearch to be up and running</span><br><span class="hljs-meta">jvm 1    | 2017.12.14 18:45:29 WARN  app[][o.s.a.p.AbstractProcessMonitor] Process exited with exit value [es]: 137</span><br><span class="hljs-meta">jvm 1    | 2017.12.14 18:45:29 INFO  app[][o.s.a.SchedulerImpl] Process [es] is stopped</span><br><span class="hljs-meta">jvm 1    | 2017.12.14 18:45:29 INFO  app[][o.s.a.SchedulerImpl] SonarQube is stopped</span><br><span class="hljs-meta">jvm 1    | 2017.12.14 18:45:29 INFO  app[][o.e.p.PluginsService] no modules loaded</span><br><span class="hljs-meta">jvm 1    | 2017.12.14 18:45:29 INFO  app[][o.e.p.PluginsService] loaded plugin [org.elasticsearch.transport.Netty4Plugin]</span><br><span class="hljs-attribute">jvm</span> <span class="hljs-number">1</span>    | <span class="hljs-number">2017</span>.<span class="hljs-number">12</span>.<span class="hljs-number">14</span> <span class="hljs-number">18</span>:<span class="hljs-number">45</span>:<span class="hljs-number">30</span> WARN  app[][i.n.u.i.MacAddressUtil] Failed to find a usable hardware address from the network interfaces; using random bytes: <span class="hljs-number">05</span>:<span class="hljs-number">2</span>b:<span class="hljs-number">7</span>f:<span class="hljs-number">2</span>f:de:<span class="hljs-number">90</span>:ca:<span class="hljs-number">4</span>a<br><span class="hljs-attribute">wrapper</span>  | &lt;-- Wrapper Stopped<br></code></pre></td></tr></table></figure><p><strong>非常关键！ 非常关键！ 非常关键！</strong><br><strong>启动之前先使用 chown 命令将sonarqube-7.6及其子目录授权给一个非root的用户，sonarqube及其es等软件禁止 root账户启动，因此需要切换一个非root账户，授权的用户需要有bin目录及其子目录的读取和可执行的权限。</strong> </p><h3 id="插件相关问题"><a href="#插件相关问题" class="headerlink" title="插件相关问题"></a>插件相关问题</h3><h4 id="Error-while-downloading-plugin-‘l10nzh’-with-version-‘9-6’-No-compatible-plugin-found"><a href="#Error-while-downloading-plugin-‘l10nzh’-with-version-‘9-6’-No-compatible-plugin-found" class="headerlink" title="Error while downloading plugin ‘l10nzh’ with version ‘9.6’. No compatible plugin found."></a>Error while downloading plugin ‘l10nzh’ with version ‘9.6’. No compatible plugin found.</h4><p>因为低于7.9的版本不支持 直接在sonarqube 中直接下载安装插件，所以我们所有的第三方插件需要手动导入到 &#x2F;opt&#x2F;sonarqube&#x2F;extensions&#x2F;plugins&#x2F;目录下</p><p>我当前用的是7.6在 以 导入汉化包为例子：</p><p>jar包下载地址是 <a href="https://github.com/xuhuisheng/sonar-l10n-zh/releases/tag/sonar-l10n-zh-plugin-1.26">https://github.com/xuhuisheng/sonar-l10n-zh/releases/tag/sonar-l10n-zh-plugin-1.26</a>.</p><p>重启一下即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">luojiajun@qa-test-webserver-12:/srv/sonarqube-7.6/bin/linux-x86-64$ sh sonar.sh restat<br>Stopping SonarQube...<br>Waiting <span class="hljs-keyword">for</span> SonarQube to <span class="hljs-built_in">exit</span>...<br>Stopped SonarQube.<br></code></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h73sehxjvpj316q0u077p.jpg" alt="汉化后的效果"></p><h4 id="如何安装配置-Pmd"><a href="#如何安装配置-Pmd" class="headerlink" title="如何安装配置 Pmd?"></a>如何安装配置 Pmd?</h4><ol><li><p><a href="https://github.com/JacksonZhangHuaQuan/sonar-pmd-plugin">https://github.com/JacksonZhangHuaQuan/sonar-pmd-plugin</a> mvn clean install 将jar文件复制到extensions&#x2F;plugins目录下即可。</p></li><li><p>【推荐这个！不需要配置，直接导入到 extensions&#x2F;plugins 目录下即可直接使用！】 <a href="https://github.com/ZuccRoger/sonar-pmd-plugin/blob/master/sonar-pmd-plugin-3.2.1.jar">https://github.com/ZuccRoger/sonar-pmd-plugin/blob/master/sonar-pmd-plugin-3.2.1.jar</a></p></li></ol><h4 id="配置-sonar-gitlab-plugin"><a href="#配置-sonar-gitlab-plugin" class="headerlink" title="配置 sonar-gitlab-plugin"></a>配置 sonar-gitlab-plugin</h4><p>GitLab 用户令牌生成<br>GitLab 安装完成后，我们需要需要根据 3.1.3 中的要求，生成用户令牌。</p><p>具体步骤如下：</p><p>登录具有管理员权限的账号（一定要是管理员身份）</p><p>访问地址 <a href="http://gitlab.example.com/profile/personal_access_tokens">http://gitlab.example.com/profile/personal_access_tokens</a> 进入令牌生成页面</p><p>输入令牌名称，勾选 api 、read_user、sudo 权限，点击【创建】按钮，即可生成用户令牌</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h74sguo0ffj31p20u00wd.jpg" alt="gitlab 创建api token"></p><p>若 sonar-gitlab-plugin 成功安装，则在 SonarQube 的配置页面可以见到如下页面：</p><p>具体路径为：登录 admin 账号 -&gt; 点击顶部导航栏【配置】按钮 -&gt; 点击【通用设置】中的【GitLab】选项卡</p><p>在该页面中，需要修改以下参数的值：</p><table><thead><tr><th>参数名称</th><th>参数标识</th><th>目标值</th></tr></thead><tbody><tr><td>GitLab url</td><td>sonar.gitlab.url</td><td><a href="http://gitlab.example.com/">http://gitlab.example.com</a></td></tr><tr><td>GitLab User Token</td><td>sonar.gitlab.user_token</td><td>GitLab 的用户令牌，获取方式如上图</td></tr><tr><td>GitLab API version</td><td>sonar.gitlab.api_version</td><td>v4</td></tr></tbody></table><p>注：上述参数中，GitLab User Token 是核心，设置错误的 token，将直接影响到 SonarQube 与 GitLab 的协作。特别要注意的是，生成该 token 的用户一定要具备管理员权限，否则 SonarQube 无法对 GitLab 上的所有项目进行评论。</p><h2 id="推荐安装的插件"><a href="#推荐安装的插件" class="headerlink" title="推荐安装的插件"></a>推荐安装的插件</h2><ol><li>chinese（是个汉化包帮助小白更快上手sonarqube）</li><li>Pmd <a href="https://github.com/jborgers/sonar-pmd/releases">https://github.com/jborgers/sonar-pmd/releases</a></li><li>sonar-gitlab-plugin</li></ol><h3 id="检验是否插件成功导入并且正确配置？"><a href="#检验是否插件成功导入并且正确配置？" class="headerlink" title="检验是否插件成功导入并且正确配置？"></a>检验是否插件成功导入并且正确配置？</h3><p>​未导入的时候core review结果</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h789y48gt4j318d0u00w6.jpg" alt="未导入的时候core review结果"></p><p>导入成功之后的代码检测质量报告,新增了java-p3c。</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h78abwc8bkj31ch0u0q72.jpg" alt="导入成功之后的代码检测质量报告"></p><h2 id="使用效果截图"><a href="#使用效果截图" class="headerlink" title="使用效果截图"></a>使用效果截图</h2><p> 下图是SonarQube项目页，展示所有项目概况。左侧可以根据质量阈、可靠性、安全性、可维护性、代码覆盖率、代码重复率、项目规模等维护进行筛选过滤。</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h74tk3nqwpj319j0u0dib.jpg" alt="所有的项目列表"></p><p> 选择某个项目后可进入项目详情页，可详细查看该项目最近一次的扫描结果及评级、新增代码的可靠性、安全性、覆盖率、代码重复率等，该页面还展示了累积的扫描结果。</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h74tkijjhnj31be0u0jup.jpg" alt="单个项目总览"></p><p> 问题页展示了扫描结果中所有问题汇总，可根据bug的类型、严重程度、是否新提交引入、提交人等维度进行筛选。</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h74tkx0em6j31ch0u0wi9.jpg" alt="现存的代码坏味道截图"></p><p> 针对具体问题，还可以修改所属类型（BUG、漏洞还是属于代码异味），修改优先级及分配给对应责任人。</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h74wpp49b9j31a80u0wjz.jpg" alt="分配责任人"></p><p>从可靠性、安全性、可维护性、单元测试覆盖率、代码重复等维度直观展示当前项目中存在的风险。其中圈圈颜色越深代表问题越集中，圈圈越大代表问题越多，这样可以很直观的看出当前未处理的问题集中在哪个文件，可以有针对性的进行修改。</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h74wrcnw7gj31gj0u0n02.jpg" alt="SonarQube指标"></p><p> 以目录树的形式，展现每个文件的bug、漏洞、代码异味（容易混淆和难于维护的代码）、安全问题、单元测试覆盖率及代码重复率。</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h74ws775lkj32040t2ael.jpg" alt="SonarQube代码"></p><p> 代码规则是SonarQube的核心，代码扫描时就是通过这些规则检测问题。除了默认规则不允许修改外，用户可扩展不同规则，停用&#x2F;启用规则，或用于不同的项目扫描。</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h74wtfs7q4j315f0u0dmo.jpg" alt="代码规则配置"></p><p> 质量配置是代码分析时使用的规则集合，可通过SonarQube应用市场导入不同的插件，扩展各种规则。</p><p> 通过设置质量阈，可以直观的看到项目的打分情况，目前SonarQube可以基于以下方面对项目进行评分。</p><table><thead><tr><th>复杂度</th><th>覆盖率</th><th>重复</th><th>问题</th><th>可维护性</th><th>可靠性</th><th>安全性</th><th>大小</th></tr></thead><tbody><tr><td>认知复杂度</td><td>分支覆盖</td><td>重复块</td><td>阻断违规</td><td>新代码的技术债务</td><td>Bugs</td><td>新安全热点</td><td>类</td></tr><tr><td>圈复杂度</td><td>新代码的分支覆盖率</td><td>新代码的重复块</td><td>确认问题</td><td>坏味道</td><td>新增Bugs</td><td>新增漏洞</td><td>目录</td></tr><tr><td></td><td>分支覆盖率</td><td>重复文件</td><td>严重违规</td><td>达到可维护性A级所需的工作</td><td>可靠性修复工作</td><td>安全修复工作</td><td>文件</td></tr><tr><td></td><td>新分支覆盖率</td><td>重复行</td><td>误判问题</td><td>新增坏味道</td><td>新代码的可靠性修复工作</td><td>新代码的安全修复工作</td><td>方法</td></tr><tr><td></td><td>代码覆盖率</td><td>新代码的重复行</td><td>提示违规</td><td>技术债务</td><td>可靠性比率</td><td>漏洞</td><td>生成的行数</td></tr><tr><td></td><td>新代码覆盖率</td><td></td><td>主要违规</td><td>技术债务比率</td><td></td><td>安全审核等级</td><td>生成的代码行数</td></tr><tr><td></td><td>….等</td><td></td><td>….等</td><td>….等</td><td></td><td>….等</td><td>….等</td></tr></tbody></table><h2 id="该如何触发？"><a href="#该如何触发？" class="headerlink" title="该如何触发？"></a>该如何触发？</h2><h3 id="jenkins触发"><a href="#jenkins触发" class="headerlink" title="jenkins触发"></a>jenkins触发</h3><p>​TODO</p><h3 id="git-ci触发"><a href="#git-ci触发" class="headerlink" title="git-ci触发"></a>git-ci触发</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">variables:</span><br>  <span class="hljs-attr">SONAR_TOKEN:</span> <span class="hljs-string">&quot;请替换你的token&quot;</span><br>  <span class="hljs-attr">SONAR_HOST_URL:</span> <span class="hljs-string">&quot;http://qa.leihuo.netease.com:9004&quot;</span><br>  <span class="hljs-attr">GIT_DEPTH:</span> <span class="hljs-number">0</span><br><br><span class="hljs-attr">stages:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">quality_inspection</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">quality_inspection_and_feedback</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">build_and_push</span><br><br><span class="hljs-comment">## 执行 SonarQube 分析，并将检测结果推送至 SonarQube</span><br><span class="hljs-attr">quality_inspection:</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">maven:3.8.6-openjdk-8</span><br>  <span class="hljs-attr">stage:</span> <span class="hljs-string">quality_inspection</span><br>  <span class="hljs-attr">only:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">main</span><br>  <span class="hljs-attr">script:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mvn</span> <span class="hljs-string">--batch-mode</span> <span class="hljs-string">verify</span> <span class="hljs-string">sonar:sonar</span> <span class="hljs-string">-Dsonar.host.url=$SONAR_HOST_URL</span> <span class="hljs-string">-Dsonar.login=$SONAR_TOKEN</span><br>  <span class="hljs-attr">tags:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">sonarqube</span><br><br><span class="hljs-comment"># 执行 SonarQube 分析，并将检测结果反馈至 GitLab</span><br><span class="hljs-attr">quality_inspection_and_feedback:</span><br>  <span class="hljs-attr">stage:</span> <span class="hljs-string">quality_inspection_and_feedback</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">maven:3.8.6-openjdk-8</span><br>  <span class="hljs-attr">only:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">main</span><br>  <span class="hljs-attr">script:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mvn</span> <span class="hljs-string">--batch-mode</span> <span class="hljs-string">verify</span> <span class="hljs-string">sonar:sonar</span> <span class="hljs-string">-Dsonar.host.url=$SONAR_HOST_URL</span> <span class="hljs-string">-Dsonar.login=$SONAR_TOKEN</span> <span class="hljs-string">-Dsonar.analysis.mode=preview</span> <span class="hljs-string">-Dsonar.gitlab.commit_sha=$CI_COMMIT_SHA</span> <span class="hljs-string">-Dsonar.gitlab.ref_name=$CI_COMMIT_REF_NAME</span> <span class="hljs-string">-Dsonar.gitlab.project_id=$CI_PROJECT_ID</span><br>  <span class="hljs-attr">tags:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">sonarqube</span><br><br><br><span class="hljs-comment"># 执行 SonarQube 分析，并将检测结果反馈至 GitLab</span><br><span class="hljs-attr">build_and_push:</span><br>  <span class="hljs-attr">stage:</span> <span class="hljs-string">build_and_push</span><br>  <span class="hljs-attr">image:</span> <span class="hljs-string">hub.fuxi.netease.com/qa-web/java-build:maven3-openjdk8-docker20</span><br>  <span class="hljs-attr">only:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">main</span><br>  <span class="hljs-attr">script:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mvn</span> <span class="hljs-string">clean</span> <span class="hljs-string">package</span> <span class="hljs-string">-Dmaven.test.skip=true</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">version=`date</span> <span class="hljs-string">+%Y.%m.%d.%H.%M`</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">docker</span> <span class="hljs-string">image</span> <span class="hljs-string">build</span> <span class="hljs-string">--build-arg</span> <span class="hljs-string">JAR_FILE=assistant-system-backend-starter/target/assistant-system-backend-web.jar</span> <span class="hljs-string">-f</span> <span class="hljs-string">DeprecatedDockerfile</span> <span class="hljs-string">-t</span> <span class="hljs-string">assistant-system-backend-server:$&#123;version&#125;</span> <span class="hljs-string">.</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">docker</span> <span class="hljs-string">tag</span> <span class="hljs-string">assistant-system-backend-server:$&#123;version&#125;</span> <span class="hljs-string">hub.fuxi.netease.com/qa-web/assistant-system-backend-server:$&#123;version&#125;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">docker</span> <span class="hljs-string">image</span> <span class="hljs-string">push</span> <span class="hljs-string">hub.fuxi.netease.com/qa-web/assistant-system-backend-server:$&#123;version&#125;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">curl</span> <span class="hljs-string">-X</span> <span class="hljs-string">POST</span>  <span class="hljs-string">-d</span> <span class="hljs-string">&quot;receiver=$&#123;GITLAB_USER_EMAIL&#125;&quot;</span> <span class="hljs-string">-d</span> <span class="hljs-string">&quot;msg=助理系统后端服务build结束等待发布$&#123;CI_COMMIT_MESSAGE&#125;&quot;</span>  <span class="hljs-string">&quot;http://qa.leihuo.netease.com:3316/popo_qatool&quot;</span><br>  <span class="hljs-attr">tags:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">java-build</span><br></code></pre></td></tr></table></figure><h3 id="sonarQube-scanner触发"><a href="#sonarQube-scanner触发" class="headerlink" title="sonarQube scanner触发"></a>sonarQube scanner触发</h3><h4 id="在sonarqube页面上创建项目"><a href="#在sonarqube页面上创建项目" class="headerlink" title="在sonarqube页面上创建项目"></a>在sonarqube页面上创建项目</h4><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h784ql1a2qj31790u077e.jpg" alt="在sonarqube页面上创建项目"></p><p>创建令牌 或者 使用已经有的令牌</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h784x0l894j31l80remzk.jpg" alt="创建令牌 或者 使用已经有的令牌"></p><p>执行 sonarScanner 脚本</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h784xsu8azj31dp0u0tbx.jpg" alt="执行 sonarScanner 脚本"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sonar-scanner \<br>  -Dsonar.<span class="hljs-attribute">projectKey</span>=file-api \<br>  -Dsonar.<span class="hljs-attribute">sources</span>=. \<br>  -Dsonar.host.<span class="hljs-attribute">url</span>=http://qa.leihuo.netease.com:9004 \<br>  -Dsonar.<span class="hljs-attribute">login</span>=请替换你的token \<br>  -Dsonar.scm.<span class="hljs-attribute">provider</span>=git<br></code></pre></td></tr></table></figure><h3 id="触发异常"><a href="#触发异常" class="headerlink" title="触发异常"></a>触发异常</h3><ol><li>Please use “sonar.scm.provider” to define SCM of your project. 完整报错如下</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">ERROR: Error during SonarQube Scanner execution<br>ERROR: SCM provider autodetection failed. Both svn and git claim to support this project. Please use <span class="hljs-string">&quot;sonar.scm.provider&quot;</span> to define SCM of your project.<br>ERROR:<br>ERROR: Re-run SonarQube Scanner using the -X switch to <span class="hljs-built_in">enable</span> full debug logging.\<br></code></pre></td></tr></table></figure><ol start="2"><li><p>org.sonar.java.AnalysisException: Please provide compiled classes of your project with sonar.java.binaries property</p><p>TODO</p></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>喝水不忘挖井人，感谢一下以下各位up主的无私奉献，帮助我更快地能够将sonar部署完成！</p><ol><li><a href="https://www.cnblogs.com/7tiny/p/11269774.html">SonarQube系列一、Linux安装与部署</a></li><li><a href="https://blog.csdn.net/gw5205566/article/details/103387117">SonarQube - 中文插件安装</a></li><li><a href="https://blog.csdn.net/Zhang_Jackson/article/details/87969174">pmd3.0.0集成p3c</a></li><li><a href="https://blog.csdn.net/magicpenta/article/details/106880267">基于 GitLab+SonarQube 搭建自动化代码检测平台</a></li><li><a href="https://kms.netease.com/article/36294#5sonarqube_%E4%BB%A3%E7%A0%81">SonarQube平台使用说明</a></li><li><a href="https://www.sonarqube.org/">官方文档</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>部署教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>feign引入过程中遇到的问题</title>
    <link href="/2022/10/10/feign%E5%BC%95%E5%85%A5%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/10/10/feign%E5%BC%95%E5%85%A5%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="字段缺漏导致的问题。"><a href="#字段缺漏导致的问题。" class="headerlink" title="字段缺漏导致的问题。"></a>字段缺漏导致的问题。</h3><figure class="highlight stylus"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs stylus">Caused by: com<span class="hljs-selector-class">.fasterxml</span><span class="hljs-selector-class">.jackson</span><span class="hljs-selector-class">.databind</span><span class="hljs-selector-class">.exc</span><span class="hljs-selector-class">.UnrecognizedPropertyException</span>: Unrecognized field <span class="hljs-string">&quot;entryTime&quot;</span> (class com<span class="hljs-selector-class">.netease</span><span class="hljs-selector-class">.lhep</span><span class="hljs-selector-class">.assistantsystem</span><span class="hljs-selector-class">.biz</span><span class="hljs-selector-class">.dto</span>.WbUserSpecifyDTO), not marked as ignorable (<span class="hljs-number">11</span> known properties: <span class="hljs-string">&quot;dep4Name&quot;</span>, <span class="hljs-string">&quot;photo&quot;</span>, <span class="hljs-string">&quot;areaName&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>, <span class="hljs-string">&quot;dep1Name&quot;</span>, <span class="hljs-string">&quot;dep2Name&quot;</span>, <span class="hljs-string">&quot;dep3Name&quot;</span>, <span class="hljs-string">&quot;supervisorCorp&quot;</span>, <span class="hljs-string">&quot;jobName&quot;</span>, <span class="hljs-string">&quot;workCode&quot;</span>])<br></code></pre></td></tr></table></figure><p>如何解决：</p><p>加上 @JsonIgnoreProperties(ignoreUnknown &#x3D; true)。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Data</span><br><span class="hljs-variable">@AllArgsConstructor</span><br><span class="hljs-variable">@NoArgsConstructor</span><br><span class="hljs-variable">@JsonIgnoreProperties</span>(ignoreUnknown = true)<br>public class WbUserSpecifyDTO &#123;<br>    <span class="hljs-variable">@JsonProperty</span>(<span class="hljs-string">&quot;areaName&quot;</span>)<br>    private String areaName;<br>    <span class="hljs-variable">@JsonProperty</span>(<span class="hljs-string">&quot;dep1Name&quot;</span>)<br>    private String dep1Name;<br>    <span class="hljs-variable">@JsonProperty</span>(<span class="hljs-string">&quot;dep2Name&quot;</span>)<br>    private String dep2Name;<br>    <span class="hljs-variable">@JsonProperty</span>(<span class="hljs-string">&quot;dep3Name&quot;</span>)<br>    private String dep3Name;<br>    <span class="hljs-variable">@JsonProperty</span>(<span class="hljs-string">&quot;dep4Name&quot;</span>)<br>    private String dep4Name;<br>    <span class="hljs-selector-tag">private</span> <span class="hljs-selector-tag">String</span> <span class="hljs-selector-tag">email</span>;<br>    @<span class="hljs-selector-tag">JsonProperty</span>(<span class="hljs-string">&quot;jobName&quot;</span>)<br>    <span class="hljs-selector-tag">private</span> <span class="hljs-selector-tag">String</span> <span class="hljs-selector-tag">jobName</span>;<br>    <span class="hljs-selector-tag">private</span> <span class="hljs-selector-tag">String</span> <span class="hljs-selector-tag">name</span>;<br>    <span class="hljs-selector-tag">private</span> <span class="hljs-selector-tag">String</span> <span class="hljs-selector-tag">photo</span>;<br>    @<span class="hljs-selector-tag">JsonProperty</span>(<span class="hljs-string">&quot;supervisorCorp&quot;</span>)<br>    <span class="hljs-selector-tag">private</span> <span class="hljs-selector-tag">String</span> <span class="hljs-selector-tag">supervisorCorp</span>;<br>    @<span class="hljs-selector-tag">JsonProperty</span>(<span class="hljs-string">&quot;workCode&quot;</span>)<br>    <span class="hljs-selector-tag">private</span> <span class="hljs-selector-tag">String</span> <span class="hljs-selector-tag">workCode</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="form-表单提交异常的问题"><a href="#form-表单提交异常的问题" class="headerlink" title="form 表单提交异常的问题"></a>form 表单提交异常的问题</h3><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.github.openfeign.form<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>feign-form<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.github.openfeign.form<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>feign-form-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改Feign客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@FeignClient(</span><br><span class="hljs-meta">        name = &quot;poPoRobotFeign&quot;,</span><br><span class="hljs-meta">        url = &quot;http://qa.leihuo.netease.com:3316&quot;,</span><br><span class="hljs-meta">        configuration = FeignConfig.class</span><br><span class="hljs-meta">)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PoPoRobotFeign</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用 grp.tyqatest@corp.netease.com  发送消息 测试用机器人</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(value = &quot;/popo_test&quot;,</span><br><span class="hljs-meta">            consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)</span><br>    String <span class="hljs-title function_">sendMsgByQaToolRobot</span><span class="hljs-params">(Map&lt;String, ?&gt; poPoInfoDTO)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用 grp.leihuo.qatools@corp.netease.com  发送消息 雷火测试工具使者</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(value = &quot;/popo_qatool&quot;,</span><br><span class="hljs-meta">            consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)</span><br>    String <span class="hljs-title function_">sendMsgByChatSendRobot</span><span class="hljs-params">(Map&lt;String, ?&gt; poPoInfoDTO)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>属性<code>consumes = &#123;&quot;application/x-www-form-urlencoded&quot;&#125;</code>,指定Feign以表单方式提交</p><ol><li>参数使用<code>Map&lt;String, ?&gt;</code>形式 (不再是<code>@RequestParam(&quot;parameter&quot;)</code>这种形式);</li></ol></blockquote><p>配置类，注册一个<code>feignFormEncoder</code> <code>bean</code>组件的方式到应用上下文。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> ObjectFactory&lt;HttpMessageConverters&gt; messageConverters;<br><br><span class="hljs-comment">// 注意这里方法名称，也就是bean的名称是什么不重要，</span><br><span class="hljs-comment">// 重要的是返回类型要是 Encoder 并且实现类必须是 FormEncoder 或者其子类</span><br><span class="hljs-comment">// new一个form编码器，实现支持form表单提交</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@Primary</span><br><span class="hljs-meta">@Scope(SCOPE_PROTOTYPE)</span><br><span class="hljs-keyword">public</span> Encoder <span class="hljs-title function_">feignFormEncoder</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringFormEncoder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringEncoder</span>(messageConverters));<br>&#125;<br></code></pre></td></tr></table></figure><p>至此，通过接口调用就不会提示400的错误了</p><p>参考资料:</p><p><a href="https://yijimin.github.io/2019/08/01/Feign%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%AE%B0/">Feign使用小记表单提交异常处理方案</a></p><h3 id="关于如何更好的函数区分的疑惑"><a href="#关于如何更好的函数区分的疑惑" class="headerlink" title="关于如何更好的函数区分的疑惑"></a>关于如何更好的函数区分的疑惑</h3><p>​为了防止一个feign除了url不一样之外，重复写多次的情况如下</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">if</span> (popoMessageChannel.get<span class="hljs-constructor">SenderUrlConfigPath()</span>.equals(<span class="hljs-string">&quot;thirdParty.urlList.poPoAlarmSendMsgUrl&quot;</span>)) &#123;<br>         final String responseBody = poPoRobotFeign.send<span class="hljs-constructor">MsgByQaToolRobot(<span class="hljs-params">requestBody</span>)</span>;<br>         log.info(<span class="hljs-string">&quot;popo推送, 请求：&#123;&#125;，结果：&#123;&#125;&quot;</span>, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">GsonUtil</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">Json(<span class="hljs-params">requestBody</span>)</span>, responseBody);<br>     &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (popoMessageChannel.get<span class="hljs-constructor">SenderUrlConfigPath()</span>.equals(<span class="hljs-string">&quot;thirdParty.urlList.poPoActiveSendMsgUrl&quot;</span>)) &#123;<br>         final String responseBody = poPoRobotFeign.send<span class="hljs-constructor">MsgByChatSendRobot(<span class="hljs-params">requestBody</span>)</span>;<br>         log.info(<span class="hljs-string">&quot;popo推送, 请求：&#123;&#125;，结果：&#123;&#125;&quot;</span>, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">GsonUtil</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">Json(<span class="hljs-params">requestBody</span>)</span>, responseBody);<br>     &#125;<br></code></pre></td></tr></table></figure><p>通过这样的方式，如果有更多的接入可以少写代码。</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h72hsu5j1mj31z80u0n43.jpg" alt="image-20221012143357336"></p><h3 id="openFeign无法解码"><a href="#openFeign无法解码" class="headerlink" title="openFeign无法解码"></a>openFeign无法解码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Caused by: org.springframework.web.client.UnknownContentTypeException: Could not extract response: no suitable HttpMessageConverter found <span class="hljs-keyword">for</span> response type [<span class="hljs-keyword">class</span> <span class="hljs-title class_">com</span>.netease.lhep.assistantsystem.biz.dto.PoPoServerGetAccessTokenResponseDTO] and content type [text/json;charset=UTF-<span class="hljs-number">8</span>]<br>at org.springframework.web.client.HttpMessageConverterExtractor.extractData(HttpMessageConverterExtractor.java:<span class="hljs-number">126</span>) ~[spring-web-<span class="hljs-number">5.3</span><span class="hljs-number">.20</span>.jar:<span class="hljs-number">5.3</span><span class="hljs-number">.20</span>]<br>at org.springframework.cloud.openfeign.support.SpringDecoder.decode(SpringDecoder.java:<span class="hljs-number">57</span>) ~[spring-cloud-openfeign-core-<span class="hljs-number">3.0</span><span class="hljs-number">.6</span>.jar:<span class="hljs-number">3.0</span><span class="hljs-number">.6</span>]<br>at org.springframework.cloud.openfeign.support.ResponseEntityDecoder.decode(ResponseEntityDecoder.java:<span class="hljs-number">61</span>) ~[spring-cloud-openfeign-core-<span class="hljs-number">3.0</span><span class="hljs-number">.6</span>.jar:<span class="hljs-number">3.0</span><span class="hljs-number">.6</span>]<br>at feign.optionals.OptionalDecoder.decode(OptionalDecoder.java:<span class="hljs-number">36</span>) ~[feign-core-<span class="hljs-number">10.12</span>.jar:?]<br>at feign.AsyncResponseHandler.decode(AsyncResponseHandler.java:<span class="hljs-number">115</span>) ~[feign-core-<span class="hljs-number">10.12</span>.jar:?]<br>... <span class="hljs-number">67</span> more<br></code></pre></td></tr></table></figure><p>参考资料： <a href="https://justsme.github.io/2020/02/21/springboot-no-suitable-HttpMessageConverter-found-for-response/">springboot: no suitable HttpMessageConverter found for response</a></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br> <span class="hljs-keyword">public</span> Decoder <span class="hljs-title function_">feignDecoder</span><span class="hljs-params">()</span> &#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntityDecoder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringDecoder</span>(feignHttpMessageConverter()));<br> &#125;<br><br> <span class="hljs-keyword">public</span> ObjectFactory&lt;HttpMessageConverters&gt; <span class="hljs-title function_">feignHttpMessageConverter</span><span class="hljs-params">()</span> &#123;<br>     <span class="hljs-keyword">final</span> <span class="hljs-type">HttpMessageConverters</span> <span class="hljs-variable">httpMessageConverters</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpMessageConverters</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PhpMappingJackson2HttpMessageConverter</span>());<br>     <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectFactory</span>&lt;HttpMessageConverters&gt;() &#123;<br>         <span class="hljs-meta">@Override</span><br>         <span class="hljs-keyword">public</span> HttpMessageConverters <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>             <span class="hljs-keyword">return</span> httpMessageConverters;<br>         &#125;<br>     &#125;;<br> &#125;<br><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PhpMappingJackson2HttpMessageConverter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MappingJackson2HttpMessageConverter</span> &#123;<br>     PhpMappingJackson2HttpMessageConverter() &#123;<br>         List&lt;MediaType&gt; mediaTypes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>         mediaTypes.add(MediaType.valueOf(MediaType.ALL_VALUE + <span class="hljs-string">&quot;;charset=UTF-8&quot;</span>)); <span class="hljs-comment">//关键</span><br>         setSupportedMediaTypes(mediaTypes);<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>feign</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springboot引入feign配置向</title>
    <link href="/2022/10/08/springboot%E5%BC%95%E5%85%A5feign/"/>
    <url>/2022/10/08/springboot%E5%BC%95%E5%85%A5feign/</url>
    
    <content type="html"><![CDATA[<h3 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h3><p>其中要保证 <a href="https://so.csdn.net/so/search?q=Feign&spm=1001.2101.3001.7020">Feign</a>使用okhttpclient时报错</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs java">java.lang.IllegalStateException: original request is required<br></code></pre></td></tr></table></figure><p>经过度娘后，发现原来是 <code>feign-core</code> 的版本和 <code>feign-okhttp</code>版本不一致问题引起的将 <code>feign-okhttp</code>版本换成 <code>10.1.10</code>.</p><p>具体的GAV看pom.xml。</p><h3 id="请求拦截器"><a href="#请求拦截器" class="headerlink" title="请求拦截器"></a>请求拦截器</h3><h3 id="响应拦截器"><a href="#响应拦截器" class="headerlink" title="响应拦截器"></a>响应拦截器</h3><h3 id="Feign配置"><a href="#Feign配置" class="headerlink" title="Feign配置"></a>Feign配置</h3><h4 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br>Logger.Level <span class="hljs-title function_">feignLevel</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> Logger.Level.FULL;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Fallback-退路"><a href="#Fallback-退路" class="headerlink" title="Fallback(退路)"></a>Fallback(退路)</h4><h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><h4 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Caused by: org.springframework.web.client.UnknownContentTypeException: Could not extract response: no suitable HttpMessageConverter found <span class="hljs-keyword">for</span> response type [<span class="hljs-keyword">class</span> <span class="hljs-title class_">com</span>.netease.lhep.assistantsystem.biz.dto.PoPoServerGetAccessTokenResponseDTO] and content type [text/json;charset=UTF-<span class="hljs-number">8</span>]<br>at org.springframework.web.client.HttpMessageConverterExtractor.extractData(HttpMessageConverterExtractor.java:<span class="hljs-number">126</span>) ~[spring-web-<span class="hljs-number">5.3</span><span class="hljs-number">.20</span>.jar:<span class="hljs-number">5.3</span><span class="hljs-number">.20</span>]<br>at org.springframework.cloud.openfeign.support.SpringDecoder.decode(SpringDecoder.java:<span class="hljs-number">57</span>) ~[spring-cloud-openfeign-core-<span class="hljs-number">3.0</span><span class="hljs-number">.6</span>.jar:<span class="hljs-number">3.0</span><span class="hljs-number">.6</span>]<br>at org.springframework.cloud.openfeign.support.ResponseEntityDecoder.decode(ResponseEntityDecoder.java:<span class="hljs-number">61</span>) ~[spring-cloud-openfeign-core-<span class="hljs-number">3.0</span><span class="hljs-number">.6</span>.jar:<span class="hljs-number">3.0</span><span class="hljs-number">.6</span>]<br>at feign.AsyncResponseHandler.decode(AsyncResponseHandler.java:<span class="hljs-number">115</span>) ~[feign-core-<span class="hljs-number">10.12</span>.jar:?]<br>... <span class="hljs-number">66</span> more<br></code></pre></td></tr></table></figure><p>解决方案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br>   <span class="hljs-keyword">public</span> Decoder <span class="hljs-title function_">feignDecoder</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseEntityDecoder</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SpringDecoder</span>(feignHttpMessageConverter()));<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> ObjectFactory&lt;HttpMessageConverters&gt; <span class="hljs-title function_">feignHttpMessageConverter</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">final</span> <span class="hljs-type">HttpMessageConverters</span> <span class="hljs-variable">httpMessageConverters</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpMessageConverters</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PhpMappingJackson2HttpMessageConverter</span>());<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectFactory</span>&lt;HttpMessageConverters&gt;() &#123;<br>           <span class="hljs-meta">@Override</span><br>           <span class="hljs-keyword">public</span> HttpMessageConverters <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>               <span class="hljs-keyword">return</span> httpMessageConverters;<br>           &#125;<br>       &#125;;<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PhpMappingJackson2HttpMessageConverter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MappingJackson2HttpMessageConverter</span> &#123;<br>       PhpMappingJackson2HttpMessageConverter() &#123;<br>           List&lt;MediaType&gt; mediaTypes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>           mediaTypes.add(MediaType.valueOf(MediaType.ALL_VALUE + <span class="hljs-string">&quot;;charset=UTF-8&quot;</span>)); <span class="hljs-comment">//关键</span><br>           setSupportedMediaTypes(mediaTypes);<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><div class="code-wrapper"><pre><code class="hljs">#### 超时时间</code></pre></div><h4 id="Basic认证配置"><a href="#Basic认证配置" class="headerlink" title="Basic认证配置"></a>Basic认证配置</h4><h3 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h3><h3 id="Pom-xml配置"><a href="#Pom-xml配置" class="headerlink" title="Pom.xml配置"></a>Pom.xml配置</h3><p>pom.xml中 spring的版本选择为 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.3.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><p>之前用了 2.6.x 提示</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">NoClassDefFoundError: org<span class="hljs-regexp">/springframework/</span>boot<span class="hljs-regexp">/context/</span>properties/ConfigurationBeanFactoryMetadata<br></code></pre></td></tr></table></figure><p> 然后引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.3.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>即可完成基本的pom依赖接入。</p><p>最后附上全部的pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.3.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>feignProject<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>feignProject<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>feignProject<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">guava.version</span>&gt;</span>30.1.1-jre<span class="hljs-tag">&lt;/<span class="hljs-name">guava.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">feign.version</span>&gt;</span>3.6.0<span class="hljs-tag">&lt;/<span class="hljs-name">feign.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.guava<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>guava<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;guava.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.code.gson<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>gson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.18<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.3.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.github.openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>feign-okhttp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>10.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://blog.csdn.net/qq_41538097/article/details/124112466">OpenFeign 简单使用 </a></li><li><a href="https://blog.csdn.net/WayneLee0809/article/details/111474951">SpringCloud OpenFeign使用OkHttp，添加响应拦截器</a></li><li><a href="https://fangshixiang.blog.csdn.net/article/details/104241601">享学feign</a></li><li><a href="https://blog.csdn.net/sun_shaoping/article/details/82078717">Spring Cloud Feign 六篇学习</a></li><li><a href="https://blog.csdn.net/qq_43437874/article/details/122235580">Spring Cloud Open Feign系列</a></li><li><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-openfeign/2.2.3.RELEASE/reference/html/#spring-cloud-feign">官方文档</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>restTemplate简述</title>
    <link href="/2022/10/07/restTemplateVsFeign/"/>
    <url>/2022/10/07/restTemplateVsFeign/</url>
    
    <content type="html"><![CDATA[<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><table><thead><tr><th></th><th>getForObject</th><th>getForEntity</th></tr></thead><tbody><tr><td>返回形式</td><td>将预期的对象封装到ResponseEntity</td><td>直接返回预期对象</td></tr><tr><td>使用场景</td><td>想拿到Headers等其他信息</td><td>只关心实体内容</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResultDTO</span> &#123;<br>    <span class="hljs-keyword">private</span> String result;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@GetMapping(&quot;/get-for-entity&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getForEntity</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://mocki.io/v1/831c3dd0-70f4-47cc-aa28-48e858ed0785&quot;</span>;<br>    ResponseEntity&lt;ResultDTO&gt; forEntity = restTemplate.getForEntity(url, ResultDTO.class);<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 2022-10-08 08:47:05.714  INFO 2375 --- [io-8080-exec-10] c.r.n.c.RestTraditionalController        : forEntity.getHeaders [Content-Type:&quot;application/json&quot;, Content-Length:&quot;15&quot;, Connection:&quot;keep-alive&quot;, Date:&quot;Fri, 07 Oct 2022 23:14:31 GMT&quot;, Last-Modified:&quot;Fri, 07 Oct 2022 07:58:28 GMT&quot;, ETag:&quot;&quot;b0eb02791543d20d789c22724329c8bc&quot;&quot;, Expires:&quot;Sun, 06 Nov 2022 07:58:27 GMT&quot;, Accept-Ranges:&quot;bytes&quot;, Server:&quot;AmazonS3&quot;, X-Cache:&quot;Hit from cloudfront&quot;, Via:&quot;1.1 37a7b82c9bd3774d003812bdfacee460.cloudfront.net (CloudFront)&quot;, X-Amz-Cf-Pop:&quot;HKG60-C1&quot;, X-Amz-Cf-Id:&quot;u5FU7KJMvUIqY9gSmaPymSKCWYhmBLr0oe-ENXxz94LTg2AJEf2EGw==&quot;, Age:&quot;5555&quot;]</span><br><span class="hljs-comment">     * 2022-10-08 08:47:05.715  INFO 2375 --- [io-8080-exec-10] c.r.n.c.RestTraditionalController        : forEntity.getBody ResultDTO(result=ok)</span><br><span class="hljs-comment">     * 2022-10-08 08:47:05.715  INFO 2375 --- [io-8080-exec-10] c.r.n.c.RestTraditionalController        : forEntity.getStatusCode 200 OK</span><br><span class="hljs-comment">     * 2022-10-08 08:47:05.715  INFO 2375 --- [io-8080-exec-10] c.r.n.c.RestTraditionalController        : forEntity.getStatusCodeValue 200</span><br><span class="hljs-comment">     */</span><br>    log.info(<span class="hljs-string">&quot;forEntity.getHeaders &#123;&#125;&quot;</span>, forEntity.getHeaders());<br>    log.info(<span class="hljs-string">&quot;forEntity.getBody &#123;&#125;&quot;</span>, forEntity.getBody());<br>    log.info(<span class="hljs-string">&quot;forEntity.getStatusCode &#123;&#125;&quot;</span>, forEntity.getStatusCode());<br>    log.info(<span class="hljs-string">&quot;forEntity.getStatusCodeValue &#123;&#125;&quot;</span>, forEntity.getStatusCodeValue());<br>    <span class="hljs-keyword">return</span> forEntity.getBody().getResult();<br>&#125;<br><br><span class="hljs-meta">@GetMapping(&quot;/get-for-object&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getFoObject</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://mocki.io/v1/831c3dd0-70f4-47cc-aa28-48e858ed0785&quot;</span>;<br>    <span class="hljs-type">ResultDTO</span> <span class="hljs-variable">forObject</span> <span class="hljs-operator">=</span> restTemplate.getForObject(url, ResultDTO.class);<br>    log.info(<span class="hljs-string">&quot;forEntity &#123;&#125;&quot;</span>, forObject);<br>    <span class="hljs-keyword">return</span> forObject.getResult();<br>&#125;<br></code></pre></td></tr></table></figure><p>另外postForEntity和postForObject 和上述的getForObject、getForEntity类似，<strong>重点在于是否只关注结果</strong>！</p><h4 id="如何设置请求头？"><a href="#如何设置请求头？" class="headerlink" title="如何设置请求头？"></a>如何设置请求头？</h4><p>​如何提交x-www-form-urlencoded类型的表单请求？以下代码是 发送 popo机器人给luojiajun 的代码case.重点在于 设置的header 以及 <strong>MultiValueMap</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@PostMapping(&quot;/post-for-object&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">postFoObject</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://qa.leihuo.netease.com:3316/popo_qatool&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置headers</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">HttpHeaders</span> <span class="hljs-variable">headers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();<br>    headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);<br><br>    MultiValueMap&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedMultiValueMap</span>&lt;&gt;();<br>    map.add(<span class="hljs-string">&quot;receiver&quot;</span>, <span class="hljs-string">&quot;luojiajun&quot;</span>);<br>    map.add(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;测试post请求&quot;</span>);<br>    HttpEntity&lt;MultiValueMap&lt;String, String&gt;&gt; request = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpEntity</span>&lt;&gt;(map, headers);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> restTemplate.postForObject(<br>            url, request, String.class);<br><br>    log.info(<span class="hljs-string">&quot;response &#123;&#125;&quot;</span>, response);<br>    <span class="hljs-keyword">return</span> response;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="exchange"><a href="#exchange" class="headerlink" title="exchange"></a>exchange</h3><h4 id="exchange有什么好处？"><a href="#exchange有什么好处？" class="headerlink" title="exchange有什么好处？"></a>exchange有什么好处？</h4><ol><li>简化代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@PostMapping(&quot;/exchange-post-api&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">exchangePostApi</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://qa.leihuo.netease.com:3316/popo_qatool&quot;</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置headers</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">HttpHeaders</span> <span class="hljs-variable">headers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();<br>    headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);<br><br>    MultiValueMap&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedMultiValueMap</span>&lt;&gt;();<br>    map.add(<span class="hljs-string">&quot;receiver&quot;</span>, <span class="hljs-string">&quot;luojiajun&quot;</span>);<br>    map.add(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;测试post请求&quot;</span>);<br>    HttpEntity&lt;MultiValueMap&lt;String, String&gt;&gt; request = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpEntity</span>&lt;&gt;(map, headers);<br>    ResponseEntity&lt;String&gt; response = restTemplate<br>            .exchange(url, HttpMethod.POST, request, String.class);<br>    log.info(<span class="hljs-string">&quot;response &#123;&#125;&quot;</span>, response);<br>    <span class="hljs-keyword">return</span> response.getBody();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="延伸问题"><a href="#延伸问题" class="headerlink" title="延伸问题"></a>延伸问题</h3><h4 id="RestTemplaet的实现原理是怎样的"><a href="#RestTemplaet的实现原理是怎样的" class="headerlink" title="RestTemplaet的实现原理是怎样的?"></a>RestTemplaet的实现原理是怎样的?</h4><h4 id="exchange-vs-postForEntity-vs-execute"><a href="#exchange-vs-postForEntity-vs-execute" class="headerlink" title="exchange() vs postForEntity() vs execute()"></a>exchange() vs postForEntity() vs execute()</h4><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://www.baeldung.com/rest-template">https://www.baeldung.com/rest-template</a></li><li><a href="https://stackoverflow.com/questions/52364187/resttemplate-exchange-vs-postforentity-vs-execute">exchange() vs postForEntity() vs execute()</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>http库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>极客时间-代码之丑读书笔记</title>
    <link href="/2022/10/02/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4-%E4%BB%A3%E7%A0%81%E4%B9%8B%E4%B8%91%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/10/02/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4-%E4%BB%A3%E7%A0%81%E4%B9%8B%E4%B8%91%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p><strong>金句</strong></p><ol><li>《<a href="https://book.douban.com/subject/1173548/">程序设计实践</a>》《<a href="https://book.douban.com/subject/4199741/">代码整洁之道</a>》《<a href="https://book.douban.com/subject/30468597/">重构</a>》<strong>程序员们大多会认同这些书上的观点，但每个人对于这些观点的理解却是千差万别的。</strong></li><li>不过，也许你会说：“我知道，命名不就是不能用 abcxyz 命名，名字要有意义嘛，这有什么好讲的。”然而，即便懂得了名字要有意义这个道理，很多程序员依然无法从命名的泥潭中挣脱出来。命名过于宽泛，不能精准描述，这是很多代码在命名上存在的严重问题，也是代码难以理解的根源所在**。</li><li></li></ol>]]></content>
    
    
    <categories>
      
      <category>极客时间</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>雷火助理系统需求</title>
    <link href="/2022/08/29/%E9%9B%B7%E7%81%AB%E5%8A%A9%E7%90%86%E7%B3%BB%E7%BB%9F%E9%9C%80%E6%B1%82/"/>
    <url>/2022/08/29/%E9%9B%B7%E7%81%AB%E5%8A%A9%E7%90%86%E7%B3%BB%E7%BB%9F%E9%9C%80%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<h3 id="遇到的问题-以及如何解决的"><a href="#遇到的问题-以及如何解决的" class="headerlink" title="遇到的问题 以及如何解决的"></a>遇到的问题 以及如何解决的</h3><h4 id="技术上的问题"><a href="#技术上的问题" class="headerlink" title="技术上的问题"></a>技术上的问题</h4><ol><li><p>多模块项目的时候子模块无法找到父模块项目是因为 版本没有匹配上导致的。这个version非常重要.<img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5pro0kdkej219y0ge0vw.jpg" alt="image-20220831110240875"><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5pro9i34wj21140f6n04.jpg" alt="image-20220831110254962"></p></li><li><p>启动起来异常的问题该如何排查以及解决？<img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5q18jurbuj22x20oywjm.jpg" alt="image-20220831163347905"></p><ol><li><p>首先要确定pacage名字是否正确</p></li><li><p>然后在 scanBasePackages 的地方加上扫描的包的路径</p></li><li><p>&#96;&#96;&#96;java<br>@SpringBootApplication(<br>    scanBasePackages &#x3D; {“com.netease.lhep”},<br>    exclude &#x3D; {DataSourceAutoConfiguration.class}<br>)</p><figure class="highlight less"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs less"><br><span class="hljs-number">3</span>. 返回的是一个编码后的但是发现无法转换。!<span class="hljs-selector-attr">[image-20220831172301209]</span>(<span class="hljs-attribute">https</span>:<span class="hljs-comment">//tva1.sinaimg.cn/large/e6c9d24ely1h5q2nrrcb5j22s803ydi8.jpg)</span><br><br>   解决方案<br><br>   <span class="hljs-number">1</span>. <span class="hljs-variable">@JsonProperty</span>(<span class="hljs-string">&quot;workCode&quot;</span>) ![image-<span class="hljs-number">20220831174445427</span>](<span class="hljs-attribute">https</span>:<span class="hljs-comment">//tva1.sinaimg.cn/large/e6c9d24ely1h5q3ae0ujxj20um0qidid.jpg)</span><br><br><span class="hljs-number">4</span>. 感觉这俩字段放在 controller 中作用是什么？你一般用来干嘛 比如response 能干嘛？<br><br>   <span class="hljs-number">1</span>. <span class="hljs-built_in">``</span>`<br>      HttpServletRequest request, HttpServletResponse response,<br></code></pre></td></tr></table></figure></li></ol></li></ol><h3 id="项目难点"><a href="#项目难点" class="headerlink" title="项目难点"></a>项目难点</h3><ol><li><strong>建表</strong>，一个好的数据库结构，可以让整个代码开发不管是思路还是其他的都事半功倍，其中 协助转移 是个比较难的地方我们是如何去建这个表的？</li><li>如何判断是否是一个新的会话？ <ol><li>同一个群聊 或者 私聊 按照上一次发言时间比如5min内都视作同一个会话？</li></ol></li></ol><h3 id="我学到了什么"><a href="#我学到了什么" class="headerlink" title="我学到了什么"></a>我学到了什么</h3><ol><li>学习使用 MyBatisCodeHelperPro 工具，但是前期的各种踩雷让人脑壳疼，比如安装啊之类的，发现高版本的IDEA不兼容一些老的plugin.</li><li>如果这里不显示的话就需要加@Data.否则就是 message:{}.<img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5x1ho9wquj20rk0qg0vb.jpg" alt="image-20220906180129047"></li></ol><h4 id="业务上的问题"><a href="#业务上的问题" class="headerlink" title="业务上的问题"></a>业务上的问题</h4><ol><li><p>这个时候有算监听以及首次入库的问题。<img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h6bq7erkg1j21zm0t4adq.jpg" alt="image-20220919105431974"></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h6bq8amzghj21tm08sgo2.jpg" alt="image-20220919105523620"></p></li><li><p>此处入库的sessionId有问题。单人聊天的时候，流程上 先从redis getKey拿到当前会话的ID，然后如果找不到则mysql新增一条返回ID。结果这个时候 并发大，同时出现了4个新增的ID.即4次去redis拿都是空的，结果同时4条入库了。<img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h6bs6ftg1vj20fq08ujrw.jpg" alt="image-20220919120248250"></p></li><li><p>先私聊-&gt;再群聊就gg了</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h6c2m3pdjkj21v409qtc0.jpg" alt="image-20220919180350590"></p></li><li><p>会话ID 用redis 出现了 抢占 MaxId的问题</p></li><li><p>服务号推不到内网 但是丹炉上又用不了popo机器人服务。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>部署教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dnm开发中遇到的问题 之 svn账户权限缺漏 扫描commit log 返回403 forbidden异常</title>
    <link href="/2022/08/15/dnm%E5%BC%80%E5%8F%91%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E4%B9%8Bsvn%E8%B4%A6%E6%88%B7%E6%9D%83%E9%99%90%E7%BC%BA%E6%BC%8F%E6%89%AB%E6%8F%8FcommitLog%E8%BF%94%E5%9B%9E403Forbidden%E5%BC%82%E5%B8%B8/"/>
    <url>/2022/08/15/dnm%E5%BC%80%E5%8F%91%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E4%B9%8Bsvn%E8%B4%A6%E6%88%B7%E6%9D%83%E9%99%90%E7%BC%BA%E6%BC%8F%E6%89%AB%E6%8F%8FcommitLog%E8%BF%94%E5%9B%9E403Forbidden%E5%BC%82%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<h3 id="碰到的问题以及如何解决"><a href="#碰到的问题以及如何解决" class="headerlink" title="碰到的问题以及如何解决"></a>碰到的问题以及如何解决</h3><ol><li><p>报错出现的问题：账户密码对的但是因为部分目录没有权限，导致403.</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h57bgqbfw7j20ra096jsd.jpg" alt="账户密码对的但是因为部分目录没有权限"></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h57berm96vj20yy04wt9i.jpg" alt="异常报警和错误提示"></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h57bhea4a6j20v00asmyd.jpg" alt="403问题访问被拒绝"></p><p><strong>原因</strong>是 ：</p><div class="code-wrapper"><pre><code class="hljs"> 1. dnm会自动执行扫描目录，获取commit 记录，所以 读 repositoryUrl 根目录（https://svn-pg.gz.netease.com/svn/）下的结果因为没有权限返回了403. 2. 在获取head revision的时候同样也会没有权限。</code></pre></div><p><strong>解决方案</strong>:</p><p><strong>最终效果</strong>在获取svn head revision的时候 应该是可以直接在对应的目录下比如： &#x2F;a&#x2F;b&#x2F;c 而<strong>不需要</strong>去拿到 &#x2F;a 的一些读取权限。</p><ol><li><p>之前的代码是直接从根目录去读取，现在换成了 <strong>targetSvnHeadRevisionUrl</strong>，从而解决了这个403没有权限的问题。<img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h57bcj359ij22ak088407.jpg" alt="代码截图1"></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h57bbrmboij22ue0gkwk2.jpg" alt="代码截图2"></p></li></ol><p><strong>我是怎么思考</strong>：</p><p><strong>不是直接改这个root url而是新加了一个 svn url</strong></p><ol><li><p>因为数据库里面的一些历史数据是直接去读取的得兼容之前的逻辑：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h57lgudizvj212i0nctg7.jpg" alt="数据库中文件的列表作为合并时候的一个缓存"></p></li><li><p>这次改 svn 账户上 合作上的<strong>坑点</strong>：</p><ol><li><p>在 部署好之后，没有提前和 对方策划沟通 先试一条，结果对方策划 合并了多张表，导致要回滚4张表，让对方麻烦了一点。</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7hjewbs1kj312k0hgmy7.jpg" alt="沟通截图"></p></li><li><p>对方程序可能是游戏服务端和客户端出身，并非专业的SA 所以，对于svn review hook 为什么没有被触发不清楚，不知道为什么A账户没有触发这个review hook,导致花了比较多的时间去摸索排查，最终确定说</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7hjfqfeegj31v00em0vb.jpg" alt="最终结果"></p></li></ol></li></ol><p><strong>开发中的小插曲</strong></p><p>在部署之后发现，下图这个异常报警。</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h57ljemgctj21k60h6q4m.jpg" alt="部署后线上异常报警"></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h57hdmpcuwj22yg0eo0xu.jpg" alt="调试信息">为什么会有这个 含有 部分 重复的svn url路径？</p><p>因为在svn提交之后还有去得到之前的revision版本的代码，新增了该处的兼容代码逻辑。这个是因为自己对部分逻辑的没有掌握导致的。另外就是需要加强自测，不能偷懒。</p><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h7hjgheowej31l60u0n59.jpg" alt="gitlab code diff"></p></li></ol><p>​<strong>如何测试</strong></p><p>新增一个svn账户，然后只有 <a href="https://svn-dnm.leihuo.netease.com/svn/dnm/mobile/projects">https://svn-dnm.leihuo.netease.com/svn/dnm/mobile/projects</a> 下有权限，<a href="https://svn-dnm.leihuo.netease.com/svn/dnm/mobile">https://svn-dnm.leihuo.netease.com/svn/dnm/mobile</a> 不需要权限。然后看是否扫包正常。</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h58e6ho64hj21180cmq4j.jpg" alt="有权限的目录层级"> </p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h58e27id41j214008aaaz.jpg" alt="上一级没有目录权限"></p>]]></content>
    
    
    <categories>
      
      <category>项目实践</category>
      
      <category>dnm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring开发中遇到的问题</title>
    <link href="/2022/08/08/Spring%E5%BC%80%E5%8F%91%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/08/08/Spring%E5%BC%80%E5%8F%91%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="还没有解决的问题"><a href="#还没有解决的问题" class="headerlink" title="还没有解决的问题"></a>还没有解决的问题</h3><ol><li>@Test中打印log的时候,这个file_path的问题如何处理？是否可以设置成一个本地环境等？<img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h52ow4flcxj21i70u0jx0.jpg" alt="image-20220811115840368"></li><li>第二个问题</li></ol><h3 id="遇到的问题和如何解决的"><a href="#遇到的问题和如何解决的" class="headerlink" title="遇到的问题和如何解决的"></a>遇到的问题和如何解决的</h3><p>背景介绍，在MyTest类中，发现IProjectDao</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest(classes = MyTest.class)</span><br><span class="hljs-meta">@ActiveProfiles(&quot;localRoger&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> IProjectDao projectDao;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;qa-trace.url&#125;&quot;)</span><br>    String url;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(url);<br>        projectDao.listProjects();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of <span class="hljs-built_in">type</span> <span class="hljs-string">&#x27;com.netease.slfpublishplatformbackend.dao.IProjectDao&#x27;</span> available: expected at least 1 bean <span class="hljs-built_in">which</span> qualifies as autowire candidate. Dependency annotations: &#123;@org.springframework.beans.factory.annotation.Autowired(required=<span class="hljs-literal">true</span>)&#125;<br></code></pre></td></tr></table></figure><p>然后在表头加一行这个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest(classes = MyTest.class)</span><br><span class="hljs-meta">@ComponentScan(value = &quot;com.netease.slfpublishplatformbackend&quot;, excludeFilters = @ComponentScan.Filter(</span><br><span class="hljs-meta">))</span><br><span class="hljs-meta">@ActiveProfiles(&quot;localRoger&quot;)</span><br></code></pre></td></tr></table></figure><p>去扫包即可。</p><ol><li>@Mapper vs @Repository<ol><li>参考资料 <a href="https://www.cnblogs.com/yanghj/p/11580830.html#_labelTop">https://www.cnblogs.com/yanghj/p/11580830.html#_labelTop</a></li></ol></li></ol><table><thead><tr><th>@Mapper</th><th>@Repository</th></tr></thead><tbody><tr><td><strong>@Mapper</strong>不需要配置扫描地址，通过xml里面的namespace里面的接口地址，生成了Bean后注入到Service层中。</td><td><strong>@Repository</strong>需要在Spring中配置扫描地址，然后生成Dao层的Bean才能被注入到Service层中：如下，在启动类中配置扫描地址：</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span>   <span class="hljs-comment">//添加启动类注解</span><br><span class="hljs-meta">@MapperScan(&quot;com.anson.dao&quot;)</span>  <span class="hljs-comment">//配置mapper扫描地址</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">application</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><br>    &#123;<br>        SpringApplication.run(application.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li><p>supervisor错误：ERROR (spawn error)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">luojiajun@qa-test-webserver-04:/srv/qawebconfig/current$ sudo supervisorctl start lhep-publisher<br>lhep-publisher: ERROR (spawn error)<br></code></pre></td></tr></table></figure><p>然后按照网络上的发现：[<a href="https://blog.csdn.net/cckavin/article/details/103023335]">https://blog.csdn.net/cckavin/article/details/103023335]</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">root@qa-test-webserver-04:/srv/qawebconfig/webserver04<span class="hljs-comment"># sudo supervisorctl start lhep-publisher</span><br>lhep-publisher: ERROR (spawn error)<br>root@qa-test-webserver-04:/srv/qawebconfig/webserver04<span class="hljs-comment"># sudo supervisorctl tail lhep-publisher stderr</span><br>lhep-publisher: ERROR (no <span class="hljs-built_in">log</span> file)<br></code></pre></td></tr></table></figure><p>还是不行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh">[program:lhep-publisher]<br>directory=/srv/lhep_publisher/webapps<br><span class="hljs-built_in">command</span>=/usr/bin/java -jar slfPublishPlatformBackend.jar --spring.profiles.active=dev<br>autostart=<span class="hljs-literal">true</span><br>autorestart=<span class="hljs-literal">true</span><br>stdout_logfile=/srv/lhep_publisher/logs<br>user = luojiajun<br>redirect_stderr = <span class="hljs-literal">true</span><br>stdout_logfile_maxbytes = 100MB<br>stdout_logfile_backups = 5<br></code></pre></td></tr></table></figure><p>最后发现是 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">stdout_logfile=/srv/lhep_publisher/logs -&gt;应该是文件不是路径！<br></code></pre></td></tr></table></figure><p>其次在部署雷火考试系统的时候发现，有以下报错，就会想到没有权限访问.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Error: Unable to access jarfile lhexam-0.0.1-SNAPSHOT.jar<br></code></pre></td></tr></table></figure><p>查看后发现 该文件的权限为 600，作为group是没有读的权限的。<img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5fdpcrdycj20v005iwfm.jpg" alt="image-20220822112352748"></p><p>所以最终 chmod + 644 即可启动起来。</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h5fdqaupcbj215e09gdid.jpg" alt="image-20220822112450075"></p></li><li><p>在测试类中 @RestTemplate 无法注入的问题。</p><p>1. </p></li><li><p>这里post得到的是String,不知道怎么拿到某个属性。</p><p>case<img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h59m6ap19mj21980haact.jpg" alt="image-20220817114336394"></p><p>解决方案：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">JSON</span><span class="hljs-built_in">Object</span> json = <span class="hljs-title class_">JSON</span><span class="hljs-built_in">Object</span>.<span class="hljs-title function_">parseObject</span>(resultStr);<br></code></pre></td></tr></table></figure></li><li><p>在开发的时候发现Rebel debug程序没有正常运行起来，发现是断点结果hang住了代码，导致无法继续往下进行了。</p></li><li></li></ol>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
      <category>项目经历</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>筋斗云版CICD</title>
    <link href="/2022/08/01/%E7%AD%8B%E6%96%97%E4%BA%91%E7%89%88CICD/"/>
    <url>/2022/08/01/%E7%AD%8B%E6%96%97%E4%BA%91%E7%89%88CICD/</url>
    
    <content type="html"><![CDATA[<h3 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h3><ol><li>类似于一个 丹炉 的发布平台，然后可以发布到筋斗云上，dnm可以正常使用。</li></ol><h3 id="整体流程图"><a href="#整体流程图" class="headerlink" title="整体流程图"></a>整体流程图</h3><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h4tkz8dutrj213u0u0q62.jpg" alt="image-20220803145306712"></p><h3 id="碰到的问题-按照优先级排序"><a href="#碰到的问题-按照优先级排序" class="headerlink" title="碰到的问题(按照优先级排序)"></a>碰到的问题(按照优先级排序)</h3><ol><li><div class="code-wrapper"><pre><code class="sh">cat /home/luojiajun/dockerHubPassword | sudo docker login -u luojiajun hub.fuxi.netease.com --password-stdin <figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><pre><code class="hljs llvm"><br>   ![image<span class="hljs-number">-20220810151920051</span>](https://tva<span class="hljs-number">1</span>.sinaimg.cn/large/e<span class="hljs-number">6</span><span class="hljs-keyword">c</span><span class="hljs-number">9</span>d<span class="hljs-number">24</span>ely<span class="hljs-number">1</span>h<span class="hljs-number">51</span>p<span class="hljs-number">2</span>lgvohj<span class="hljs-number">22</span>ma<span class="hljs-number">0</span>n<span class="hljs-number">0459</span>.jpg)<br><br>   在 服务器上跑 这里后面有个 异常。<br><br>   但是直接 输入 这样跑 又正常了![image<span class="hljs-number">-20220810151928244</span>](https://tva<span class="hljs-number">1</span>.sinaimg.cn/large/e<span class="hljs-number">6</span><span class="hljs-keyword">c</span><span class="hljs-number">9</span>d<span class="hljs-number">24</span>ely<span class="hljs-number">1</span>h<span class="hljs-number">51</span>p<span class="hljs-number">2</span>qdsnaj<span class="hljs-number">21</span>mm<span class="hljs-number">0</span>a<span class="hljs-number">4</span>wgk.jpg)<br><br>   <span class="hljs-number">1</span>. 可能是<span class="hljs-keyword">common</span>-exec 遇到 管道符 就可能误解了。[Java命令执行浅析](https://blog.ninefiger.top/<span class="hljs-number">2021</span>/<span class="hljs-number">09</span>/<span class="hljs-number">03</span>/Java<span class="hljs-variable">%E5</span><span class="hljs-variable">%91</span><span class="hljs-variable">%BD</span><span class="hljs-variable">%E4</span><span class="hljs-variable">%BB</span><span class="hljs-variable">%A4</span><span class="hljs-variable">%E6</span><span class="hljs-variable">%89</span><span class="hljs-variable">%A7</span><span class="hljs-variable">%E8</span><span class="hljs-variable">%A1</span><span class="hljs-variable">%8</span>C<span class="hljs-variable">%E6</span><span class="hljs-variable">%B5</span><span class="hljs-variable">%85</span><span class="hljs-variable">%E6</span><span class="hljs-variable">%9</span>E<span class="hljs-variable">%90</span>/#<span class="hljs-variable">%E7</span><span class="hljs-variable">%89</span><span class="hljs-variable">%B9</span><span class="hljs-variable">%E6</span><span class="hljs-variable">%AE</span><span class="hljs-variable">%8</span>A<span class="hljs-variable">%E7</span><span class="hljs-variable">%AC</span><span class="hljs-variable">%A6</span><span class="hljs-variable">%E5</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%B7</span><span class="hljs-variable">%E7</span><span class="hljs-variable">%9</span>A<span class="hljs-variable">%84</span><span class="hljs-variable">%E9</span><span class="hljs-variable">%97</span><span class="hljs-variable">%AE</span><span class="hljs-variable">%E9</span><span class="hljs-variable">%A2</span><span class="hljs-variable">%98</span>)这个有提及为什么管道符的问题。<br><br>      <span class="hljs-number">1</span>. 后来通过 exec /bash/bin 起来了<br><br>   <span class="hljs-number">2</span>. 然后 <span class="hljs-keyword">common</span>-exec 执行这个Commond Line 结果gg了<br><br>      ![image<span class="hljs-number">-20220810164136561</span>](https://tva<span class="hljs-number">1</span>.sinaimg.cn/large/e<span class="hljs-number">6</span><span class="hljs-keyword">c</span><span class="hljs-number">9</span>d<span class="hljs-number">24</span>ely<span class="hljs-number">1</span>h<span class="hljs-number">51</span>rg<span class="hljs-number">7</span>pdntj<span class="hljs-number">22</span>yc<span class="hljs-number">0</span>by<span class="hljs-number">44</span>o.jpg)<br><br><span class="hljs-number">2</span>. 在内网筋斗云上如何部署指定的版本号？<br><br>   <span class="hljs-number">1</span>. 目前对于测试环境比如 dnm 测试环境可以直接去拉 latest 【至于 指定版本可以以后再去处理，等着版弄好之后再去考虑如何去 通过 指定的镜像版本 重启服务等 可能可以起一个ssh服务去重启？】。<br>   <span class="hljs-number">2</span>. .sh文件应该是一个固定的，好像无法传递参数？如果是这样的话 目前是不是写一个 spring 的服务然后启一个api 然后入参是 tag 号然后去部署一下？<br>   <span class="hljs-number">3</span>. git 如何触发自动部署 在jdy上？<br><br><span class="hljs-number">3</span>. 这段脚本应该加到打包好的镜像中，这样可以直接读取，不需要配置到筋斗云上。<br><br>   <span class="hljs-number">1</span>. 伏羲镜像仓库是需要登录的，这里是否有一个admin的账号可以操作一下？<br><br>   <span class="hljs-number">2</span>. ```sh<br>      if [ $(sudo docker ps -a|grep jenkins_build |wc -l) !<span class="hljs-operator">=</span> <span class="hljs-string">&quot;0&quot;</span> ]<br>      then<br>          sudo docker stop jenkins_build<br>          sudo docker rm jenkins_build<br>      fi<br>      sudo docker run -it -d -p <span class="hljs-number">3426</span>:<span class="hljs-number">8080</span> --name<span class="hljs-operator">=</span>jenkins_build hub.fuxi.netease.com/luojiajun/jenkins-build:latest<br></code></pre></td></tr></table></figure>3. <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">## 参数list</span><br><span class="hljs-comment">## 1. 对外暴露port</span><br><span class="hljs-comment">## 2. 内部服务的port </span><br><span class="hljs-comment">## 3. 名称</span><br><span class="hljs-comment">## 4. 版本号</span><br><span class="hljs-comment">## 5. 伏羲镜像仓库用户名</span><br><br><span class="hljs-comment">## 登陆docker hub</span><br><span class="hljs-built_in">cat</span> /Users/yolanda/code/fuXiHubPassword | sudo docker login -u luojiajun  hub.fuxi.netease.com --password-stdin<br><span class="hljs-built_in">cat</span> /home/luojiajun/docker/fuxiDockerPasswd | sudo docker login -u luojiajun  hub.fuxi.netease.com --password-stdin<br><br><span class="hljs-comment"># shell 模板  $1 -v  $&#123;挂载日志&#125;  $&#123;docekr cmd&#125; 类似于-v</span><br>sudo docker pull &#123;名称&#125;:&#123;版本号&#125;<br><span class="hljs-keyword">if</span> [ $(sudo docker ps -a|grep &#123;containerName&#125; |<span class="hljs-built_in">wc</span> -l) != <span class="hljs-string">&quot;0&quot;</span> ]<br><span class="hljs-keyword">then</span><br>    sudo docker stop &#123;containerName&#125;<br>    sudo docker <span class="hljs-built_in">rm</span> &#123;containerName&#125;<br><span class="hljs-keyword">fi</span><br>sudo docker run -it -d -p &#123;portOuter&#125;:&#123;portInner&#125; --name=&#123;containerName&#125; &#123;hubname&#125;:&#123;version&#125;<br></code></pre></td></tr></table></figure></code></pre></li><li><p>【待解决】打包出来的镜像闪退了？</p></li></ol><h3 id="已经解决的问题"><a href="#已经解决的问题" class="headerlink" title="已经解决的问题"></a>已经解决的问题</h3><ol><li>镜像仓库放哪里？ 【可以先放到丹炉上】<ol><li>对于部署在筋斗云上的服务，我们是不是可以在筋斗云比如 qa-test-04  用  docker-registry起一个私有的镜像仓库，然后去管理我们的镜像？而不是直接推到 丹炉上？</li><li>Git 是否把镜像 能推到 qa-test-04上 的镜像仓库？</li><li>如何列出远程镜像仓库里面所有的镜像列表。<ol><li><a href="http://qa-tool.fuxi.netease.com:9000/html/web/controller/console/console.html">http://qa-tool.fuxi.netease.com:9000/html/web/controller/console/console.html</a></li></ol></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>部署教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis使用之路</title>
    <link href="/2022/06/11/Mybatis%E4%BD%BF%E7%94%A8%E4%B9%8B%E8%B7%AF/"/>
    <url>/2022/06/11/Mybatis%E4%BD%BF%E7%94%A8%E4%B9%8B%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<ol><li>当你的sql中有wherein的时候如何处理</li></ol><h3 id="开发中遇到的问题"><a href="#开发中遇到的问题" class="headerlink" title="开发中遇到的问题"></a>开发中遇到的问题</h3><ol><li>org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): com.xxx问题解决<ol><li>最后发现是这个 mybatiConfiguration这个没有加.</li><li><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h34fbclu2mj21dd0u0teq.jpg" alt="image-20220611171744243"></li></ol></li><li>什么时候mybatis的sql语句中需要加上 <where></li><li><a href="https://blog.csdn.net/qq_36735986/article/details/120552218">mybatis动态传入order by(排序字段) 和 sort(排序方式) 防止注入</a> 讲的是 ${} #{}</li><li></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring事物梳理</title>
    <link href="/2022/05/27/Spring%E4%BA%8B%E7%89%A9%E6%A2%B3%E7%90%86/"/>
    <url>/2022/05/27/Spring%E4%BA%8B%E7%89%A9%E6%A2%B3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​本文讲述的是Spring中如何使用事物，以及个人在使用Spring的事物中遇到的问题的梳理和总结。</p><p>​读后你能学到什么？ </p><div class="code-wrapper"><pre><code class="hljs">    1. 如何在Spring中引入事物 以及 如何搭建一个基础的demo.    1. 事物为什么会失效，以及事物传递是咋回事?</code></pre></div><h3 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h3><p>​@Configuration</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableTransactionManagement</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransactionConfig</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>​@Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">processIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>  <span class="hljs-type">JenkinsDto</span> <span class="hljs-variable">jenkinsDto</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JenkinsDto</span>();<br>  jenkinsDto.setJenkinsUrl(<span class="hljs-string">&quot;www.baidu.com&quot;</span>);<br>  jenkinsDto.setIsUse(<span class="hljs-number">1</span>);<br>  jenkinsDto.setSvnUrl(<span class="hljs-string">&quot;www.baidu2.com&quot;</span>);<br>  jenkinsDto.setUsername(<span class="hljs-string">&quot;luojiajun&quot;</span>);<br>  jenkinsDto.setPassword(<span class="hljs-string">&quot;asda&quot;</span>);<br>  jenkinsDto.setParams(<span class="hljs-string">&quot;ahjaaha&quot;</span>);<br>  transactionService.transactionDemo(jenkinsDto);<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>@Service</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">transactionDemo</span><span class="hljs-params">(JenkinsDto jenkinsDto)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>  jenkinsService.insertJenkins(jenkinsDto);<br>  <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> == <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;hahaah&quot;</span>);<br>  &#125;<br>  jenkinsDto.setUsername(<span class="hljs-string">&quot;wusiyao&quot;</span>);<br>  jenkinsService.updateJenkins(jenkinsDto);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="关于-Transactional注解属性字段"><a href="#关于-Transactional注解属性字段" class="headerlink" title="关于@Transactional注解属性字段"></a>关于@Transactional注解属性字段</h3><p>有几个概念一定要知道：</p><table><thead><tr><th>概念</th><th>定义</th></tr></thead><tbody><tr><td>Propagation</td><td>事物的传播行为</td></tr><tr><td>Isolation</td><td>事物的隔离行为</td></tr><tr><td>timeout</td><td>事物的超时时间</td></tr><tr><td>readOnly</td><td>是否是只读事物</td></tr><tr><td>rollbackFor</td><td>用于指定能否触发事物回滚的异常类型，并且可以指定多个<strong>异常类型</strong> (这个后面有个例子可以现学现用)</td></tr></tbody></table><h3 id="我遇到的问题"><a href="#我遇到的问题" class="headerlink" title="我遇到的问题"></a>我遇到的问题</h3><h4 id="1-为什么我明明抛出了异常，但是没有回滚呢？！"><a href="#1-为什么我明明抛出了异常，但是没有回滚呢？！" class="headerlink" title="1.  为什么我明明抛出了异常，但是没有回滚呢？！"></a>1.  为什么我明明抛出了异常，但是没有回滚呢？！</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRED)</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">transactionDemo</span><span class="hljs-params">(JenkinsDto jenkinsDto)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>  jenkinsService.insertJenkins(jenkinsDto);<br>  transactionSecondService.transactionPropagationDemo(jenkinsDto);<br>  <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> == <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-comment">// 可以看到这里我new Exception 结果还是能插入jenkinsDto</span><br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;hahaah&quot;</span>);<br>  &#125;<br>  jenkinsDto.setUsername(<span class="hljs-string">&quot;wusiyao&quot;</span>);<br>  jenkinsService.updateJenkins(jenkinsDto);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>​可以看到这个rollbackFor的注解，标注了默认是RuntimeException 和 Error进行回滚的。</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2o5avvddxj20if07sdh7.jpg" alt="默认的rollbackFor"></p><p>那么如何解决呢？</p><p>可以手动修改rollbackFor的默认返回值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">transactionDemo</span><span class="hljs-params">(JenkinsDto jenkinsDto)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>  <span class="hljs-comment">// 省略核心代码</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-同一个类中明明用了-Transactional-propagation-x3D-Propagation-REQUIRES-NEW-，为什么我的事物仍然回滚。"><a href="#2-同一个类中明明用了-Transactional-propagation-x3D-Propagation-REQUIRES-NEW-，为什么我的事物仍然回滚。" class="headerlink" title="2.  同一个类中明明用了@Transactional(propagation &#x3D; Propagation.REQUIRES_NEW)，为什么我的事物仍然回滚。"></a>2.  同一个类中明明用了@Transactional(propagation &#x3D; Propagation.REQUIRES_NEW)，为什么我的事物仍然回滚。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransactionService</span> &#123; <br><span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRED)</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">transactionDemo</span><span class="hljs-params">(JenkinsDto jenkinsDto)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    jenkinsService.insertJenkins(jenkinsDto);<br>    transactionPropagationLocal(jenkinsDto);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> == <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;hahaah&quot;</span>);<br>    &#125;<br>    jenkinsDto.setUsername(<span class="hljs-string">&quot;wusiyao&quot;</span>);<br>    jenkinsService.updateJenkins(jenkinsDto);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  &#125;<br><br>  <span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">transactionPropagationLocal</span><span class="hljs-params">(JenkinsDto jenkinsDto)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    jenkinsDto.setSvnUrl(<span class="hljs-string">&quot;www.baidu3.com&quot;</span>);<br>    jenkinsService.insertJenkins(jenkinsDto);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里就涉及到了一个事物的传播性的问题了，我们可以看到同一个类中 两个不同的事物传递性， A会传递给B。</p><p>如何解决呢</p><ol><li><p>通过AOP. 启动类上加 @EnableAspectJAutoProxy(exposeProxy &#x3D; true) 该注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@EnableAspectJAutoProxy(exposeProxy = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoApplication</span> &#123;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransactionService</span> &#123;<br><br>  <span class="hljs-meta">@Autowired</span> <span class="hljs-keyword">private</span> IJenkinsService jenkinsService;<br>  <span class="hljs-meta">@Autowired</span> <span class="hljs-keyword">private</span> TransactionSecondService transactionSecondService;<br><br>  <span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRED)</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">transactionDemo</span><span class="hljs-params">(JenkinsDto jenkinsDto)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    jenkinsService.insertJenkins(jenkinsDto);<br><br>    ## 加如下两条 AOP 代理一下<br>    <span class="hljs-type">TransactionService</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> (TransactionService) AopContext.currentProxy();<br>    test.transactionPropagationLocal(jenkinsDto);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> == <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;hahaah&quot;</span>);<br>    &#125;<br>    jenkinsDto.setUsername(<span class="hljs-string">&quot;wusiyao&quot;</span>);<br>    jenkinsService.updateJenkins(jenkinsDto);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  &#125;<br><br>  <span class="hljs-meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">transactionPropagationLocal</span><span class="hljs-params">(JenkinsDto jenkinsDto)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    jenkinsDto.setSvnUrl(<span class="hljs-string">&quot;www.baidu3.com&quot;</span>);<br>    jenkinsService.insertJenkins(jenkinsDto);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>​2.当然最简单的还是放到另外一个类中就行了。</p><p>所以总结一下(箭头表示调用方向)：</p><p>A-&gt;B-&gt;C-&gt;D.</p><p><strong>同一个类</strong> 如果最初的调用者没有，则 后面就没有。</p><p>如果最初的调用者有，则事物就会传播下去，<strong>但是这个事物的策略是调用者一开始的策略</strong>。</p><h4 id="如何做到A没有-Transactional注解但是B有-Transactional注解-然后能回滚B的代码嘛？"><a href="#如何做到A没有-Transactional注解但是B有-Transactional注解-然后能回滚B的代码嘛？" class="headerlink" title="如何做到A没有@Transactional注解但是B有@Transactional注解 然后能回滚B的代码嘛？"></a>如何做到A没有@Transactional注解但是B有@Transactional注解 然后能回滚B的代码嘛？</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransactionService</span> &#123;<br>  <span class="hljs-meta">@Autowired</span> <span class="hljs-keyword">private</span> IJenkinsService jenkinsService;<br>  <span class="hljs-meta">@Autowired</span> <span class="hljs-keyword">private</span> TransactionSecondService transactionSecondService;<br>  <span class="hljs-meta">@Autowired</span> TransactionService transactionService;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">transactionDemo</span><span class="hljs-params">(JenkinsDto jenkinsDto)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    transactionService.transactionPropagationDemo(jenkinsDto);<br>    jenkinsDto.setUsername(<span class="hljs-string">&quot;6666&quot;</span>);<br>    jenkinsService.updateJenkins(jenkinsDto);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>  &#125;<br><br>  <span class="hljs-meta">@Transactional</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">transactionPropagationDemo</span><span class="hljs-params">(JenkinsDto jenkinsDto)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    jenkinsDto.setSvnUrl(<span class="hljs-string">&quot;www.baidu3.com&quot;</span>);<br>    jenkinsService.insertJenkins(jenkinsDto);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> == <span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;hahaah&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里可以看到有个重新注入了一个 @Autowired TransactionService transactionService;</p><p>相当于重新通过CGLIB去注入了该对象，可以在 controller -&gt;A(没有  @Transactional 注解 )-&gt;B (有   @Transactional 注解 )。</p><p>完成B的回滚。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://blog.csdn.net/qq_40202111/article/details/105098283">同一个类中@Transactionla事物失效</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么你的swagger总是出问题?</title>
    <link href="/2022/05/27/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E7%9A%84swagger%E6%80%BB%E6%98%AF%E5%87%BA%E9%97%AE%E9%A2%98/"/>
    <url>/2022/05/27/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E7%9A%84swagger%E6%80%BB%E6%98%AF%E5%87%BA%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="遇到了个坑爹问题"><a href="#遇到了个坑爹问题" class="headerlink" title="遇到了个坑爹问题"></a>遇到了个坑爹问题</h3><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2n6axdx65j20zi0kmgo2.jpg" alt="显示了个啥呀！"></p><p>发现是cookie过期了，请求被拦截导致的。</p>]]></content>
    
    
    <categories>
      
      <category>项目实践</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么我传进来的对象值空了？</title>
    <link href="/2022/05/27/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BC%A0%E8%BF%9B%E6%9D%A5%E7%9A%84%E5%AF%B9%E8%B1%A1%E5%80%BC%E7%A9%BA%E4%BA%86%EF%BC%9F/"/>
    <url>/2022/05/27/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BC%A0%E8%BF%9B%E6%9D%A5%E7%9A%84%E5%AF%B9%E8%B1%A1%E5%80%BC%E7%A9%BA%E4%BA%86%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="碰到了一个的事情："><a href="#碰到了一个的事情：" class="headerlink" title="碰到了一个的事情："></a>碰到了一个的事情：</h3><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2mns7cco3j21ua0nugoi.jpg" alt="image-20220527083036043"></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2mns0k4o1j21bs0sen0k.jpg" alt="image-20220527083024771"></p><p>为什么会这样？</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2movdjp2gj22c00u0gum.jpg" alt="image-20220527090814939"></p><p>上代码截图片段！</p><h3 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h3><p>可以看到我的 Item 以及 Prop 是没有get、set方法的，这就是为什么我的这个Item对象的值是空的原因！</p><h3 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h3><p>通过懒人方法直接@Data注解搞定!</p><h3 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h3><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2mozdp6qwj22nu0u0wpv.jpg" alt="image-20220527091205869"></p>]]></content>
    
    
    <categories>
      
      <category>项目实践</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring中 @Valid vs @Validate 的区别</title>
    <link href="/2022/05/26/Spring%E4%B8%AD%E5%85%A5%E5%8F%82%E6%A0%A1%E9%AA%8C%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/05/26/Spring%E4%B8%AD%E5%85%A5%E5%8F%82%E6%A0%A1%E9%AA%8C%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h3 id="先说结论"><a href="#先说结论" class="headerlink" title="先说结论:"></a>先说结论:</h3><p>​<strong>需要用到了Group校验，就用@Validate，其他情况下直接用@Valid即可</strong>。</p><h4 id="Group校验简单小科普："><a href="#Group校验简单小科普：" class="headerlink" title="Group校验简单小科普："></a>Group校验简单小科普：</h4><p>​简单来说就是比如你有一个DTO对象，增、改都是这个对象。但是你想改这个对象的值，你肯定<strong>要传递ID</strong>,但是你增的时候肯定不会带ID，因此就有了Group的概念。</p><p><strong>举个栗子🌰</strong></p><p>​下图中我就没有传递id这个字段，但是仍然通过了校验，这就是Gourp校验。</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2mq3ilt8kj21zq0r8dmn.jpg" alt="Gourp校验"></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2mq3mmkwej21s60t0dj5.jpg" alt="运行截图"></p><h3 id="从问题出发"><a href="#从问题出发" class="headerlink" title="从问题出发:"></a>从问题出发:</h3><table><thead><tr><th>比较方向</th><th>@Validated</th><th>@Valid</th></tr></thead><tbody><tr><td>是否支持分组</td><td>支持Group，例子：@Validated(JenkinsDto.Save.class)</td><td>不支持Group</td></tr><tr><td>作用范围</td><td><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2m4gd4m6fj20wk08gq3u.jpg" alt="无法作用在属性上！">方法的入参 、方法头上</td><td><strong>字段</strong>，构造器、方法的入参以及方法头上！</td></tr><tr><td>嵌套</td><td>不支持嵌套校验</td><td>支持。</td></tr></tbody></table><p>接下来重点介绍一下 如何去实现嵌套校验。</p><h4 id="嵌套对象的例子"><a href="#嵌套对象的例子" class="headerlink" title="嵌套对象的例子"></a>嵌套对象的例子</h4><figure class="highlight json"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;props&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;pid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;pidName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;string&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;vid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;vidName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>比如这个对象我们要对其中的vidName进行入参校验，如果仅仅使用了@Validate是不行的，</p><p>看一下@Validate的注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD, ElementType.PARAMETER&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Validated &#123;<br>Class&lt;?&gt;[] value() <span class="hljs-keyword">default</span> &#123;&#125;;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以看到这个不支持字段，然后@Valid是支持字段的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Target(&#123; METHOD, FIELD, CONSTRUCTOR, PARAMETER, TYPE_USE &#125;)</span><br><span class="hljs-meta">@Retention(RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Valid &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h3><p>我们需要在入参的地方 @Valid + 嵌套的对象上加上@Valid 就可以解决嵌套对象的属性校验问题。</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2mpc3s2jgj22630u047v.jpg" alt="代码case"></p><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2mpdw748ej21r90u0n18.jpg" alt="运行结果"></p><h3 id="代码链接🔗"><a href="#代码链接🔗" class="headerlink" title="代码链接🔗"></a><a href="https://github.com/ZuccRoger/JavaFundament/tree/master/src/main/java/roger/com/javafundament/validation">代码链接🔗</a></h3><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ol><li><a href="https://blog.csdn.net/qq_36937684/article/details/120782450">Springboot @Valid 嵌套校验，看完这篇立刻上手！</a></li></ol><p></p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
      <category>项目实战</category>
      
      <category>入参校验</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录一次平台未加锁导致的的大量数据丢失问题</title>
    <link href="/2022/05/23/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E5%B9%B3%E5%8F%B0%E7%9A%84%E7%BA%BF%E4%B8%8A%E4%BA%8B%E6%95%85%E5%A4%A7%E9%87%8F%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1/"/>
    <url>/2022/05/23/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E5%B9%B3%E5%8F%B0%E7%9A%84%E7%BA%BF%E4%B8%8A%E4%BA%8B%E6%95%85%E5%A4%A7%E9%87%8F%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1/</url>
    
    <content type="html"><![CDATA[<h3 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h3><p>翻译平台有个功能是能将A表中的数据恢复到上一次备份时候的节点。</p><p>作为开发在实践的时候，其实就是通过 两张数据结构一模一样的表 记做 表A 以及 表A+ 进行拷贝数据而已。</p><figure class="highlight css"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">A</span>、<span class="hljs-selector-tag">A</span>+两个表。<br><br><span class="hljs-selector-tag">A</span>表是当前数据<br><br><span class="hljs-selector-tag">A</span>+表是拷贝某个时间点的数据。<br><br>点了备份之后 <span class="hljs-selector-tag">A</span>+表清空，<span class="hljs-selector-tag">A</span>表中的数据插入<span class="hljs-selector-tag">A</span>+表。<br><br>当了恢复 <span class="hljs-selector-tag">A</span> 表清空，<span class="hljs-selector-tag">A</span>+s表中的数据插入<span class="hljs-selector-tag">A</span>表。<br></code></pre></td></tr></table></figure><h3 id="用户的操作"><a href="#用户的操作" class="headerlink" title="用户的操作"></a>用户的操作</h3><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2j775xvtmj20u809qt94.jpg" alt="正常的文本量"></p><p>当用户备份、恢复操作时间过短的时候.</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2j757qjxkj21fq0c0dhg.jpg" alt="操作日志记录"></p><h3 id="代码是怎么实现的？"><a href="#代码是怎么实现的？" class="headerlink" title="代码是怎么实现的？"></a>代码是怎么实现的？</h3><p>其中备份的执行流程如下图</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2j6y42o91j213u0ny0w8.jpg" alt="备份的执行流程"></p><p>其中恢复的流程如下图:</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2j718x5tbj215a0piq6m.jpg" alt="恢复的过程"></p><h3 id="为什么会出现这个情况？"><a href="#为什么会出现这个情况？" class="headerlink" title="为什么会出现这个情况？"></a>为什么会出现这个情况？</h3><p>​A全量读出来往A+插入，结果A+表中清空了然后自己往A插入。导致中间数据量丢失了！</p><p>​比如A表已经16w条，已经向A+表中插入了14w条数据了，但是A+表此时执行了恢复数据，A表清空，将A+表中现有的数据往A插入。这下就造成了数据的大量丢失。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>首先先让SA把每天凌晨的数据恢复让用户至少能先正常去运行这个平台，把丢失的数据找回。</li><li>在备份或者恢复数据库的时候加redis的互斥锁，防止A操作没完成，B操作就开始了，导致数据丢失！</li><li>为了防止OOM，每次读取的时候也避免一次性读取，比如每次读取1w条，插入1w条。记录上次的Auto ID即可。</li></ol>]]></content>
    
    
    <categories>
      
      <category>项目实践</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程序员如何做好笔记?</title>
    <link href="/2022/05/22/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/05/22/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、<strong>前言</strong></h1><p>  对于刚刚学习编程或者已经学习了编程的朋友，难免会产生该不该做笔记的想法。是做好？还是多练习几遍比较好？下面将个人想法和大家分享一下，希望给正在迷茫的你能提供一点帮助</p><h1 id="二、问题"><a href="#二、问题" class="headerlink" title="二、问题"></a>二、<strong>问题</strong></h1><ol><li><p>学编程有没有必要做笔记？</p></li><li><p>我该记哪些内容？</p></li><li><p>如何去做笔记才高效？</p></li></ol><h1 id="三、正文"><a href="#三、正文" class="headerlink" title="三、正文"></a>三、<strong>正文</strong></h1><blockquote><p><strong>问</strong>：<strong>学编程有没有必要做笔记？</strong></p></blockquote><blockquote><p><strong>答</strong>：<strong>十分肯定，一定要做！</strong></p></blockquote><ol><li>作为一名软件开发人员，你的职业生涯中不可能只掌握一门编程语言或者技能，技能单一迟早会被淘汰</li><li>当只学一门编程语言的时候，做不做笔记其实问题不大，就比如你现在学习C，你发现你能记得每一个知识点，都能运用，这个时候做笔记反而并不重要</li><li>但是当更进一步学习C++、Java、JavaWeb、Oracle、MySQL、Python、Linux等等的时候，会发现当你知识积累越多，复杂度就会更高，这个时候如果不去做笔记，所学的知识点将会很快被遗忘以及搞得混杂，这样一来接下来的学习将变得不容易</li><li>所以一定要去做笔记，这样很多人又会说，记笔记？记了也不一定看！那为什么还要去做？其实没有正确与错误之说，如果没有记笔记和看笔记，大部分情况下只能说你学得不够深或者你每天都在重复做某一部分技能，可锻炼性不高，所以笔记意义不大。做笔记不是让你像高中那样每个知识点都去记一遍，而是有针对性去做，这样才能将学习效率最大化。</li></ol><h2 id="3-1-问：我该记哪些内容？"><a href="#3-1-问：我该记哪些内容？" class="headerlink" title="3.1 问：我该记哪些内容？"></a>3.1 <strong>问</strong>：<strong>我该记哪些内容？</strong></h2><blockquote><p><strong>答</strong>：<strong>记笔记有“三记 *<em>” “*</em> 三不记 *<em>”*</em></strong></p></blockquote><h3 id="3-1-1-三记"><a href="#3-1-1-三记" class="headerlink" title="3.1.1 三记"></a>3.1.1 <strong>三记</strong></h3><blockquote><p>涉及到软件安装和配置记</p></blockquote><ol><li>这里说的软件安装和配置记，并不是傻瓜式安装的软件，下一步下一步就OK的软件，而是需要涉及到配置环境等软件，比如Eclipse、MyEclipse、Tomcat等，这些软件的配置需要配置环境变量，还有许多配置如Tomcat配置虚拟路径、修改端口号等，把配置过程写下来，闲着没事干忘了的时候就复习一下，有巩固才能提高</li><li>再比如学习了Linux搭建服务器、搭建大数据开发环境如Hadoop的时候，如果你不做配置笔记，相信我，你会疯的！！</li></ol><blockquote><p>涉及到项目实战技能记</p></blockquote><ol><li>当你做项目的时候会涉及到很多问题，比如用Java Web开发网页，你会涉及到如何产生验证码、何防止SQL注入、如何避免404，如何控制Servlet跳转、如何通过JS控制隐藏域提交额外信息</li><li>这些技能记下来，给自己一个温习的环境，你的牛13程度取决于你的技能有多牛13，所有的技能不可能全部记住，好记性不如烂笔头，这就是为什么要有开发文档的存在</li><li>好比现在现在如果不去看笔记和文档，多少人能纯手工不借助文档和IDE搭建SSH或SSM环境？</li></ol><blockquote><p><strong>涉及到出错问题必须记！</strong></p></blockquote><ol><li>这点是最重要的一点，就算上面两个你不愿意记，但是出错问题一定要记！</li><li>为什么？编程中如果出现错误你不记下来，你很可能会被同一个错误折磨千百次，是不是很开心？</li><li>简单举个例子<ul><li>今天你用Java中的BigDecimal写了一个除法，但是发现提示你出现了一个异常，你百思不得其解，为什么偶数除法没问题啊但是奇数除法怎么就是有错误，这是因为大数奇数除法会出现一个循环小数的问题，你需要指定小数位数才能解决</li><li>再比如你个人电脑上搭建Hadoop环境提示你namenode进入安全模式就是启动不起来，网上说了很多办法说关闭安全模式就可以了，最后你发现是因为你的空间不够了</li><li>写web配置struts的时候提示你说没有log4j等等</li></ul></li><li>诸如此类，当记一个问题可以，记10个也还行，但是当你有成百上千我不觉得每一个的解决办法你都能记得！</li></ol><h3 id="3-1-2-三不记"><a href="#3-1-2-三不记" class="headerlink" title="3.1.2 三不记"></a>3.1.2 三不记</h3><blockquote><p><strong>书上有的知识点不记（配置、实战技能、易错点除外）</strong></p></blockquote><ol><li><p>这里说的书上是指你买了一本实体书比如叫Pythonxxxxx，你说我哪里记得书上那么多东西，我要把所有知识点都记下来！</p></li><li><p>想法很好，但是灭有必要，这么说，常见的编程书籍99%都有电子版，我相信书上写你要比你记得要好得多，所以个人喜欢把自己买的书的电子书放到手机里面，坐公交闲着的时候就拿出来复习一下，书上已经写得很详细了，而且有电子版给你，何必要去把书上所有有的东西再记一遍？</p></li><li><p>翻开电子书你能很快找到自己需要的知识</p><blockquote><p>很喜欢一句话：“如果你喜欢一本书，第二遍才能真正的阅读”</p></blockquote></li><li><p>编程书籍，除非你是过目不忘，否则一遍你一定记不住！所以你会倒回去看第二遍甚至多遍，这个时候书上的结构和知识分布点你已经很清楚了，这个时候你去看电子书，你能很轻松定位到需要巩固的地方，我相信效果会很好！但是并不是说什么都不记，如果你看第二遍和第三遍还是不懂的地方这就是需要记的知识点了</p></li></ol><blockquote><p><strong>网上已经有完善的参考手册不记</strong></p></blockquote><ol><li>还有一些书上没有的知识，比如HTML元素，书上没有给你全部列出来，但是网上W3cschool等网站已经给你总结的很好了，查找起来特别方便，还有离线手册，这个时候再去记这些东西有什么必要？</li><li>花时间还没有别人做的好，何必呢？对吧？而且与其花时间去记这些没有多大意义的东西，还不如花点时间将这些离线手册保存下来，放到自己的网盘等都是很不错的选择，查找起来很方便，<strong>不要多做无用功</strong>！</li></ol><blockquote><p><strong>看书的时候一定不记</strong></p></blockquote><ol><li>很多人学习效率很高，很多人效率很低，为什么？大部分是因为你的投入程度！</li><li>就比如别人一分钟就能理解这个知识点，而你需要三分钟，为什么？</li><li>因为别人这一分钟投入是100%，而你三分钟每一分钟只投入30%，加起来才90%！</li><li>所以看书的时候不要去做笔记，专心投入到理解知识点和代码中去，将专注投入效率最大化</li><li>如果你边看书边记笔记，当你的思维从学习跳转到记笔记这个过程，就会严重打乱你的学习效率！不建议边看书边记！</li><li>如果你对某一个知识点觉得需要记，你就先做一个标记，完了再回来记。希望<strong>一次只做一件事！</strong></li></ol><h2 id="3-2-问：如何做笔记才高效？"><a href="#3-2-问：如何做笔记才高效？" class="headerlink" title="3.2 问：如何做笔记才高效？"></a>3.2 <strong>问</strong>：<strong>如何做笔记才高效？</strong></h2><blockquote><p><strong>答</strong>：作为一名学计算机的人，如果你说你用一个笔记本（纸质）去记，我觉得还是别说你是学计算机的，有点丢不起人（个人看法，不喜可以忽略），假如你现在笔记本记了一半本，我想让你查一下其中XXX知识点你要查多久？还是电脑上ctrl+F几秒钟就搞定？做笔记一定要专业的去做，比如利用<strong>有道云笔记</strong>、<strong>印象笔记</strong>甚至是自己搭建环境和用word打好目录来记，要比你用笔记本去记效率好几十倍！所以一定要使用软件去记，可以多端同步，电脑上记好手机就会同步完成，要看就打开就可以。而且项目和工作中遇到问题打开笔记ctrl+F马上就能找到自己需要的内容！</p></blockquote><blockquote><p>其次就是一定要总结，特别重要，不会总结就只是瞎学，为什么别人就可以举一反三？因为别人善于总结。总结不是把每个知识点都记一遍，而是把一节或者一章的知识点柔和成一份精炼笔记，将自己学的知识梳理，提取精华</p></blockquote><blockquote><p>最重要一点，就是<strong>一定要学会独立解决问题</strong>！意思就是说遇到问题，先看错误信息，看看能不能解决，不能就把错误信息粘贴到百度，看一下别人是怎么解决的，这些错误解决了就把问题记下来，这些错误就是你踩的坑，你的财富，你成为大神的基石！不要一有错误就问别人，这样你永远学不会独立解决问题，只有百度找不到解决办法了再向前辈请教，这样才能成长和提高</p></blockquote><h1 id="四、额外提及"><a href="#四、额外提及" class="headerlink" title="四、额外提及"></a>四、额外提及</h1><ol><li>作为一个开发人员，希望记笔记更多的使用markdown来记录</li><li>普通的文本笔记要花费一些时间来进行排版整理，markdown可以帮我们做好这些事情</li><li>记录笔记的软件很多，现在在用的有以下两个</li></ol><blockquote><p>语雀：专业的文档知识库，markdown支持可以，有微信和支付宝小程序端，方便同步；功能很多，可以试一下</p></blockquote><blockquote><p>Typora：支持markdown最好的软件之一，缺点是不支持同步，不过可以整合PicGo+OSS自己搭建存储服务器</p></blockquote><ol><li>当然还有很多可选择的软件比如有道云笔记、印象笔记、做脑图、word等等最终都是一样的目的，采用哪个看自己的喜好</li><li>还有就是养成分享的习惯，比如博客等，都是可以打造自己名片的一种方式。学会固然很OK，分享出来才难能可贵</li></ol><p>作者：TianXinCoord<br>链接：<a href="https://juejin.cn/post/6986449219955490853">https://juejin.cn/post/6986449219955490853</a><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
    <categories>
      
      <category>个人提升</category>
      
    </categories>
    
    
    <tags>
      
      <tag>转载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【todo】聊一下kafka的中的生产者</title>
    <link href="/2022/05/22/%E8%81%8A%E4%B8%80%E4%B8%8Bkafka%E7%9A%84%E4%B8%AD%E7%9A%84%E7%94%9F%E4%BA%A7%E8%80%85/"/>
    <url>/2022/05/22/%E8%81%8A%E4%B8%80%E4%B8%8Bkafka%E7%9A%84%E4%B8%AD%E7%9A%84%E7%94%9F%E4%BA%A7%E8%80%85/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>消费队列</category>
      
      <category>Kafka</category>
      
      <category>todo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生产者消费分区机制原理剖析</title>
    <link href="/2022/05/22/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E5%88%86%E5%8C%BA%E6%9C%BA%E5%88%B6%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/"/>
    <url>/2022/05/22/%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E5%88%86%E5%8C%BA%E6%9C%BA%E5%88%B6%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>kafka有主题Topic的概念，它是承载真实数据的逻辑容器，主题之下还有有若干个分区，所以Kafka的消息组织方式有三级</p><p>主题 - 分区 -消息</p><p><strong>提出问题</strong>为什么kafka不直接使用多个主题，而是使用了多分区呢？</p><p>其实分区主要是提供了<strong>负责均衡</strong> 和 <strong>高吞吐量</strong>的关键.</p><h3 id="如何自定义分区策略"><a href="#如何自定义分区策略" class="headerlink" title="如何自定义分区策略"></a>如何自定义分区策略</h3><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PartitionImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">org</span>.apache.kafka.clients.producer.Partitioner &#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">partition</span><span class="hljs-params">(</span><br><span class="hljs-params">          String topic, Object key, <span class="hljs-type">byte</span>[] keyBytes, Object value, <span class="hljs-type">byte</span>[] valueBytes, Cluster cluster)</span> &#123;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">()</span> &#123;&#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(Map&lt;String, ?&gt; map)</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中的cluster是集群消息,比如kafka集群有多少个Topic、多少个Broker等。</p><h3 id="分区策略"><a href="#分区策略" class="headerlink" title="分区策略"></a>分区策略</h3><table><thead><tr><th>策略名称</th><th>这个策略讲的是啥？</th><th>有啥好的？</th><th>有图有真相</th></tr></thead><tbody><tr><td>轮询策略</td><td>即顺序分配</td><td>非常优秀的负载均衡表现，总能保证消息最大限度地平均分配到所有分区上。</td><td><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2h268o8hdj218q0hi75w.jpg" alt="image-20220522112646246"></td></tr><tr><td>随机策略</td><td>随机将消息放置到任意一个分区上</td><td></td><td><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2h2ahnz2aj217m0ikq4l.jpg" alt="image-20220522121910912"></td></tr><tr><td>按消息键保序策略</td><td>kafka允许为每一条消息定义消息键盘,俗称Key,其中Key的作用非常大，是一个有着明确业务含义的字段。</td><td></td><td><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2h2aeyizsj21a80hkabv.jpg" alt="image-20220522121906277"></td></tr><tr><td>其他分区策略</td><td>这个不做讨论。</td><td></td><td></td></tr></tbody></table><h3 id="实践出真知"><a href="#实践出真知" class="headerlink" title="实践出真知"></a>实践出真知</h3><ol><li><p>默认的是轮询策略</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2hbwrogpuj21h10u045r.jpg" alt="image-20220522175158101"></p><p>可以看到一共是5个消息，平均散落在了每个Topic上。</p></li><li></li></ol>]]></content>
    
    
    <categories>
      
      <category>消费队列</category>
      
      <category>Kafka</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最最最重要的集群参数配置</title>
    <link href="/2022/05/19/%E6%9C%80%E6%9C%80%E6%9C%80%E9%87%8D%E8%A6%81%E7%9A%84%E9%9B%86%E7%BE%A4%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/05/19/%E6%9C%80%E6%9C%80%E6%9C%80%E9%87%8D%E8%A6%81%E7%9A%84%E9%9B%86%E7%BE%A4%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>其中这些配置不单单指Kafka的服务端配置、也有Broker的配置，也有Topic的配置，甚至还有JVM的配置。</p><h3 id="Zookeeper参数"><a href="#Zookeeper参数" class="headerlink" title="Zookeeper参数"></a>Zookeeper参数</h3><p>它是一个分布式的协调框架，负责协调管理并且保存Kafka集群的所有的元数据信息,比如集群都有哪些Broker在运行，创建了哪些Topic，每个Topic有多少的分区 以及 这些分区的Leader副本都在哪些机器上等信息。</p><table><thead><tr><th>参数名</th><th>参数意义</th><th>需要注意</th></tr></thead><tbody><tr><td>zookeeper.connect</td><td></td><td>Zk1:2181,zk2:2181,zk3:2181，其中的2181是zookeeper默认的端口</td></tr></tbody></table><h3 id="Kafka参数"><a href="#Kafka参数" class="headerlink" title="Kafka参数"></a>Kafka参数</h3><h4 id="Broker端参数"><a href="#Broker端参数" class="headerlink" title="Broker端参数"></a>Broker端参数</h4><p>存储信息</p><table><thead><tr><th>参数名</th><th>参数意义</th><th>需要注意</th></tr></thead><tbody><tr><td>log.dirs</td><td>Broker需要使用的若干文件目录路径,没有默认值！</td><td>一定要配置多个路径比如 &#x2F;home&#x2F;kafka1,&#x2F;home&#x2F;kafka2,&#x2F;home&#x2F;kafka3.<br />好处是可以提升读写性能<br />能够实现故障的转移</td></tr><tr><td>log.dir</td><td>单路径</td><td></td></tr></tbody></table><h4 id="Topic参数"><a href="#Topic参数" class="headerlink" title="Topic参数"></a>Topic参数</h4><p>Topic级别参数会覆盖Broker参数，而每个Topic都能设置自己的参数值,这就是所谓的Topic级别的参数。</p><table><thead><tr><th>参数名称</th><th>参数意义</th><th>需要注意</th></tr></thead><tbody><tr><td>auto.create.topics.enable</td><td>是否允许自动创建Topic.</td><td>最好设置成false，即不允许自动创建Topic. 否则线上会有各种奇奇怪怪的名字。否则你要名为一个test的Topic发送消息，但是不小心拼写错误了，把test写出了tst，就会<strong>创建了一个名为tst</strong>的Topic</td></tr><tr><td>unclean.leader.eclection.enable</td><td>是否允许Unclean Leader选举.<br /><strong>false</strong>(推荐使用) : 坚决不能让落后太多的副本竞选Leader<br />true：允许从保存数据较少的副本中选出来当Leader,但是后果就是说如果当数据较少的副本当了Leader之后，它会认为自己比较权威了。</td><td>Kafka的每个分区都有多个副本来提供高可用，但是这些副本中只能有一个副本对外提供服务，即所谓的Leader副本。<br />但是其中只有保存数据比较多的那些副本有资格去竞选，落后太多的副本没有资格做这件事情。<br /></td></tr><tr><td>auto.leader.rebalance.enable</td><td>是否允许定期对Topic分区进行Leader重新选举.<br />推荐是<strong>false</strong><br /> 这个与unclean.leader.eclection.enable的区别是它是更换Leader！而不是选Leader!<br />就算A干的很好还是会被强行卸任换成B.</td><td><strong>换一次Leader的代价很高</strong>,原来向A发送的所有请求都是切换发送到B了，并且没有任何的性能收益！</td></tr><tr><td>retention.ms</td><td>Topic消息被保存的时长,默认是7天.</td><td></td></tr><tr><td>retention.bytes</td><td>要为该Topic预留多大的磁盘空间。</td><td></td></tr></tbody></table><h3 id="JVM参数"><a href="#JVM参数" class="headerlink" title="JVM参数"></a>JVM参数</h3><table><thead><tr><th>参数名称</th><th>参数意义</th><th>需要注意</th></tr></thead><tbody><tr><td>KAFKA_HEAP_OPTS</td><td>堆大小</td><td>默认是1GB,设置成6GB</td></tr><tr><td>KAFKA_JVM_PERFORMANCE_OPTS</td><td>垃圾回收器</td><td>默认使用G1</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>消息队列</category>
      
      <category>kafka</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kafka常见的问题</title>
    <link href="/2022/05/19/kafka%E5%B8%B8%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/05/19/kafka%E5%B8%B8%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="我开发中遇到的问题"><a href="#我开发中遇到的问题" class="headerlink" title="我开发中遇到的问题"></a>我开发中遇到的问题</h3><h4 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h4><ol><li><p>一个Topic中有多个Partition我该如何处理？</p><ol><li>因为有自己的分区逻辑可以按照自己的策略进行放入消息。</li></ol></li><li><p>我该如何发送一个对象？</p><ol><li><p>Solution link:<a href="https://blog.csdn.net/u014104286/article/details/77102872">https://blog.csdn.net/u014104286/article/details/77102872</a></p></li><li><div class="code-wrapper"><pre><code class="hljs">  public static Properties initPerferConfig() &#123;    Properties props = new Properties();    props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, brokerList);    props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());    props.put(        ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,        &quot;com.roger.kafkademo.encoding.EncodeingKafka&quot;);    return props;  &#125;</code></pre></div></li><li><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2j9x4uim4j20zs0u041g.jpg" alt="image-20220524101415326"></p></li><li><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2jcpxw8azj21ty0tcwip.jpg" alt="image-20220524115108503"></p></li></ol></li><li><p>[未解决] 如何开启这个多副本以及怎么查看这个多副本的？</p></li><li></li></ol><h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><ol><li>为什么我消费了消息还存在Broker中？<ol><li>当消费者消费的时候比如 <strong>consumer.poll</strong> 的时候这个是通过offset去记录当前消费到哪一条消息的，而不是消费一条删除一条的。</li></ol></li><li>消息过多，磁盘容量不足怎么办？<ol><li></li></ol></li></ol><h3 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h3><h4 id="Kafka如何保证数据不丢失"><a href="#Kafka如何保证数据不丢失" class="headerlink" title="Kafka如何保证数据不丢失?"></a>Kafka如何保证数据不丢失?</h4><h4 id="Kafka如何保证消息不重复消费"><a href="#Kafka如何保证消息不重复消费" class="headerlink" title="Kafka如何保证消息不重复消费?"></a>Kafka如何保证消息不重复消费?</h4><p>​既然谈到了重复消费的问题肯定得说一下为什么会出现重复消费？</p><div class="code-wrapper"><pre><code class="hljs"> 1. 服务端侧已经消费的数据没有成功提交offset(根本原因). 2. Kafka侧由于服务端业务时间长 或者 网络连接 等原因让Kafka认为服务器假死,触发了分区的rebalance.</code></pre></div><p>​如何解决？</p><ol><li>消费消息服务做幂等校验，比如Redis的set，Mysql的主键天然幂等功能。</li><li>将 enable.auto.commit 参数设置为false，关闭自动提交，开开发者在代码中手动提交offset.<ol><li><strong>什么时候提交offset合适？</strong><ol><li></li></ol></li></ol></li></ol><h4 id="Kafka的多副本机制"><a href="#Kafka的多副本机制" class="headerlink" title="Kafka的多副本机制"></a>Kafka的多副本机制</h4><h4 id="Zookeeper在Kafka中的作用？"><a href="#Zookeeper在Kafka中的作用？" class="headerlink" title="Zookeeper在Kafka中的作用？"></a>Zookeeper在Kafka中的作用？</h4>]]></content>
    
    
    <categories>
      
      <category>消息队列</category>
      
      <category>kafka</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java开发小芝士</title>
    <link href="/2022/05/19/Java%E5%BC%80%E5%8F%91%E5%B0%8F%E8%8A%9D%E5%A3%AB/"/>
    <url>/2022/05/19/Java%E5%BC%80%E5%8F%91%E5%B0%8F%E8%8A%9D%E5%A3%AB/</url>
    
    <content type="html"><![CDATA[<ol><li><p>遇到复杂、嵌套的JSON，如何处理</p><ol><li><p><a href="https://www.json.cn/json/json2java.html">https://www.json.cn/json/json2java.html</a> 点击JSON生成JAVA实体</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2dptvhypmj222w0u079i.jpg" alt="image-20220519145119254"></p></li></ol></li><li><p>如果遇到对方给的 变量名 风格和自己不一致</p><ol><li><p>可以通过重命名变量的方式</p></li><li><div class="code-wrapper"><pre><code class="java">@JsonProperty(&quot;colDefine&quot;)private List&lt;ColDefine&gt; ColDefine;</code></pre></div></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>项目实践</category>
      
      <category>Java</category>
      
      <category>todo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kafka基本概念掌握</title>
    <link href="/2022/05/18/kafka%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E6%8E%8C%E6%8F%A1/"/>
    <url>/2022/05/18/kafka%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E6%8E%8C%E6%8F%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2ct0quritj20u70u0772.jpg" alt="image-20220518195607275"></p><h4 id="术语介绍"><a href="#术语介绍" class="headerlink" title="术语介绍"></a>术语介绍</h4><h5 id="Broker-代理"><a href="#Broker-代理" class="headerlink" title="Broker(代理)"></a>Broker(代理)</h5><p>是一个独立的Kafka实例,多个Kafka Broker组成一个 Kafka Cluster.</p><p>并且 这个Broker 中包含了Topic 以及 Partition 这两个重要的概念.</p><p>Topic （主题）: Producer将消息发送到特定的Topic，Consumer通过订阅特定的Topic来进行消费。</p><p>Partition（分区）: Partition 属于 Topic 的一部分，一个Topic可以有多个 Partition ,并且一个Topic下的Partition可以分布在不同的Broker上,这就是表明了一个Partition可以横跨多个Broker.</p><table><thead><tr><th>名字</th><th>英文</th><th>含义</th></tr></thead><tbody><tr><td>消息</td><td>Record</td><td>是Kafka处理的主要的对象</td></tr><tr><td>主题</td><td>Topic</td><td>是承载消息的容器，主要是用来区分具体的业务</td></tr><tr><td>分区</td><td>Partition</td><td>一个<strong>有序不变</strong>的消息序列，每个主题Topic下可以有多个Partition</td></tr><tr><td>副本</td><td>Replica</td><td>Kafka中同一条消息可以被拷贝到多个地方以提供数据冗余,这些地方就是所谓的副本.其中副本还分为领导者和追随者副本，各自有着不同的角色划分。</td></tr><tr><td>消费者位移</td><td>Offset</td><td>表征消费者消费的进度,每个消费者都有自己的消费者位移</td></tr><tr><td>消费者组</td><td>Consumer  Group</td><td>是多个消费者实例共同组成的一个组，同时消费多个分区以实现高吞吐。</td></tr><tr><td>重平衡</td><td>Relance</td><td>消费者组内某个消费者实例挂掉后，其他消费者自动重新分配订阅主题分区的过程。<strong>这个是Kafka消费者端实现高可用的重要手段</strong></td></tr></tbody></table><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2dxk4mbtkj21cq0q0dk1.jpg" alt="image-20220519191844157"></p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><p>JavaGuide</p></li><li><p>极客时间-kafka</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>消息队列</category>
      
      <category>kafka</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker学习记录</title>
    <link href="/2022/05/16/Docker%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/05/16/Docker%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ol><li>镜像和容器的关系<ol><li>镜像和容器可以类比为类和对象，容器可以被创建、启动、停止、删除和暂停。</li></ol></li></ol><h3 id="实战经历"><a href="#实战经历" class="headerlink" title="实战经历"></a>实战经历</h3><ol><li><p>如何进入容器？</p><ol><li><p>第一阶段: 首先需要把镜像启动起来.</p><figure class="highlight applescript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs applescript">docker <span class="hljs-built_in">run</span> -<span class="hljs-keyword">it</span> <span class="hljs-comment">--name lhepMaven hub.fuxi.netease.com/qa-web/jenkins-maven:3.6</span><br></code></pre></td></tr></table></figure></li><li><p>第二阶段: 通过容器ID进入 或者 NAMES 进行 (其中names可以通过docker ps -a查看到)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">➜  /etc docker ps -a<br>CONTAINER ID   IMAGE           COMMAND                  CREATED          STATUS                  PORTS                                                                     NAMES<br>98d6fde314ce   bitnami/kafka   <span class="hljs-string">&quot;/opt/bitnami/script…&quot;</span>   15 seconds ago   Up Less than a second   0.0.0.0:9002-&gt;9002/tcp, :::9002-&gt;9002/tcp, 9092/tcp                       kafka<br>6d90e0c7f652   zookeeper       <span class="hljs-string">&quot;/docker-entrypoint.…&quot;</span>   5 minutes ago    Up 5 minutes            2888/tcp, 3888/tcp, 0.0.0.0:2181-&gt;2181/tcp, :::2181-&gt;2181/tcp, 8080/tcp   zookeeper<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 第一种 容器ID进入</span><br>docker <span class="hljs-built_in">exec</span> -it 8x9zc89asd /bin/bash <br><span class="hljs-comment"># 第二种 NAMES 进行</span><br>docker <span class="hljs-built_in">exec</span> -it zookeeper /bin/bash<br></code></pre></td></tr></table></figure></li></ol></li><li><p>CMD vs ENTRYPOINT</p><table><thead><tr><th>CMD</th><th>RUN</th><th>ENTRYPOINT</th></tr></thead><tbody><tr><td>命令设置容器启动后默认执行的命令及其参数，但CMD设置的命令能够被<code>docker run</code>命令后面的命令行参数替换</td><td>命令执行命令并创建新的镜像层，通常用于安装软件包</td><td>配置容器启动时的执行命令</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><ol><li><p>运行代码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">FROM alpine:3.2<br>ARG JAVA_ENV=<span class="hljs-string">&quot;-server -Xms2047m -Xmx4097m -XX:+UseG1GC&quot;</span><br>RUN <span class="hljs-built_in">echo</span> -------------- <span class="hljs-variable">$JAVA_ENV</span><br></code></pre></td></tr></table></figure></li><li><p><a href="https://blog.csdn.net/u010180815/article/details/107837717">Dockerfile RUN vs CMD vs ENTRYPOINT区别</a></p></li></ol></li><li><p>Docker-compose.yml</p><ol><li>如何启动</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>容器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rocketMQ学习笔记</title>
    <link href="/2022/05/16/rocketMQ%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/05/16/rocketMQ%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h3><ol><li>拉取镜像</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">docker pull rocketmqinc/rocketmq<br></code></pre></td></tr></table></figure><ol start="2"><li>启动namesrv服务</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run \<br>--restart=always \<br>--name rmqbroker \<br>--link rmqnamesrv:namesrv \<br>-p 10911:10911 \<br>-p 10909:10909 \<br>-v  /tmp/rocketmq/data/broker/logs:/root/logs \<br>-v  /tmp/rocketmq/data/broker/store:/root/store \<br>-v /tmp/rocketmq/conf/broker.conf:/opt/rocketmq-4.4.0/conf/broker.conf \<br>-e &quot;NAMESRV_ADDR=namesrv:9876&quot; \<br>-e &quot;MAX_POSSIBLE_HEAP=200000000&quot; \<br>rocketmqinc/rocketmq \<br>sh mqbroker -c /opt/rocketmq-4.4.0/conf/broker.conf <br></code></pre></td></tr></table></figure><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><h3 id="我遇到的问题以及如何解决的"><a href="#我遇到的问题以及如何解决的" class="headerlink" title="我遇到的问题以及如何解决的"></a>我遇到的问题以及如何解决的</h3><ol><li><p>当我通过docker-compose去启动相应的rmq的时候出现了下面的情况。</p><ol><li><div class="code-wrapper"><pre><code class="sh">➜  rocketmq docker-compose upDocker Compose is now in the Docker CLI, try `docker compose up`Starting rmqnamesrv ... doneStarting rmqbroker  ... doneStarting rmqconsole ... doneAttaching to rmqnamesrv, rmqconsole, rmqbrokerrmqnamesrv    | OpenJDK 64-Bit Server VM warning: Using the DefNew young collector with the CMS collector is deprecated and will likely be removed in a future releasermqnamesrv    | OpenJDK 64-Bit Server VM warning: UseCMSCompactAtFullCollection is deprecated and will likely be removed in a future release.rmqbroker     | ======================================rmqbroker     | -server -Xms994M -Xmx994M -Xmn248M -XX:+UseG1GC -XX:G1HeapRegionSize=16m -XX:G1ReservePercent=25 -XX:InitiatingHeapOccupancyPercent=30 -XX:SoftRefLRUPolicyMSPerMB=0 -XX:SurvivorRatio=8 -verbose:gc -Xloggc:/dev/shm/mq_gc_%p.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCApplicationStoppedTime -XX:+PrintAdaptiveSizePolicy -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=5 -XX:GCLogFileSize=30m -XX:-OmitStackTraceInFastThrow -XX:+AlwaysPreTouch -XX:MaxDirectMemorySize=994M -XX:-UseLargePages -XX:-UseBiasedLocking -Djava.ext.dirs=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.275.b01-0.el7_9.x86_64/jre/lib/ext:/home/rocketmq/rocketmq-4.8.0/bin/../lib -server -Xms128m -Xmx128m -Xmn128m -cp .:/home/rocketmq/rocketmq-4.8.0/bin/../conf:rmqconsole    | 02:11:59,486 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Could NOT find resource [logback.groovy]rmqconsole    | 02:11:59,489 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Could NOT find resource [logback-test.xml]rmqconsole    | 02:11:59,491 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Found resource [logback.xml] at [jar:file:/app.jar!/BOOT-INF/classes!/logback.xml]rmqconsole    | 02:11:59,645 |-INFO in ch.qos.logback.core.joran.spi.ConfigurationWatchList@1b2c6ec2 - URL [jar:file:/app.jar!/BOOT-INF/classes!/logback.xml] is not of type filermqconsole    | 02:12:00,096 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - debug attribute not setrmqconsole    | 02:12:00,126 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.ConsoleAppender]rmqconsole    | 02:12:00,223 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [STDOUT]rmqconsole    | 02:12:00,289 |-INFO in ch.qos.logback.core.joran.action.NestedComplexPropertyIA - Assuming default type [ch.qos.logback.classic.encoder.PatternLayoutEncoder] for [encoder] propertyrmqconsole    | 02:12:00,687 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.rolling.RollingFileAppender]rmqconsole    | 02:12:00,703 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [FILE]rmqconsole    | 02:12:00,885 |-INFO in c.q.l.core.rolling.TimeBasedRollingPolicy@1323165413 - No compression will be usedrmqconsole    | 02:12:00,896 |-INFO in c.q.l.core.rolling.TimeBasedRollingPolicy@1323165413 - Will use the pattern /root/logs/consolelogs/rocketmq-console-%d&#123;yyyy-MM-dd&#125;.%i.log for the active filermqconsole    | 02:12:00,920 |-INFO in ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP@70177ecd - The date pattern is &#39;yyyy-MM-dd&#39; from file name pattern &#39;/root/logs/consolelogs/rocketmq-console-%d&#123;yyyy-MM-dd&#125;.%i.log&#39;.rmqconsole    | 02:12:00,920 |-INFO in ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP@70177ecd - Roll-over at midnight.rmqconsole    | 02:12:00,933 |-INFO in ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP@70177ecd - Setting initial period to Mon May 16 02:10:01 UTC 2022rmqconsole    | 02:12:00,936 |-WARN in ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP@70177ecd - SizeAndTimeBasedFNATP is deprecated. Use SizeAndTimeBasedRollingPolicy insteadrmqconsole    | 02:12:00,946 |-INFO in ch.qos.logback.core.joran.action.NestedComplexPropertyIA - Assuming default type [ch.qos.logback.classic.encoder.PatternLayoutEncoder] for [encoder] propertyrmqconsole    | 02:12:00,962 |-INFO in ch.qos.logback.core.rolling.RollingFileAppender[FILE] - Active log file name: /root/logs/consolelogs/rocketmq-console.logrmqconsole    | 02:12:00,962 |-INFO in ch.qos.logback.core.rolling.RollingFileAppender[FILE] - File property is set to [/root/logs/consolelogs/rocketmq-console.log]rmqconsole    | 02:12:00,967 |-INFO in ch.qos.logback.classic.joran.action.RootLoggerAction - Setting level of ROOT logger to INFOrmqconsole    | 02:12:00,967 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [STDOUT] to Logger[ROOT]rmqconsole    | 02:12:00,970 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [FILE] to Logger[ROOT]rmqconsole    | 02:12:00,970 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - End of configuration.rmqconsole    | 02:12:00,972 |-INFO in ch.qos.logback.classic.joran.JoranConfigurator@1e80bfe8 - Registering current configuration as safe fallback pointrmqconsole    |rmqconsole    | qemu: uncaught target signal 11 (Segmentation fault) - core dumpedrmqconsole    | Segmentation faultrmqconsole exited with code 139rmqnamesrv    | The Name Server boot success. serializeType=JSONrmqbroker     | The broker[broker-a, 172.19.0.4:10911] boot success. serializeType=JSON and name server is rmqnamesrv:9876</code></pre></div></li></ol></li></ol><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="(https://github.com/apache/rocketmq/blob/master/docs/cn/RocketMQ_Example.md)">官方快速入门</a></li><li><a href="https://blog.csdn.net/ming19951224/article/details/109063041">手把手带你启动rmq</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>消息队列</category>
      
      <category>rocketMQ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kafka 3.x 学习笔记</title>
    <link href="/2022/05/15/kafka%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/05/15/kafka%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>​切记一点： Kafka是<strong>消息系统</strong>,也是<strong>分布式流处理平台</strong>, 被数千家用于高性能的数据管道、流分析、数据集成和关键任务应用。</p><h3 id="传统消息队列应用场景"><a href="#传统消息队列应用场景" class="headerlink" title="传统消息队列应用场景"></a>传统消息队列应用场景</h3><ol><li>缓存&#x2F;削峰填谷</li><li>解耦</li><li>异步通信</li></ol><p>​所谓的<strong>削峰填谷</strong>是指缓冲上下游瞬时突发流量，使其更平滑。特别是那种对于那种发送能力很强的上游系统，如果没有消息引擎的保护，脆弱的下游系统可能会直接被压垮导致全链路服务的雪崩，但是一旦有了消息引擎，它能有效地对抗上游流量的冲击，真正做到将上游的峰填满到谷中，避免了流量的震荡。消息引擎系统的另外一大好处在于发送方和接收方的松耦合，减少了系统间不必要的交互。</p><p>​举个🌰,当我们引入了Kafka之后，我们在早晚高峰打车的时候，上游的订单不服务不直接和下游的子服务进行交互，它是将服务的消息发送到了对应的几个不同的Topic中，然后下游的服务去从Topic中消费这些消息，既不影响上游的TPS也可以给下游的服务做出充足的时间去消费它们，我认为是引入Kafka这种<strong>消息中间件最大的意义</strong>.</p><h3 id="安装-docker版本"><a href="#安装-docker版本" class="headerlink" title="安装[docker版本]"></a>安装[docker版本]</h3><p>​kafka需要配合zookeeper联合使用,所以为了方便安装部署直接上docker-compose.yml.</p><p>​你可能和我会有同样的疑惑，我装一个kafka为什么还要给我整个ZooKeper？这不是要往死里学了吗-_-! </p><p>​其实：这里的zookeeper事Kafka用来负责群元数据的管理、控制器的选举等操作的。</p><p>​可以看一下这篇文章<a href="https://segmentfault.com/a/1190000021746086">利用docker和docker-compose部署单机kafka</a></p><p>或者直接用我的，直接docker-compose -up就行了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;2&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">zookeeper:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">&#x27;zookeeper:latest&#x27;</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">zookeeper</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">zookeeper_1</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;2181:2181&#x27;</span><br>    <span class="hljs-attr">expose:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;2181&#x27;</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-comment"># 匿名登录--必须开启</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ALLOW_ANONYMOUS_LOGIN=yes</span><br>  <span class="hljs-attr">kafka:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">&#x27;bitnami/kafka:latest&#x27;</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">kafka</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;9092:9092&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;9082:9082&#x27;</span><br>    <span class="hljs-attr">expose:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;9092&#x27;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;9082&#x27;</span><br>    <span class="hljs-attr">environment:</span><br>       <span class="hljs-comment"># broker 的编号，如果集群中有多个 broker，则每个 broker 的编号需要设置的 不同</span><br>      <span class="hljs-attr">KAFKA_BROKER_ID:</span> <span class="hljs-number">0</span><br>      <span class="hljs-attr">KAFKA_ADVERTISED_LISTENERS:</span> <span class="hljs-string">PLAINTEXT://127.0.0.1:9092</span><br>      <span class="hljs-attr">KAFKA_CREATE_TOPICS:</span> <span class="hljs-string">&quot;kafeidou:2:0&quot;</span> <span class="hljs-comment">#kafka启动后初始化一个有2个partition(分区)0个副本名叫kafeidou的topic </span><br>      <span class="hljs-attr">KAFKA_ZOOKEEPER_CONNECT:</span> <span class="hljs-string">zookeeper:2181</span><br>      <span class="hljs-comment"># broker 对外提供 的服务入 口地址</span><br>      <span class="hljs-attr">KAFKA_LISTENERS:</span> <span class="hljs-string">PLAINTEXT://0.0.0.0:9092</span><br>      <span class="hljs-attr">ALLOW_PLAINTEXT_LISTENER:</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;zookeeper&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./kafka-logs:/kafka</span><br></code></pre></td></tr></table></figure><h4 id="Zookeeper为Kafka做了哪些事情？"><a href="#Zookeeper为Kafka做了哪些事情？" class="headerlink" title="Zookeeper为Kafka做了哪些事情？"></a>Zookeeper为Kafka做了哪些事情？</h4><ol><li>Broker的注册</li><li>Topic的注册</li><li>负载均衡</li></ol><h4 id="测试是否正确运行了"><a href="#测试是否正确运行了" class="headerlink" title="测试是否正确运行了"></a>测试是否正确运行了</h4><ol><li><p>创建topic</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">kafka-topics.sh --create --topic test-topic --bootstrap-server localhost:9092 --replication-factor 1 --partitions 4<br><br><span class="hljs-comment"># terminal中会输出 Created topic test-topic.</span><br></code></pre></td></tr></table></figure></li><li><p>开两个 terminal </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 消费者进程</span><br>kafka-console-producer.sh --broker-list localhost:9092 --topic test-topic<br><span class="hljs-comment"># 生产者进程</span><br>kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test-topic<br></code></pre></td></tr></table></figure><p>解释一下含义:</p><p>其中 bootstrap.servers 是用来指定 生产者客户端 连接 Kafka集群所需的 broker 地址清单。</p></li><li><p>运行效果</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2ca09tj0qj21l70u0wgf.jpg" alt="image-20220518085819457"></p></li></ol><h3 id="基本流程"><a href="#基本流程" class="headerlink" title="基本流程"></a>基本流程</h3><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2c72fk3q4j21340j0goe.jpg" alt="image-20220518071633538"></p><h3 id="代码实现生产者消费者"><a href="#代码实现生产者消费者" class="headerlink" title="代码实现生产者消费者"></a>代码实现生产者消费者</h3><h4 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.KafkaProducer;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProducerFastStart</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">brokerList</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;localhost:9092&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">topic</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test-topic&quot;</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    properties.put(<span class="hljs-string">&quot;key.serializer&quot;</span>, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);<br>    properties.put(<span class="hljs-string">&quot;value.serializer&quot;</span>, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);<br>    properties.put(<span class="hljs-string">&quot;bootstrap.servers&quot;</span>, brokerList);<br><br>    KafkaProducer&lt;String, String&gt; producer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaProducer</span>&lt;&gt;(properties);<br>    ProducerRecord&lt;String, String&gt; record = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProducerRecord</span>&lt;&gt;(topic, <span class="hljs-string">&quot;hello, Kafka!&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>      producer.send(record);<br>      <span class="hljs-comment">//            producer.send(record).get();</span><br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      e.printStackTrace();<br>    &#125;<br>    producer.close();<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;<br><span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;<br><br><span class="hljs-keyword">import</span> java.time.Duration;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsumerFastStart</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">brokerList</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;localhost:9092&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">topic</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test-topic&quot;</span>;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">groupId</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;0&quot;</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    properties.put(<span class="hljs-string">&quot;key.deserializer&quot;</span>, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);<br>    properties.put(<br>        <span class="hljs-string">&quot;value.deserializer&quot;</span>, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);<br>    properties.put(<span class="hljs-string">&quot;bootstrap.servers&quot;</span>, brokerList);<br>    properties.put(<span class="hljs-string">&quot;group.id&quot;</span>, groupId);<br><br>    KafkaConsumer&lt;String, String&gt; consumer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaConsumer</span>&lt;&gt;(properties);<br>    consumer.subscribe(Collections.singletonList(topic));<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>      ConsumerRecords&lt;String, String&gt; records = consumer.poll(Duration.ofMillis(<span class="hljs-number">1000</span>));<br>      <span class="hljs-keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;<br>        System.out.println(record.value());<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h4><p>可以看到捕获到的事heelo wordl 说明的确是能够消费到的。</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2ca3czl7ij21il0u0jz6.jpg" alt="image-20220518090116867"></p><h3 id="接下来我该如何学习Kafka？"><a href="#接下来我该如何学习Kafka？" class="headerlink" title="接下来我该如何学习Kafka？"></a>接下来我该如何学习Kafka？</h3><p>​师傅引进门，修行在个人.</p><p>​基本的使用已经可以了，可以尝试修改案例代码然后理解并且使用其他的API,之后观测你修改的结果。如果这些都没难倒你，你可以自己编写一个小型项目来验证一下学习的成果，然后就是改善和提升客户端的可靠性和性能。等到了这一步了你就可以<strong>熟读</strong>官方文档，确保自己理解了那些影响可靠性和性能的参数，最后再去学习Kafka的高级功能，比如说流处理应用开发。流应用API不仅仅能够生产和消费消息，还能执行高级的流式处理操作，比如说窗口聚合、流处理连接等。</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2df4te3xzj216s042t9l.jpg" alt="image-20220519084114721"></p>]]></content>
    
    
    <categories>
      
      <category>消息队列</category>
      
      <category>kafka</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>消息队列调研</title>
    <link href="/2022/05/15/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E8%B0%83%E7%A0%94/"/>
    <url>/2022/05/15/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E8%B0%83%E7%A0%94/</url>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>​消息队列是消息的传输过程中保存信息的容器，用于接受消息并以文件的方式存储，一个消息队列可以被一个或者多个消息者消费。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>​在大数据里面里面采用Kafka作为消息队列，在我们的JavaEE中会主要啊次用RabbitMq、RocketMQ等。</p><h3 id="对比分析"><a href="#对比分析" class="headerlink" title="对比分析"></a>对比分析</h3><p>​ <a href="https://so.csdn.net/so/search?q=ActiveMQ&spm=1001.2101.3001.7020">ActiveMQ</a> 5.x 维护越来越少，较少在大规模吞吐的场景中使用所以不做讨论。</p><table><thead><tr><th>–</th><th>apache&#x2F;Kafa</th><th align="left">RabbitMQ</th><th>apache&#x2F;RocketMQ</th></tr></thead><tbody><tr><td>GitHub star</td><td>21.9k</td><td align="left">9.5k</td><td>17.2k</td></tr><tr><td>特点</td><td><strong>它是一个分布式的，支持多分区、多副本，基于 Zookeeper 的分布式消息流平台</strong>，它同时也是一款开源的基于发布订阅模式的消息引擎系统。</td><td align="left"></td><td>它是纯 Java 开发，<strong>具有高性能、高可靠、高实时、适合大规模分布式系统应用的特点</strong></td></tr><tr><td>优点</td><td>1. 高吞吐、低延迟<br />2.高伸缩性<br />3.高稳定性<br />4.持久性、可靠性、可回溯性<br />5. 消息有序<br />6.有优秀的第三方kafka web界面</td><td align="left">1. 支持几乎所有最受欢迎的编程语言：Java，C，C ++，C＃，Ruby，Perl，Python，PHP等等；<br/>2. 支持消息路由：RabbitMQ 可以通过不同的交换器支持不同种类的消息路由；<br/>3. 消息时序：通过延时队列，可以指定消息的延时时间，过期时间TTL等；<br/>4. 支持容错处理：通过交付重试和死信交换器（DLX）来处理消息处理故障；<br/>5. 提供了一个易用的用户界面，使得用户可以监控和管理消息 Broker；<br/>6. 社区活跃度高。<br/></td><td>1.高吞吐：借鉴 Kafka 的设计，单一队列百万消息的堆积能力；<br/>2.高伸缩性：灵活的分布式横向扩展部署架构，整体架构其实和 kafka 很像；<br/>3. 高容错性：通过ACK机制，保证消息一定能正常消费；<br/>4. 持久化、可回溯：消息可以持久化到磁盘中，支持消息回溯；<br/>5. 消息有序：在一个队列中可靠的先进先出（FIFO）和严格的顺序传递；<br/>6. 支持发布&#x2F;订阅和点对点消息模型，支持拉、推两种消息模式；<br/>7. 提供 docker 镜像用于隔离测试和云集群部署，提供配置、指标和监控等功能丰富的 Dashboard。<br/></td></tr><tr><td>缺点</td><td>1. 单机如果超过64个队列或者分区,Load会发生明显飙高的现象,队列越多,load越高,发送消息相应时间变长<br />2. 不支持消息路由，不支持延时发送，不支持消息重试<br />3. 社区更新较慢</td><td align="left">1. Erlang开发，不利于做二次开发和维护<br />2. RabbitMQ吞吐量会低一些<br />3. 不支持消息有序、持久化不好、不支持消息回溯、伸缩性一般。</td><td>1. 不支持消息路由,目前是主要是Java 和c++(c++不成熟)<br /></td></tr></tbody></table><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://blog.csdn.net/qq_19007169/article/details/124702533">面试官问：消息队列该怎么选择？Kafka、RocketMQ 、RabbitMQ 和 ActiveMQ</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>消息队列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>职场小白如何晋升</title>
    <link href="/2022/05/15/%E8%81%8C%E5%9C%BA%E5%B0%8F%E7%99%BD%E5%A6%82%E4%BD%95%E6%99%8B%E5%8D%87/"/>
    <url>/2022/05/15/%E8%81%8C%E5%9C%BA%E5%B0%8F%E7%99%BD%E5%A6%82%E4%BD%95%E6%99%8B%E5%8D%87/</url>
    
    <content type="html"><![CDATA[<p>在我看来第一点肯定是能力模型.<br>中级开发的能力模型是</p><figure class="highlight gams"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs gams">【关键词】点：初学者，单模块/单场景<br><br><span class="hljs-comment">*初做者，能做好被安排的一般性工作；</span><br><span class="hljs-comment">*有限的知识和技能，能够做与自己专业相关领域的知识管理；</span><br><span class="hljs-comment">*对职位的标准要求、政策、流程等从业所必需了解的知识处于学习成长阶段，尚需要主管或高级别人员对负责的任务和完成的产出进行清晰的定义和沟通，并随时提供支持以达到要求；</span><br><span class="hljs-comment">*通过配合他人完成较复杂的问题。</span><br></code></pre></td></tr></table></figure><p>然后如果自己想晋升到高级开发, 那么对应的能力模型是</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams">【关键词】点：熟练手，多模块/多场景<br><br><span class="hljs-comment">*被认为是业务实施的基层主体，能应用专业知识独立解决问题；</span><br><span class="hljs-comment">*具有基础和必要的知识、技能，这种知识与技能集中于本专业的一个领域，并已经在工作中多次得以实践；</span><br><span class="hljs-comment">*能够根据自己的经验来操作或作出相应的决定，或参与解决中等难度问题；遇有较复杂的情形，能够提出问题获得主管或较高级别同事的帮助；</span><br><span class="hljs-comment">*能作为一个有经验且独立的项目成员为项目提供相关信息、问题分析和建议。</span><br></code></pre></td></tr></table></figure><p>之前我有个误区,认为程序员的算法能力需要到达某个水平，其实不然，我们更多的是需要解决问题的能力。</p><p>在和我的直系leader沟通之后，说在他上家公司算法和后端开发是两条不同的晋升路线，对应了2种不同维度的能力模型。所以我个人认为可以在算法能力够用的前提下可以提升自己在常用中间件上的使用和熟悉 来帮助自己更好的去解决不同业务上遇到的问题。</p><ol><li>作为缓存的中间件<ol><li>包括Spring自身的缓存 以及 Caffine</li><li>Redis的掌握</li></ol></li><li>消息队列<ol><li>kafka等</li></ol></li><li>常用的设计模式</li></ol>]]></content>
    
    
    <categories>
      
      <category>职场</category>
      
      <category>晋升</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>趣学设计模式-工厂模式</title>
    <link href="/2022/05/13/%E8%B6%A3%E5%AD%A6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/05/13/%E8%B6%A3%E5%AD%A6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>先来看一个例子,没有使用工厂模式之前你的代码的样子：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h26iez4omrj20w90u0q6a.jpg" alt="代码来自Head First P137"></p><p>点评一下：很明显这样写代码非常不好，没有分层，一但要加一个判断则需要新增if else.非常难去维护和更新，并且容易犯错。</p><p>那么如何解决呢？这就是我们今天要讲的工厂模式</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>​工厂方法模式是一个 创建型设计模式，在父类中提供一个创建对象的方法，允许子类决定实例化对象的类型。</p><h3 id="工厂模式通用类图"><a href="#工厂模式通用类图" class="headerlink" title="工厂模式通用类图"></a>工厂模式通用类图</h3><p>​<img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h284d163sxj20ao06k74d.jpg" alt=" 工厂方法模式通用类图"></p><h3 id="工厂方法模式的优点"><a href="#工厂方法模式的优点" class="headerlink" title="工厂方法模式的优点"></a>工厂方法模式的优点</h3><ol><li>良好的封装性,代码结构清晰，我只要一个东西只需要这个产品的<strong>类名</strong>，不用知道创建对象的艰辛过程，降低模块间的耦合。</li><li><strong>拥抱变化</strong>，拓展性非常好，在增加产品类的情况下，只要适当地修改工厂类或者拓展工厂类就行。</li><li><strong>屏蔽产品类</strong>，比如在我们进行数据库开发中从Mysql切换到Oracle只要切换驱动名称即可。</li></ol><h3 id="真实案例"><a href="#真实案例" class="headerlink" title="真实案例"></a>真实案例</h3><div class="code-wrapper"><pre><code class="hljs">#### 简单工厂(实则是一种工厂模式的弱化)</code></pre></div><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h285km8e0cj20gx0ahq3g.jpg" alt="简单工厂模式类图"></p><h4 id="升级为多个工厂类"><a href="#升级为多个工厂类" class="headerlink" title="升级为多个工厂类"></a>升级为多个工厂类</h4><p>所以我们要将 new Pizza的这个方法抽离我们成这个新对象为<strong>工厂</strong>.</p><p>方法</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h280ify8jzj20kp0d8gmd.jpg" alt="image-20220514162731641"></p><ol><li>这样做有什么好处 ？<ol><li>把创建披萨的代码包装成一个类之后，我们只需要改变这个类即可。</li></ol></li><li>如果把工厂定义成一个静态方法和当前使用的有什么差距吗？<ol><li>这样就不能通过继承来改变创建方法的行为。</li></ol></li></ol><p>因此我们可以定义一个 <strong>简单工厂</strong> </p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h280pc31m5j20mw0d5759.jpg" alt="image-20220514163409574"></p><p>工厂模式是一个创建型的设计模式</p><p>通常有三个细分的类型：简单工厂、工厂方法 和 抽象工厂。</p><p>其中简单工厂和抽象工厂的原理比较简单，抽象工厂的原理稍微复杂些，并且相对不常用。</p><p>复杂度无法被消除，只能被转移： </p><ul><li>不用工厂模式，if-else 逻辑、创建逻辑和业务代码耦合在一起 </li><li>简单工厂是将不同创建逻辑放到一个工厂类中，if-else 逻辑在这个工厂类中 </li><li>工厂方法是将不同创建逻辑放到不同工厂类中，先用一个工厂类的工厂来来得到某个工厂，再用这个工厂来创建，if-else 逻辑在工厂类的工厂中</li></ul><h3 id="带着问题去学习"><a href="#带着问题去学习" class="headerlink" title="带着问题去学习"></a>带着问题去学习</h3><ol><li>什么时候该用工厂模式？相对于直接 new 来创建对象，用工厂模式来创建究竟有什么好处呢？</li></ol><h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><p>​首先简单工厂<strong>不是</strong>一个设计模式,</p><h3 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h3><p>工厂方法模式：定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类</p><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><p>​为创建一组相关或互相依赖的对象提供一个接口，而不需要明确指定具体类</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h285vcho23j20g50aqjrp.jpg" alt="抽象工厂模式的通用类图"></p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>一个模式在什么情况下才能够使用，是我包括很多读者都比较困惑的地方。</p><ol><li>Java基础函数库中<ol><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Calendar.html#getInstance--"><code>java.util.Calendar#getInstance()</code></a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/ResourceBundle.html#getBundle-java.lang.String-"><code>java.util.ResourceBundle#getBundle()</code></a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/text/NumberFormat.html#getInstance--"><code>java.text.NumberFormat#getInstance()</code></a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/nio/charset/Charset.html#forName-java.lang.String-"><code>java.nio.charset.Charset#forName()</code></a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/net/URLStreamHandlerFactory.html"><code>java.net.URLStreamHandlerFactory#createURLStreamHandler(String)</code></a> （根据协议返回不同的单例对象）</li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/EnumSet.html#of(E)"><code>java.util.EnumSet#of()</code></a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/javax/xml/bind/JAXBContext.html#createMarshaller--"><code>javax.xml.bind.JAXBContext#createMarshaller()</code></a> 及其他类似的方法。</li></ol></li><li>Spring中的应用<ol><li><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2818lkk18j20lb0md0vc.jpg" alt="image-20220514165240270"></li></ol></li><li></li></ol><h3 id="talk-is-cheap-show-me-code"><a href="#talk-is-cheap-show-me-code" class="headerlink" title="talk is cheap, show me code"></a>talk is cheap, show me code</h3><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h281lp0v8dj20j60bfq3l.jpg" alt="image-20220514170515720"></p><p>主函数代码 </p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NvWa</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">// 声明阴阳八卦炉</span><br>    <span class="hljs-type">AbstractHumanFactory</span> <span class="hljs-variable">YinYangLu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HumanFactory</span>();<br><br>    <span class="hljs-comment">// 女娲第一次造人，火候不足，缺陷产品</span><br>    System.out.println(<span class="hljs-string">&quot;--造出的第三批人是白色人种--&quot;</span>);<br>    <span class="hljs-type">Human</span> <span class="hljs-variable">whiteHuman</span> <span class="hljs-operator">=</span> YinYangLu.createHuman(WhiteHuman.class);<br>    whiteHuman.getColor();<br>    whiteHuman.talk();<br><br>    <span class="hljs-comment">// 女娲第二次造人，火候过足，又是次品，</span><br>    System.out.println(<span class="hljs-string">&quot;\n--造出的第三批人是黑色人种--&quot;</span>);<br>    <span class="hljs-type">Human</span> <span class="hljs-variable">blackHuman</span> <span class="hljs-operator">=</span> YinYangLu.createHuman(BlackHuman.class);<br>    blackHuman.getColor();<br>    blackHuman.talk();<br><br>    <span class="hljs-comment">// 第三次造人，火候正正好，优品！黄色人种</span><br>    System.out.println(<span class="hljs-string">&quot;\n--造出的第三批人是黄色人种--&quot;</span>);<br>    <span class="hljs-type">Human</span> <span class="hljs-variable">yellowHuman</span> <span class="hljs-operator">=</span> YinYangLu.createHuman(YellowHuman.class);<br>    yellowHuman.getColor();<br>    yellowHuman.talk();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行截图</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh">--造出的第三批人是白色人种--<br>白色人种的皮肤颜色是白色的!<br>白色人种会说话，一般都是但是单字节。<br><br>--造出的第三批人是黑色人种--<br>黑色人种的皮肤颜色是黑色的!<br>黑人会说话，一般人听不懂。<br><br>--造出的第三批人是黄色人种--<br>黄色人种的皮肤颜色是黄色的!<br>黄色人种会说话，一般说的都是双字节。<br></code></pre></td></tr></table></figure><p>工厂方法模式的模版定义</p><p>​定义一个用于创建对象的接口，让子类决定实例化哪一个类，工厂方法使一个类的实例化延迟到其子类。</p><h3 id="使用推荐"><a href="#使用推荐" class="headerlink" title="使用推荐"></a>使用推荐</h3><ol><li>大部分工厂类都是以“Factory”这个单词结尾的，但也不是必须的，比如 Java 中的 DateFormat、Calender。</li></ol><h3 id="我学习中遇到的问题已经如何解决的"><a href="#我学习中遇到的问题已经如何解决的" class="headerlink" title="我学习中遇到的问题已经如何解决的"></a>我学习中遇到的问题已经如何解决的</h3><ol><li>工厂模式和抽象工厂模式的区别是啥，我们在不同的应用场景中该如何选择呢？</li></ol><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://time.geekbang.org/column/article/197254">设计模式之美</a></li><li><a href="https://book.douban.com/subject/2243615/">Head First 设计模式中文版</a></li><li></li></ol>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
      <category>创建型模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指Offer49丑数</title>
    <link href="/2022/05/12/%E5%89%91%E6%8C%87Offer49%E4%B8%91%E6%95%B0/"/>
    <url>/2022/05/12/%E5%89%91%E6%8C%87Offer49%E4%B8%91%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h4 id="剑指-Offer-49-丑数"><a href="#剑指-Offer-49-丑数" class="headerlink" title="剑指 Offer 49. 丑数"></a><a href="https://leetcode.cn/problems/chou-shu-lcof/">剑指 Offer 49. 丑数</a></h4><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="DP"><a href="#DP" class="headerlink" title="DP"></a>DP</h4><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 骆佳俊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/5/11 9:16 PM</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 注意:</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * &lt;p&gt;特殊情况case : 千万不能忘记去重的问题比如 [0, 1, 2, 3, 4, 5, 6, 6, 8, 9, 10]</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nthUglyNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>];<br>    dp[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">factor2</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>, factor3 = <span class="hljs-number">1</span>, factor5 = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">dp2</span> <span class="hljs-operator">=</span> dp[factor2] * <span class="hljs-number">2</span>;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">dp3</span> <span class="hljs-operator">=</span> dp[factor3] * <span class="hljs-number">3</span>;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">dp5</span> <span class="hljs-operator">=</span> dp[factor5] * <span class="hljs-number">5</span>;<br>      dp[i] = Math.min(Math.min(dp2, dp3), dp5);<br>      <span class="hljs-comment">/** 注意这里都是if 不是if else 即没如果当前的是6 那么factor2 和factor3 都是会++的。 */</span><br>      <span class="hljs-keyword">if</span> (dp[i] == dp2) &#123;<br>        factor2++;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (dp[i] == dp3) &#123;<br>        factor3++;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (dp[i] == dp5) &#123;<br>        factor5++;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[n];<br>  &#125;<br><br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(nthUglyNumber(<span class="hljs-number">10</span>));<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="小根堆"><a href="#小根堆" class="headerlink" title="小根堆"></a>小根堆</h3><p>​等待更新</p><h3 id="源码链接🔗"><a href="#源码链接🔗" class="headerlink" title="源码链接🔗"></a>源码链接🔗</h3><ol><li><a href="https://github1s.com/ZuccRoger/leetcodeJavaMode/blob/master/src/main/java/com/roger/leetcodejava/jianzhi/solution_49/Solution.java">丑数DP</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
      <category>剑指Offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>作为职场新人如何做好业务?</title>
    <link href="/2022/05/11/%E4%BD%9C%E4%B8%BA%E8%81%8C%E5%9C%BA%E6%96%B0%E4%BA%BA%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E4%B8%9A%E5%8A%A1/"/>
    <url>/2022/05/11/%E4%BD%9C%E4%B8%BA%E8%81%8C%E5%9C%BA%E6%96%B0%E4%BA%BA%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E4%B8%9A%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p>应该多花时间在对问题分析，结构化分解，最后通过合理的抽象，形成合适的阶段（Phase）和步骤（Step）上</p><p>有过程分解要好于没有分解，过程分解+对象模型要好于仅仅是过程分解</p><p>我发现这种循序渐进的能力下沉策略，应该是一种更符合实际、更敏捷的方法。因为我们承认模型不是一次性设计出来的，而是迭代演化出来的。</p><h3 id="如何做"><a href="#如何做" class="headerlink" title="如何做"></a>如何做</h3><h4 id="代码怎么写？"><a href="#代码怎么写？" class="headerlink" title="代码怎么写？"></a>代码怎么写？</h4><p>需要上下结合 - 自上而下的结构化分解 + 自下而上的面形对象建模 - 螺旋式地构建系统</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24fnneqk1j21gl0u077f.jpg" alt="image-20220511140915654"></p><h4 id="业务技术怎么做？"><a href="#业务技术怎么做？" class="headerlink" title="业务技术怎么做？"></a>业务技术怎么做？</h4><p>即业务技术到底是在做业务，还是做技术？业务技术的技术性体现在哪里？</p><p>业务所面临的复杂性并不亚于底层技术</p><h3 id="如何评价是不是一个好的程序员"><a href="#如何评价是不是一个好的程序员" class="headerlink" title="如何评价是不是一个好的程序员"></a>如何评价是不是一个好的程序员</h3><p>​因为程序员最重要的事情就是写代码，好的程序员本质上就是好的工程师，写代码整洁而规范（比如你家做装修的做的又干净又好）</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol><li><a href="https://blog.csdn.net/alisystemsoftware/article/details/109286754">一文教会你如何写复杂业务代码</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>职场</category>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>趣学设计模式-代理模式</title>
    <link href="/2022/05/10/%E8%B6%A3%E5%AD%A6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/05/10/%E8%B6%A3%E5%AD%A6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>给某一个对象提供代理，并且由代理对象控制对原对象的引用，所以其核心类是代理类。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>以下是代理模式的结构图:</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h245z6x3iij20qy0j6jsh.jpg" alt="image-20220511083422276"></p><h3 id="光说不练假把式"><a href="#光说不练假把式" class="headerlink" title="光说不练假把式"></a>光说不练假把式</h3><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2465u5ms6j210k0i4763.jpg" alt="image-20220511084045384"></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h247hnvs8yj20fy11kmzb.jpg" alt="image-20220511092643311"></p><p>我们以书上的给的例子进行code一步一步敲代码</p><p>给出了调用者Client的代码</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>  <span class="hljs-meta">@Autowired</span> ProxySearcher proxySearcher;<br><br>  <span class="hljs-meta">@RequestMapping(&quot;/proxyMode/test&quot;)</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> proxySearcher.doSearch(<span class="hljs-string">&quot;杨过&quot;</span>, <span class="hljs-string">&quot;小龙女&quot;</span>);<br>    <span class="hljs-keyword">return</span> result;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个是代理对象的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxySearcher</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Searcher</span> &#123;<br>  <span class="hljs-comment">// 维持一个对真实主题的引用</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">RealSearcher</span> <span class="hljs-variable">searcher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RealSearcher</span>();<br><br>  <span class="hljs-keyword">private</span> AccessValidator validator;<br><br>  <span class="hljs-keyword">private</span> Logger logger;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">doSearch</span><span class="hljs-params">(String userId, String keyword)</span> &#123;<br>    <span class="hljs-comment">// 如果身份验证成功，则执行查询</span><br>    <span class="hljs-keyword">if</span> (validate(userId)) &#123;<br>      <span class="hljs-comment">// 调用真实主题对象的查询方法</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> searcher.doSearch(userId, keyword);<br>      <span class="hljs-comment">// 记录查询日志</span><br>      <span class="hljs-built_in">this</span>.log(userId);<br>      <span class="hljs-comment">// 返回查询结果</span><br>      <span class="hljs-keyword">return</span> result;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">// 创建访问验证对象并调用其validate（）方法实现身份验证</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">validate</span><span class="hljs-params">(String userId)</span> &#123;<br>    validator = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AccessValidator</span>();<br>    <span class="hljs-keyword">return</span> validator.validate(userId);<br>  &#125;<br><br>  <span class="hljs-comment">// 创建日志记录对象并调用log（）方法实现日志记录</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">log</span><span class="hljs-params">(String userId)</span> &#123;<br>    logger = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Logger</span>();<br>    logger.log(userId);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后是真实对象的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RealSearcher</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Searcher</span> &#123;<br>  <span class="hljs-comment">// 模拟查询商务信息</span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">doSearch</span><span class="hljs-params">(String userId, String keyword)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;用户&quot;</span> + userId + <span class="hljs-string">&quot;使用关键词&quot;</span> + keyword + <span class="hljs-string">&quot;查询商务信息!&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;返回具体内容&quot;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">在数据库中验证用户杨过是否是合法用户?<br>杨过登录成功！<br>用户杨过使用关键词小龙女查询商务信息!<br>更新数据库，用户杨过查询次数加<span class="hljs-number">1</span>！<br></code></pre></td></tr></table></figure><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><p>​等待更新</p><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><ol><li>jdk的动态代理<ol><li>利用反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理。</li></ol></li><li>cglib的动态代理<ol><li>是利用asm的开源包,对被代理对象类的class文件加载进来，通过修改其字节码生成的子类来处理。</li></ol></li></ol><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol><li><p>业务系统的非功能性需求开发</p><ol><li><p>监控、统计、限流、事物、幂、日志。</p></li><li><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h244x3sls5j20ki07qt95.jpg" alt="image-20220511075740524"></p><p>如图中，当你去找代购购买商品的时候，代购作为代理者可以去验证你的身份并且有相应的日志记录。这些是和业务系统的非功能性的需求开发。</p></li></ol></li><li><p>RPC以及缓存中</p></li></ol><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><p>代理模式可以去掉客户看不到的内容和服务或者增添额外客户需要的服务。</p><h3 id="和装饰模式相比"><a href="#和装饰模式相比" class="headerlink" title="和装饰模式相比"></a>和装饰模式相比</h3><table><thead><tr><th>代理模式</th><th>装饰模式</th></tr></thead><tbody><tr><td>给真实的类增加一些全新的职责,比如权限控制,缓冲处理,智能引用,远程访问这些和原有的职责不属于同一个问题域。</td><td>是通过装饰类为具体的构件类增加一些相关的职责，是对原有的职责的拓展，而且这些职责是属于同一个问题域的。</td></tr></tbody></table><h3 id="源码链接🔗"><a href="#源码链接🔗" class="headerlink" title="源码链接🔗"></a>源码链接🔗</h3><ol><li><a href="https://github1s.com/ZuccRoger/designMode/blob/HEAD/src/main/java/com/roger/designmode/proxyPattern2/Client.java">商务查询代理模式demo</a></li></ol><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://refactoringguru.cn/design-patterns/proxy">代理模式</a></li><li><a href="https://book.douban.com/subject/20493657/">设计模式的艺术</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指Offer40最小的k个数</title>
    <link href="/2022/05/10/%E5%89%91%E6%8C%87Offer40%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA%E6%95%B0/"/>
    <url>/2022/05/10/%E5%89%91%E6%8C%87Offer40%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="局部快排"><a href="#局部快排" class="headerlink" title="局部快排"></a>局部快排</h3><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 骆佳俊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/5/10 7:36 AM</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span>[] ints = &#123;<br>      <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">213</span>, <span class="hljs-number">12</span>, <span class="hljs-number">312</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">456</span>, <span class="hljs-number">6</span>, <span class="hljs-number">45</span>, <span class="hljs-number">87</span>, <span class="hljs-number">76</span>, <span class="hljs-number">867</span>, <span class="hljs-number">867</span>, <span class="hljs-number">8</span>, <span class="hljs-number">768</span>, <span class="hljs-number">76</span>, <span class="hljs-number">867</span>, <span class="hljs-number">8</span><br>    &#125;;<br>    <span class="hljs-type">int</span>[] kthLargest = getLeastNumbers(ints, <span class="hljs-number">2</span>);<br>    System.out.println(kthLargest);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] getLeastNumbers(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> k) &#123;<br>    <span class="hljs-keyword">if</span> (k == <span class="hljs-number">0</span> || arr.length == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;&#125;;<br>    &#125;<br>    <span class="hljs-comment">// 最后一个参数表示我们要找的是下标为k-1的数</span><br>    quickSearch(arr, <span class="hljs-number">0</span>, arr.length - <span class="hljs-number">1</span>, k - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> Arrays.copyOfRange(arr, <span class="hljs-number">0</span>, k);<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] quickSearch(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> lo, <span class="hljs-type">int</span> hi, <span class="hljs-type">int</span> k) &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">calculatedIndex</span> <span class="hljs-operator">=</span> getPartition(nums, lo, hi);<br>    <span class="hljs-keyword">if</span> (calculatedIndex == k) &#123;<br>      <span class="hljs-keyword">return</span> Arrays.copyOfRange(nums, <span class="hljs-number">0</span>, k);<br>    &#125;<br>    <span class="hljs-keyword">return</span> calculatedIndex &gt; k<br>        ? quickSearch(nums, lo, calculatedIndex - <span class="hljs-number">1</span>, k)<br>        : quickSearch(nums, calculatedIndex + <span class="hljs-number">1</span>, hi, k);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getPartition</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">splitNumber</span> <span class="hljs-operator">=</span> nums[start];<br>    <span class="hljs-keyword">while</span> (start &lt; end) &#123;<br>      <span class="hljs-keyword">while</span> (start &lt; end &amp;&amp; splitNumber &lt;= nums[end]) &#123;<br>        end--;<br>      &#125;<br>      swap(nums, start, end);<br>      <span class="hljs-keyword">while</span> (start &lt; end &amp;&amp; splitNumber &gt;= nums[start]) &#123;<br>        start++;<br>      &#125;<br>      swap(nums, start, end);<br>    &#125;<br>    <span class="hljs-keyword">return</span> start;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">tmpVal</span> <span class="hljs-operator">=</span> nums[left];<br>    nums[left] = nums[right];<br>    nums[right] = tmpVal;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="简单的大根堆"><a href="#简单的大根堆" class="headerlink" title="简单的大根堆"></a>简单的大根堆</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.roger.leetcodejava.jianzhi.solution_40.大根堆;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><span class="hljs-keyword">import</span> java.util.Queue;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 骆佳俊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/5/10 7:54 AM</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span>[] arr = &#123;<br>      <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">213</span>, <span class="hljs-number">12</span>, <span class="hljs-number">312</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">456</span>, <span class="hljs-number">6</span>, <span class="hljs-number">45</span>, <span class="hljs-number">87</span>, <span class="hljs-number">76</span>, <span class="hljs-number">867</span>, <span class="hljs-number">867</span>, <span class="hljs-number">8</span>, <span class="hljs-number">768</span>, <span class="hljs-number">76</span>, <span class="hljs-number">867</span>, <span class="hljs-number">8</span><br>    &#125;;<br>    <span class="hljs-type">int</span>[] leastNumbers = getLeastNumbers(arr, <span class="hljs-number">2</span>);<br>    System.out.println(leastNumbers);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] getLeastNumbers(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> k) &#123;<br>    <span class="hljs-keyword">if</span> (k == <span class="hljs-number">0</span> || arr.length == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>    &#125;<br>    <span class="hljs-comment">// 默认是小根堆，实现大根堆需要重写一下比较器。</span><br>    Queue&lt;Integer&gt; pq = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;((v1, v2) -&gt; v2 - v1);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : arr) &#123;<br>      <span class="hljs-keyword">if</span> (pq.size() &lt; k) &#123;<br>        pq.offer(num);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num &lt; pq.peek()) &#123;<br>        pq.poll();<br>        pq.offer(num);<br>      &#125;<br>    &#125;<br>    <span class="hljs-type">int</span>[] ints = pq.stream().mapToInt(Integer::intValue).toArray();<br>    <span class="hljs-keyword">return</span> ints;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="源码链接"><a href="#源码链接" class="headerlink" title="源码链接"></a>源码链接</h3><ol><li><a href="https://github1s.com/ZuccRoger/leetcodeJavaMode/blob/HEAD/src/main/java/com/roger/leetcodejava/jianzhi/solution_40/%E5%A4%A7%E6%A0%B9%E5%A0%86/Solution.java">剑指offer40</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
      <category>剑指Offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试官:谈谈接口和抽象类有什么区别</title>
    <link href="/2022/05/09/%E8%B0%88%E8%B0%88%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/05/09/%E8%B0%88%E8%B0%88%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h3 id="异同比较"><a href="#异同比较" class="headerlink" title="异同比较"></a>异同比较</h3><p>相同 </p><table><thead><tr><th>比较项</th><th>抽象类</th><th>接口</th></tr></thead><tbody><tr><td>实例化</td><td>不能被实例化</td><td>不能被实例化</td></tr><tr><td>允许部分函数实现</td><td>可以</td><td>Java8开始支持default method.</td></tr></tbody></table><p>差异</p><table><thead><tr><th>比较项</th><th>抽象类</th><th>接口</th></tr></thead><tbody><tr><td>使用的时机和场景</td><td>主要是代码的复用,强调的是<strong>所属关系</strong></td><td>对类的行为的约束,实现了某个接口就有了对应的行为</td></tr><tr><td>成员变量</td><td>默认是default,可以在子类中重新被定义,也可以重新赋值</td><td>成员变量 只能是public static final .</td></tr><tr><td>支持多重继承</td><td>一个类只能继承一个类</td><td>但是可以实现多个接口</td></tr></tbody></table><h3 id="源码链接"><a href="#源码链接" class="headerlink" title="源码链接"></a>源码链接</h3><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li>JavaGuide </li><li><a href="https://time.geekbang.org/column/article/8471">第13讲 | 谈谈接口和抽象类有什么区别？</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试官:java线程池是如何实现的,定时线程怎么做到的定时运行？</title>
    <link href="/2022/05/09/%E9%9D%A2%E8%AF%95%E5%AE%98-java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%9A%84-%E5%AE%9A%E6%97%B6%E7%BA%BF%E7%A8%8B%E6%80%8E%E4%B9%88%E5%81%9A%E5%88%B0%E7%9A%84%E5%AE%9A%E6%97%B6%E8%BF%90%E8%A1%8C%EF%BC%9F/"/>
    <url>/2022/05/09/%E9%9D%A2%E8%AF%95%E5%AE%98-java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%9A%84-%E5%AE%9A%E6%97%B6%E7%BA%BF%E7%A8%8B%E6%80%8E%E4%B9%88%E5%81%9A%E5%88%B0%E7%9A%84%E5%AE%9A%E6%97%B6%E8%BF%90%E8%A1%8C%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>面试官:请介绍一些类加载,双亲委派模型</title>
    <link href="/2022/05/09/%E9%9D%A2%E8%AF%95%E5%AE%98-%E8%AF%B7%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%BA%9B%E7%B1%BB%E5%8A%A0%E8%BD%BD-%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B/"/>
    <url>/2022/05/09/%E9%9D%A2%E8%AF%95%E5%AE%98-%E8%AF%B7%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%BA%9B%E7%B1%BB%E5%8A%A0%E8%BD%BD-%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h3><p>类加载的过程分为加载、链接和初始化。</p><h4 id="加载阶段"><a href="#加载阶段" class="headerlink" title="加载阶段"></a>加载阶段</h4><p>Java将字节码从不同的数据源读取到JVM中，并映射为JVM认可的数据结构(Class对象),这里的数据源可以是各种各样形态的，比如jar文件、class文件,甚至是网络数据源，如果输入数据不是ClassFile的结构，则会抛出ClassFormatError.</p><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p>简单来说就是将定义的类信息平滑地转入到JVM的运行过程中.</p><h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><p>这个是虚拟机安全的保障,JVM需要核验一下字节信息是否符合JVM的规范,否则就会被认定为<strong>VerifyError</strong>，这样就防止了恶意信息危害JVM的运行，验证阶段可能会触发更多的class加载。</p><h5 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h5><p>创建类或者接口中的静态变量，并且初始化静态变量（侧重在内存空间的分配上）</p><h5 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h5><p>会将常量池中的符号引用替换为直接引用</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>真正地去执行类的初始化代码逻辑，包括静态字段的赋值，以及执行类定义中的静态初始化块内的逻辑。</p><h3 id="双亲委派"><a href="#双亲委派" class="headerlink" title="双亲委派"></a>双亲委派</h3><p>就是说类加载器试图加载某个类型的时候，除非父类型找不到相应的类型，否则尽量将这个任务代理给当前加载器的父加载器去做。使用委派模式的目的是为了避免重复加载Java类型。</p><h3 id="类加载机制的3个基本特征"><a href="#类加载机制的3个基本特征" class="headerlink" title="类加载机制的3个基本特征"></a>类加载机制的3个基本特征</h3><ol><li>双亲委派模型</li><li>可见行</li><li>单一性</li></ol><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://time.geekbang.org/column/article/9946">请介绍类加载过程，什么是双亲委派模型？</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指OfferII076数组中的第k大的数字</title>
    <link href="/2022/05/09/%E5%89%91%E6%8C%87OfferII076%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACk%E5%A4%A7%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <url>/2022/05/09/%E5%89%91%E6%8C%87OfferII076%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACk%E5%A4%A7%E7%9A%84%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><h5 id="全量快排"><a href="#全量快排" class="headerlink" title="全量快排"></a>全量快排</h5><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 骆佳俊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/5/9 7:37 AM</span><br><span class="hljs-comment"> *     &lt;p&gt;运行结果</span><br><span class="hljs-comment"> *     &lt;p&gt;执行用时： 31 ms , 在所有 Java 提交中击败了 8.13% 的用户</span><br><span class="hljs-comment"> *     &lt;p&gt;内存消耗： 41.6 MB , 在所有 Java 提交中击败了 32.63% 的用户</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span>[] ints = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>&#125;;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">kthLargest</span> <span class="hljs-operator">=</span> findKthLargest(ints, <span class="hljs-number">2</span>);<br>    System.out.println(kthLargest);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findKthLargest</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> k)</span> &#123;<br>    quickSort(nums, <span class="hljs-number">0</span>, nums.length - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> nums[k - <span class="hljs-number">1</span>];<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<br>    <span class="hljs-keyword">if</span> (start &lt; end) &#123;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">partition</span> <span class="hljs-operator">=</span> getPartition(nums, start, end);<br>      quickSort(nums, partition + <span class="hljs-number">1</span>, end);<br>      quickSort(nums, start, partition - <span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getPartition</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">splitNumber</span> <span class="hljs-operator">=</span> nums[start];<br>    <span class="hljs-keyword">while</span> (start &lt; end) &#123;<br>      <span class="hljs-keyword">while</span> (start &lt; end &amp;&amp; splitNumber &gt;= nums[end]) &#123;<br>        end--;<br>      &#125;<br>      swap(nums, start, end);<br>      <span class="hljs-keyword">while</span> (start &lt; end &amp;&amp; splitNumber &lt;= nums[start]) &#123;<br>        start++;<br>      &#125;<br>      swap(nums, start, end);<br>    &#125;<br>    <span class="hljs-keyword">return</span> start;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">tmpVal</span> <span class="hljs-operator">=</span> nums[left];<br>    nums[left] = nums[right];<br>    nums[right] = tmpVal;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="局部快排"><a href="#局部快排" class="headerlink" title="局部快排"></a>局部快排</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs Java"><br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 骆佳俊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/5/9 9:21 AM</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span>[] ints = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>&#125;;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">kthLargest</span> <span class="hljs-operator">=</span> findKthLargest(ints, <span class="hljs-number">2</span>);<br>    System.out.println(kthLargest);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findKthLargest</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> k)</span> &#123;<br>    <span class="hljs-keyword">if</span> (k == <span class="hljs-number">0</span> || arr.length == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// 最后一个参数表示我们要找的是下标为k-1的数</span><br>    <span class="hljs-type">int</span>[] ints = quickSearch(arr, <span class="hljs-number">0</span>, arr.length - <span class="hljs-number">1</span>, k - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> ints[k - <span class="hljs-number">1</span>];<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] quickSearch(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> lo, <span class="hljs-type">int</span> hi, <span class="hljs-type">int</span> k) &#123;<br>    <span class="hljs-comment">// 每快排切分1次，找到排序后下标为j的元素，如果j恰好等于k就返回j以及j左边所有的数；</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> getPartition(nums, lo, hi);<br>    <span class="hljs-keyword">if</span> (j == k) &#123;<br>      <span class="hljs-keyword">return</span> Arrays.copyOf(nums, j + <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-comment">// 否则根据下标j与k的大小关系来决定继续切分左段还是右段。</span><br>    <span class="hljs-keyword">return</span> j &gt; k ? quickSearch(nums, lo, j - <span class="hljs-number">1</span>, k) : quickSearch(nums, j + <span class="hljs-number">1</span>, hi, k);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getPartition</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">splitNumber</span> <span class="hljs-operator">=</span> nums[start];<br>    <span class="hljs-keyword">while</span> (start &lt; end) &#123;<br>      <span class="hljs-keyword">while</span> (start &lt; end &amp;&amp; splitNumber &gt;= nums[end]) &#123;<br>        end--;<br>      &#125;<br>      swap(nums, start, end);<br>      <span class="hljs-keyword">while</span> (start &lt; end &amp;&amp; splitNumber &lt;= nums[start]) &#123;<br>        start++;<br>      &#125;<br>      swap(nums, start, end);<br>    &#125;<br>    <span class="hljs-keyword">return</span> start;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">tmpVal</span> <span class="hljs-operator">=</span> nums[left];<br>    nums[left] = nums[right];<br>    nums[right] = tmpVal;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
      <category>剑指Offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序算法总结</title>
    <link href="/2022/05/09/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <url>/2022/05/09/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>java中提供的Arrays.sort方法对于基础类型的排序的底层实现就是采用的快速排序方法.</p> <figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 骆佳俊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/5/9 7:48 AM</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QuickSort</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span> array[] = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">14</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>&#125;;<br>    System.out.println(<span class="hljs-string">&quot;排序前序列为：&quot;</span>);<br>    printArray(array);<br>    quickSort(array, <span class="hljs-number">0</span>, array.length - <span class="hljs-number">1</span>);<br>    System.out.println(<span class="hljs-string">&quot;排序后序列为：&quot;</span>);<br>    printArray(array);<br>  &#125;<br><br>  <span class="hljs-comment">// 快速排序算法</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span> array[], <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<br>    <span class="hljs-keyword">if</span> (start &lt; end) &#123;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">partition</span> <span class="hljs-operator">=</span> partition(array, start, end);<br>      <span class="hljs-comment">/**</span><br><span class="hljs-comment">       * 注意： 这要+1 和 -1</span><br><span class="hljs-comment">       *</span><br><span class="hljs-comment">       * &lt;p&gt;因为我们的初始化splitNumber 的值是 array[start] 所以这个start特别关键.</span><br><span class="hljs-comment">       *</span><br><span class="hljs-comment">       * &lt;p&gt;如果我们每次start一样的话，就无法就行 区分 左右。 对 partition;</span><br><span class="hljs-comment">       */</span><br>      quickSort(array, partition + <span class="hljs-number">1</span>, end);<br>      quickSort(array, start, partition - <span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/** 分区操作 */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">partition</span><span class="hljs-params">(<span class="hljs-type">int</span> array[], <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">splitNumber</span> <span class="hljs-operator">=</span> array[start];<br>    <span class="hljs-keyword">while</span> (start &lt; end) &#123;<br>      <span class="hljs-comment">/** 注意这里是&lt;= 否则会造成死循环 */</span><br>      <span class="hljs-keyword">while</span> (start &lt; end &amp;&amp; splitNumber &lt;= array[end]) &#123;<br>        end--;<br>      &#125;<br>      swap(array, start, end);<br>      <span class="hljs-comment">/** 注意这里是&gt;= */</span><br>      <span class="hljs-keyword">while</span> (start &lt; end &amp;&amp; splitNumber &gt;= array[start]) &#123;<br>        start++;<br>      &#125;<br>      swap(array, start, end);<br>    &#125;<br>    <span class="hljs-keyword">return</span> start;<br>  &#125;<br><br>  <span class="hljs-comment">// 交换序列中元素</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> array[], <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> array[i];<br>    array[i] = array[j];<br>    array[j] = temp;<br>  &#125;<br><br>  <span class="hljs-comment">// 打印序列中元素</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printArray</span><span class="hljs-params">(<span class="hljs-type">int</span> array[])</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> array.length;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>      <span class="hljs-keyword">if</span> (i != length - <span class="hljs-number">1</span>) &#123;<br>        System.out.print(array[i] + <span class="hljs-string">&quot; &quot;</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        System.out.println(array[i]);<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>topK</title>
    <link href="/2022/05/08/topK/"/>
    <url>/2022/05/08/topK/</url>
    
    <content type="html"><![CDATA[<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路:"></a>解题思路:</h3><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><h5 id="全量排序"><a href="#全量排序" class="headerlink" title="全量排序"></a>全量排序</h5><p>但是结果发现效率不高</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 骆佳俊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/5/9 7:37 AM</span><br><span class="hljs-comment"> *     &lt;p&gt;运行结果</span><br><span class="hljs-comment"> *     &lt;p&gt;执行用时： 31 ms , 在所有 Java 提交中击败了 8.13% 的用户</span><br><span class="hljs-comment"> *     &lt;p&gt;内存消耗： 41.6 MB , 在所有 Java 提交中击败了 32.63% 的用户</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span>[] ints = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>&#125;;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">kthLargest</span> <span class="hljs-operator">=</span> findKthLargest(ints, <span class="hljs-number">2</span>);<br>    System.out.println(kthLargest);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findKthLargest</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> k)</span> &#123;<br>    quickSort(nums, <span class="hljs-number">0</span>, nums.length - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> nums[k - <span class="hljs-number">1</span>];<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<br>    <span class="hljs-keyword">if</span> (start &lt; end) &#123;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">partition</span> <span class="hljs-operator">=</span> getPartition(nums, start, end);<br>      quickSort(nums, partition + <span class="hljs-number">1</span>, end);<br>      quickSort(nums, start, partition - <span class="hljs-number">1</span>);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getPartition</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">splitNumber</span> <span class="hljs-operator">=</span> nums[start];<br>    <span class="hljs-keyword">while</span> (start &lt; end) &#123;<br>      <span class="hljs-keyword">while</span> (start &lt; end &amp;&amp; splitNumber &gt;= nums[end]) &#123;<br>        end--;<br>      &#125;<br>      swap(nums, start, end);<br>      <span class="hljs-keyword">while</span> (start &lt; end &amp;&amp; splitNumber &lt;= nums[start]) &#123;<br>        start++;<br>      &#125;<br>      swap(nums, start, end);<br>    &#125;<br>    <span class="hljs-keyword">return</span> start;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">tmpVal</span> <span class="hljs-operator">=</span> nums[left];<br>    nums[left] = nums[right];<br>    nums[right] = tmpVal;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>注意</strong>找前 K 大&#x2F;前 K 小问题不需要对整个数组进行 O(NlogN)<em>O</em>(<em>N<strong>l</strong>o<strong>g</strong>N</em>) 的排序！</p><h5 id="局部快排"><a href="#局部快排" class="headerlink" title="局部快排"></a>局部快排</h5><p>思想：快排的每一次partition返回的是一个下标，这个下标左边所有的元素小于下标元素，右边的大于下标元素，因此我们只需要在递归时找到下标为k的就能直接返回了，如果下标大于k，那么递归左边，如果下标小于k，那么递归右边； 最坏时间复杂度是O(N²)，平均时间复杂度是O(N)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] getLeastNumbers(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> k) &#123;<br>        <span class="hljs-keyword">if</span> (k == <span class="hljs-number">0</span> || arr.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>        &#125;<br>        <span class="hljs-comment">// 最后一个参数表示我们要找的是下标为k-1的数</span><br>        <span class="hljs-keyword">return</span> quickSearch(arr, <span class="hljs-number">0</span>, arr.length - <span class="hljs-number">1</span>, k - <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] quickSearch(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> lo, <span class="hljs-type">int</span> hi, <span class="hljs-type">int</span> k) &#123;<br>        <span class="hljs-comment">// 每快排切分1次，找到排序后下标为j的元素，如果j恰好等于k就返回j以及j左边所有的数；</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> partition(nums, lo, hi);<br>        <span class="hljs-keyword">if</span> (j == k) &#123;<br>            <span class="hljs-keyword">return</span> Arrays.copyOf(nums, j + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-comment">// 否则根据下标j与k的大小关系来决定继续切分左段还是右段。</span><br>        <span class="hljs-keyword">return</span> j &gt; k? quickSearch(nums, lo, j - <span class="hljs-number">1</span>, k): quickSearch(nums, j + <span class="hljs-number">1</span>, hi, k);<br>    &#125;<br><br>    <span class="hljs-comment">// 快排切分，返回下标j，使得比nums[j]小的数都在j的左边，比nums[j]大的数都在j的右边。</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">partition</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> lo, <span class="hljs-type">int</span> hi)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> nums[lo];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> lo, j = hi + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">while</span> (++i &lt;= hi &amp;&amp; nums[i] &lt; v);<br>            <span class="hljs-keyword">while</span> (--j &gt;= lo &amp;&amp; nums[j] &gt; v);<br>            <span class="hljs-keyword">if</span> (i &gt;= j) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> nums[j];<br>            nums[j] = nums[i];<br>            nums[i] = t;<br>        &#125;<br>        nums[lo] = nums[j];<br>        nums[j] = v;<br>        <span class="hljs-keyword">return</span> j;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><p><a href="https://leetcode-cn.com/problems/zui-xiao-de-kge-shu-lcof/solution/3chong-jie-fa-miao-sha-topkkuai-pai-dui-er-cha-sou/#%E4%BA%8C%E3%80%81%E5%A4%A7%E6%A0%B9%E5%A0%86%E5%89%8D-k-%E5%B0%8F-/-%E5%B0%8F%E6%A0%B9%E5%A0%86%EF%BC%88%E5%89%8D-k-%E5%A4%A7,java%E4%B8%AD%E6%9C%89%E7%8E%B0%E6%88%90%E7%9A%84-priorityqueue%EF%BC%8C%E5%AE%9E%E7%8E%B0%E8%B5%B7%E6%9D%A5%E6%9C%80%E7%AE%80%E5%8D%95%EF%BC%9A">大根堆(前 K 小) &#x2F; 小根堆（前 K 大),Java中有现成的 PriorityQueue，实现起来最简单：</a></p><p>前置知识铺垫：</p><p>PriorityQueue<code>和</code>Queue<code>的区别在于，它的出队顺序与元素的优先级有关，对</code>PriorityQueue<code>调用</code>remove()<code>或</code>poll()&#96;方法，返回的总是优先级最高的元素。</p><p>这个代码可以说是巨简单了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span>[] arr = &#123;<br>      <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">4</span>, <span class="hljs-number">213</span>, <span class="hljs-number">12</span>, <span class="hljs-number">312</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">456</span>, <span class="hljs-number">6</span>, <span class="hljs-number">45</span>, <span class="hljs-number">87</span>, <span class="hljs-number">76</span>, <span class="hljs-number">867</span>, <span class="hljs-number">867</span>, <span class="hljs-number">8</span>, <span class="hljs-number">768</span>, <span class="hljs-number">76</span>, <span class="hljs-number">867</span>, <span class="hljs-number">8</span><br>    &#125;;<br>    <span class="hljs-type">int</span>[] leastNumbers = getLeastNumbers(arr, <span class="hljs-number">2</span>);<br>    System.out.println(leastNumbers);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] getLeastNumbers(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> k) &#123;<br>    <span class="hljs-keyword">if</span> (k == <span class="hljs-number">0</span> || arr.length == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>    &#125;<br>    <span class="hljs-comment">// 默认是小根堆，实现大根堆需要重写一下比较器。</span><br>    Queue&lt;Integer&gt; pq = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;((v1, v2) -&gt; v2 - v1);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : arr) &#123;<br>      <span class="hljs-keyword">if</span> (pq.size() &lt; k) &#123;<br>        pq.offer(num);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num &lt; pq.peek()) &#123;<br>        pq.poll();<br>        pq.offer(num);<br>      &#125;<br>    &#125;<br>    <span class="hljs-type">int</span>[] ints = pq.stream().mapToInt(Integer::intValue).toArray();<br>    <span class="hljs-keyword">return</span> ints;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h4><p> <a href="https://leetcode-cn.com/problems/zui-xiao-de-kge-shu-lcof/solution/3chong-jie-fa-miao-sha-topkkuai-pai-dui-er-cha-sou">二叉搜索树也可以 解决 TopK 问题</a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">等待补充<br></code></pre></td></tr></table></figure><h4 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h4><p> <a href="https://leetcode-cn.com/problems/zui-xiao-de-kge-shu-lcof/solution/3chong-jie-fa-miao-sha-topkkuai-pai-dui-er-cha-sou/#%E5%9B%9B%E3%80%81%E6%95%B0%E6%8D%AE%E8%8C%83%E5%9B%B4%E6%9C%89%E9%99%90%E6%97%B6%E7%9B%B4%E6%8E%A5%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F%E5%B0%B1%E8%A1%8C%E4%BA%86%EF%BC%9A">数据范围有限时直接计数排序就行了</a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">等待补充<br></code></pre></td></tr></table></figure><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><ol><li><a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array/">215. 数组中的第K个最大元素</a></li></ol><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://leetcode-cn.com/problems/zui-xiao-de-kge-shu-lcof/solution/3chong-jie-fa-miao-sha-topkkuai-pai-dui-er-cha-sou/">4种解法秒杀TopK（快排&#x2F;堆&#x2F;二叉搜索树&#x2F;计数排序）❤️</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
      <category>topk</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指Offer26.树的子结构</title>
    <link href="/2022/05/08/%E5%89%91%E6%8C%87Offer26-%E6%A0%91%E7%9A%84%E5%AD%90%E7%BB%93%E6%9E%84/"/>
    <url>/2022/05/08/%E5%89%91%E6%8C%87Offer26-%E6%A0%91%E7%9A%84%E5%AD%90%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h4 id="剑指-Offer-26-树的子结构"><a href="#剑指-Offer-26-树的子结构" class="headerlink" title="剑指 Offer 26. 树的子结构"></a><a href="https://leetcode-cn.com/problems/shu-de-zi-jie-gou-lcof/">剑指 Offer 26. 树的子结构</a></h4><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs java">执行用时：<span class="hljs-number">0</span> ms, 在所有 Java 提交中击败了<span class="hljs-number">100.00</span>%的用户<br>内存消耗：<span class="hljs-number">43.9</span> MB, 在所有 Java 提交中击败了<span class="hljs-number">9.74</span>%的用户<br></code></pre></td></tr></table></figure><p>因为使用的是dfs所以整一个内存的开销比较大。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> com.roger.leetcodejava.TreeNode;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 骆佳俊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/5/8 10:53 AM</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-comment">/** 约定空树不是任意一个树的子结构 */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isSubStructure</span><span class="hljs-params">(TreeNode A, TreeNode B)</span> &#123;<br>    <span class="hljs-keyword">if</span> (A == <span class="hljs-literal">null</span> || B == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dfs(A, B) || isSubStructure(A.left, B) || isSubStructure(A.right, B);<br>  &#125;<br><br>  <span class="hljs-comment">/** 以下代码太精髓了! */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode A, TreeNode B)</span> &#123;<br>    <span class="hljs-keyword">if</span> (B == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (A == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注意！:</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * &lt;p&gt;1. 这里是&amp;&amp; 而不是 ||</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * &lt;p&gt;2. 然后是左右子树分别去进行比对。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">return</span> A.val == B.val &amp;&amp; dfs(A.left, B.left) &amp;&amp; dfs(A.right, B.right);<br>  &#125;<br><br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">treeNodeA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-number">3</span>);<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">treeNodeB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-number">4</span>);<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">treeNodeC</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-number">5</span>);<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">treeNodeD</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">treeNodeE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-number">2</span>);<br>    treeNodeA.left = treeNodeB;<br>    treeNodeA.right = treeNodeC;<br>    treeNodeB.left = treeNodeD;<br>    treeNodeB.right = treeNodeE;<br><br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">treeNodeF</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-number">4</span>);<br>    <span class="hljs-type">TreeNode</span> <span class="hljs-variable">treeNodeG</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(<span class="hljs-number">1</span>);<br>    treeNodeF.left = treeNodeG;<br><br>    System.out.println(isSubStructure(treeNodeA, treeNodeF));<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
      <category>剑指Offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指Offer16.数值的整数次方</title>
    <link href="/2022/05/07/%E5%89%91%E6%8C%87Offer16-%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/"/>
    <url>/2022/05/07/%E5%89%91%E6%8C%87Offer16-%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E6%AC%A1%E6%96%B9/</url>
    
    <content type="html"><![CDATA[<h4 id="剑指-Offer-16-数值的整数次方"><a href="#剑指-Offer-16-数值的整数次方" class="headerlink" title="剑指 Offer 16. 数值的整数次方"></a><a href="https://leetcode-cn.com/problems/shu-zhi-de-zheng-shu-ci-fang-lcof/">剑指 Offer 16. 数值的整数次方</a></h4><p>解决方案1: 递归法</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.roger.leetcodejava.jianzhi.solution_16.logN的解法;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 骆佳俊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/5/7 7:56 AM</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(myPow(<span class="hljs-number">0.44528</span>, <span class="hljs-number">0</span>));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 因为 x^72次 = x^36 * x ^ 36 所以是一个递归的解决方案.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * &lt;p&gt;然后我们通过奇 和 偶 进行递归.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">myPow</span><span class="hljs-params">(<span class="hljs-type">double</span> x, <span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-comment">/** 处理异常case */</span><br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> n;<br>        <span class="hljs-keyword">return</span> N &gt;= <span class="hljs-number">0</span> ? quickMul(x, N) : <span class="hljs-number">1.0</span> / quickMul(x, -N);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">quickMul</span><span class="hljs-params">(<span class="hljs-type">double</span> x, <span class="hljs-type">long</span> N)</span> &#123;<br>        <span class="hljs-keyword">if</span> (N == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> x;<br>        &#125;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> quickMul(x, N / <span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">return</span> N % <span class="hljs-number">2</span> == <span class="hljs-number">1</span> ? result * result * x : result * result;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>弊端:</p><ol><li>因为使用递归其实是会使用额外的栈空间。</li></ol><p>解决方法二: 迭代法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.roger.leetcodejava.jianzhi.solution_16.迭代;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 骆佳俊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/5/8 9:07 AM</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 实现 类似 Math.pow函数 这个递归搞不明白哭</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> x</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> n</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">myPow</span><span class="hljs-params">(<span class="hljs-type">double</span> x, <span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-comment">/** 异常case判断 */</span><br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">double</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-type">double</span> <span class="hljs-variable">currentMul</span> <span class="hljs-operator">=</span> x;<br>    <span class="hljs-keyword">while</span> (n &gt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">if</span> (n % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">/* 个人这地方理解难 */</span> <br>        result *= currentMul;<br>      &#125;<br>      currentMul *= currentMul;<br>      n = n &gt;&gt; <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>  &#125;<br><br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(myPow(<span class="hljs-number">2</span>, <span class="hljs-number">10</span>));<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>个人感觉这个迭代比较难理解。</p>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
      <category>剑指Offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>动态代理是基于什么原理</title>
    <link href="/2022/05/06/%E9%9D%A2%E8%AF%95%E5%AE%98-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%98%AF%E5%9F%BA%E4%BA%8E%E4%BB%80%E4%B9%88%E5%8E%9F%E7%90%86/"/>
    <url>/2022/05/06/%E9%9D%A2%E8%AF%95%E5%AE%98-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E6%98%AF%E5%9F%BA%E4%BA%8E%E4%BB%80%E4%B9%88%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Java是静态的强类型语言，因为提供了反射等机制，也具备了动态类型语言的能力。</p><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><h4 id="一句话概括"><a href="#一句话概括" class="headerlink" title="一句话概括"></a>一句话概括</h4><h4 id="来说就是你玩游戏，你找个代练，代练替你打游戏这就带代理模式。"><a href="#来说就是你玩游戏，你找个代练，代练替你打游戏这就带代理模式。" class="headerlink" title="来说就是你玩游戏，你找个代练，代练替你打游戏这就带代理模式。"></a>来说就是你玩游戏，你找个代练，代练替你打游戏这就带代理模式。</h4><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li>职责清晰</li><li>高拓展性</li><li>智能化</li></ol><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ol><li>Spring AOP</li></ol><h4 id="撸代码"><a href="#撸代码" class="headerlink" title="撸代码"></a>撸代码</h4><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IGamePlayer</span> &#123;<br>  <span class="hljs-comment">// 登陆</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">login</span><span class="hljs-params">(String user, String password)</span>;<br>  <span class="hljs-comment">// 杀怪</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">killBoss</span><span class="hljs-params">()</span>;<br>  <span class="hljs-comment">// 升级</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">upgrade</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GamePlayer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IGamePlayer</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">GamePlayer</span><span class="hljs-params">(String name)</span> &#123;<br>    <span class="hljs-built_in">this</span>.name = name;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">login</span><span class="hljs-params">(String user, String password)</span> &#123;<br>    System.out.println(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot;登陆&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">killBoss</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot;杀Boss&quot;</span>);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">upgrade</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot;升级&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GamePlayerProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IGamePlayer</span> &#123;<br>  <span class="hljs-comment">/** 通过构造函数传递要对谁进行代练 */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">IGamePlayer</span> <span class="hljs-variable">gamePlayer</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">GamePlayerProxy</span><span class="hljs-params">(IGamePlayer _gamePlayer)</span> &#123;<br>    <span class="hljs-built_in">this</span>.gamePlayer = _gamePlayer;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">killBoss</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>.gamePlayer.killBoss();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">login</span><span class="hljs-params">(String user, String password)</span> &#123;<br>    <span class="hljs-built_in">this</span>.gamePlayer.login(user, password);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">upgrade</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>.gamePlayer.upgrade();<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    <span class="hljs-comment">// 定义一个痴迷的玩家</span><br>    <span class="hljs-type">IGamePlayer</span> <span class="hljs-variable">player</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GamePlayer</span>(<span class="hljs-string">&quot;张三&quot;</span>);<br><br>    <span class="hljs-type">IGamePlayer</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GamePlayerProxy</span>(player);<br>    <span class="hljs-comment">// 开始打游戏，记下时间戳</span><br>    System.out.println(<span class="hljs-string">&quot;开始时间是:2009-8-25 10:45&quot;</span>);<br><br>    proxy.login(<span class="hljs-string">&quot;zhangSan&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>);<br>    <span class="hljs-comment">// 开始杀怪</span><br>    proxy.killBoss();<br>    <span class="hljs-comment">// 升级</span><br>    proxy.upgrade();<br>    <span class="hljs-comment">// 记录结束游戏时间</span><br>    System.out.println(<span class="hljs-string">&quot;结束时间是:2009-8-26 03:40&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码很简单地实现了一个 代理模式的case (以玩家找代练)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">开始时间是:<span class="hljs-number">2009</span>-<span class="hljs-number">8</span>-<span class="hljs-number">25</span> <span class="hljs-number">10</span>:<span class="hljs-number">45</span><br>张三登陆<br>张三杀Boss<br>张三升级<br>结束时间是:<span class="hljs-number">2009</span>-<span class="hljs-number">8</span>-<span class="hljs-number">26</span> <span class="hljs-number">03</span>:<span class="hljs-number">40</span><br></code></pre></td></tr></table></figure><h3 id="代理模式的拓展"><a href="#代理模式的拓展" class="headerlink" title="代理模式的拓展"></a>代理模式的拓展</h3><h4 id="普通代理"><a href="#普通代理" class="headerlink" title="普通代理"></a>普通代理</h4><h4 id="强制代理"><a href="#强制代理" class="headerlink" title="强制代理"></a>强制代理</h4><p>比如你知道了一个明星的电话方式，但是偏偏得要找到她的经纪人才行，这个就是强制代理。</p><h3 id="什么是反射"><a href="#什么是反射" class="headerlink" title="什么是反射"></a>什么是反射</h3><p>运行时得到这个某个对象的类型.</p><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><h3 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h3><h3 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h3><h3 id="cglib动态代理"><a href="#cglib动态代理" class="headerlink" title="cglib动态代理"></a>cglib动态代理</h3>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>todo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试官:String、StringBuffer、StringBuilder有什么区别</title>
    <link href="/2022/05/06/%E9%9D%A2%E8%AF%95%E5%AE%98-String%E3%80%81StringBuffer%E3%80%81StringBuilder%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/05/06/%E9%9D%A2%E8%AF%95%E5%AE%98-String%E3%80%81StringBuffer%E3%80%81StringBuilder%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><table><thead><tr><th>类型</th><th>特点</th><th>使用场景</th></tr></thead><tbody><tr><td>String</td><td>是<strong>Immutable</strong>的,然后它的类名是final修饰的,属性都是final. 然后因为我们经常要去操作比如修改或者增加String的内容所以我们会用到下面介绍的StringBuffer以及StringBuilder.</td><td>1. 常量的声明 <br />2.<strong>少量</strong>字符串的拼接，一定要避免使用+操作去拼接字符串,因为这样会有大量的无用中间对象，耗费空间并且执行效率低下(新建对象、回收对象需要大量的时间)</td></tr><tr><td>StringBuffer</td><td>首先基于Synchronized是<strong>线程安全</strong>的,导致有额外的性能开销所以一般推荐使用StringBuilder.</td><td><strong>多线程环境</strong> ,比如XML的解析、HTTP参数的解析</td></tr><tr><td>StringBuilder</td><td><strong>线程不安全</strong>,但是是首选的.</td><td><strong>单线程环境</strong>,SQL语句的拼接还有JSON的封装</td></tr></tbody></table><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://time.geekbang.org/column/article/7349">String、StringBuffer、StringBuilder有什么区别？</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试官:请说说你理解中java的引用</title>
    <link href="/2022/05/06/%E9%9D%A2%E8%AF%95%E5%AE%98-%E8%AF%B7%E8%AF%B4%E8%AF%B4%E4%BD%A0%E7%90%86%E8%A7%A3%E4%B8%ADjava%E7%9A%84%E5%BC%95%E7%94%A8/"/>
    <url>/2022/05/06/%E9%9D%A2%E8%AF%95%E5%AE%98-%E8%AF%B7%E8%AF%B4%E8%AF%B4%E4%BD%A0%E7%90%86%E8%A7%A3%E4%B8%ADjava%E7%9A%84%E5%BC%95%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在Java中除了基本的数据类型之外，其他的都是指向各个对象的对象引用; Java中会根据其生命周期的长短，将引用分为4类.</p><h3 id="引用的类型"><a href="#引用的类型" class="headerlink" title="引用的类型"></a>引用的类型</h3><table><thead><tr><th>引用类型</th><th>特点</th><th>应用场景</th></tr></thead><tbody><tr><td>强引用</td><td>我们平时的编码中,比如 Object obj &#x3D; new Object,这个就是显示的强引用，当JVM内存不足的时候如果想进行垃圾回收，宁可抛出OOM也不会对这部分的强引用做垃圾回收.我们可以在将Object obj &#x3D; null来将个obj进行垃圾回收.</td><td></td></tr><tr><td>软引用</td><td>是通过softReference实现的,比强引用的生命周期要短,当我们JVM内存不足的时候会对这个软引用的对象进行垃圾回收,并且可以配合 ReferenceQueue(后文中统一称为queue)联合使用,当我们对queue进行poll的时候如果是null,否则就是引用对象</td><td>可以用于实现内存敏感的缓存.</td></tr><tr><td>弱引用</td><td>是通过weakReference实现的,比软引用的生命周期还要短,当我们JVM进行GC的时候会优先把弱引用的对象来进行GC.这个要可以配合queue进行。</td><td>内存敏感的缓存.</td></tr><tr><td>虚引用(幻想引用)</td><td>是通过PhantomReference类实现的,无法通过虚引用来访问对象的任何属性以及函数,虚引用仅仅是提供了一种保证对象被finalize后,做某些事情的机制,如果一个对象仅仅被虚引用的话,那么它和没有任何被引用一样,在任何时候都有可能被GC,虚引用必须和queue联合使用,当GC准备回收一个对象的时候,如果发现它还有虚引用,就会在回收内存对象之前，把这个虚引用加入到与之关联的引用队列中,程序可以判断queue中是否已经加入了虚引用来,了解对象是否将要被GC如果发现程序可以当在被回收之前进行相应的处理。</br> ReferenceQueue queue &#x3D; new ReferenceQueue (); PhantomReference pr &#x3D; new PhantomReference (object, queue);</td><td>用于追踪gc，可以在程序被GC前通知用户.</td></tr></tbody></table><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ol><li><a href="https://time.geekbang.org/column/article/6970">引用的特点和应用场景</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指Offer66.构建乘积数组</title>
    <link href="/2022/05/06/%E5%89%91%E6%8C%87Offer66-%E6%9E%84%E5%BB%BA%E4%B9%98%E7%A7%AF%E6%95%B0%E7%BB%84/"/>
    <url>/2022/05/06/%E5%89%91%E6%8C%87Offer66-%E6%9E%84%E5%BB%BA%E4%B9%98%E7%A7%AF%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/gou-jian-cheng-ji-shu-zu-lcof/">剑指 Offer 66. 构建乘积数组🔗</a><br>先直接来一个错误解决方法:</p><p>该错误的解决方法的时间复杂度为O(n^2)</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 骆佳俊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/5/6 7:37 AM</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span>[] ints = constructArr(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;);<br>        System.out.println(ints);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当前算法时间复杂度为n^2.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> a</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] constructArr(<span class="hljs-type">int</span>[] a) &#123;<br>        <span class="hljs-type">int</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[a.length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a.length; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">currentMulti</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; a.length; j++) &#123;<br>                <span class="hljs-keyword">if</span> (j != i) &#123;<br>                    currentMulti *= a[j];<br>                &#125;<br>            &#125;<br>            result[i] = currentMulti;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上正解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 骆佳俊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/5/6 7:45 AM</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span>[] ints = constructArr(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;);<br>        System.out.println(ints);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 这里采用了2个for循环 时间复杂度只有O(n);空间复杂度只有个常量级别的所以是O(1);</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> a</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] constructArr(<span class="hljs-type">int</span>[] a) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">inputLength</span> <span class="hljs-operator">=</span> a.length;<br>        <span class="hljs-type">int</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[inputLength];<br>        <span class="hljs-comment">/** 把每个result[i]左边的乘集得到 */</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, product = <span class="hljs-number">1</span>; i &lt; inputLength; product *= a[i], i++) &#123;<br>            result[i] = product;<br>        &#125;<br>        <span class="hljs-comment">/** 我的疑问: 为什么上面是=product 下面这里是*=product. */</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> inputLength - <span class="hljs-number">1</span>, product = <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; product *= a[i], i--) &#123;<br>            result[i] *= product;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
      <category>剑指Offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么你的maven打包老是出现问题</title>
    <link href="/2022/05/05/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%90%E8%A1%8C%E7%9A%84%E6%97%B6%E5%80%99%E5%A5%BD%E5%A5%BD%E7%9A%84-maven%E4%B8%80%E6%89%93%E5%8C%85%E5%B0%B1%E4%B8%A2%E5%A4%B1%E7%B1%BB/"/>
    <url>/2022/05/05/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%90%E8%A1%8C%E7%9A%84%E6%97%B6%E5%80%99%E5%A5%BD%E5%A5%BD%E7%9A%84-maven%E4%B8%80%E6%89%93%E5%8C%85%E5%B0%B1%E4%B8%A2%E5%A4%B1%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h3 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h3><h4 id="项目层级和IDEA设置介绍"><a href="#项目层级和IDEA设置介绍" class="headerlink" title="项目层级和IDEA设置介绍:"></a>项目层级和IDEA设置介绍:</h4><p>多模块的目录层级为<br><img src="https://eshop-photo1.oss-cn-beijing.aliyuncs.com/blog/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%90%E8%A1%8C%E7%9A%84%E6%97%B6%E5%80%99%E5%A5%BD%E5%A5%BD%E7%9A%84-maven%E4%B8%80%E6%89%93%E5%8C%85%E5%B0%B1%E4%B8%A2%E5%A4%B1%E7%B1%BB/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%90%E8%A1%8C%E7%9A%84%E6%97%B6%E5%80%99%E5%A5%BD%E5%A5%BD%E7%9A%84-maven%E4%B8%80%E6%89%93%E5%8C%85%E5%B0%B1%E4%B8%A2%E5%A4%B1%E7%B1%BB/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt="多模块的目录层级"><br>可以看到有3个子模块，分别是dnm-business、dnm-ess4j、dnm-web. IDEA中也设置了:</p><p><img src="https://eshop-photo1.oss-cn-beijing.aliyuncs.com/blog/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%90%E8%A1%8C%E7%9A%84%E6%97%B6%E5%80%99%E5%A5%BD%E5%A5%BD%E7%9A%84-maven%E4%B8%80%E6%89%93%E5%8C%85%E5%B0%B1%E4%B8%A2%E5%A4%B1%E7%B1%BB/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%90%E8%A1%8C%E7%9A%84%E6%97%B6%E5%80%99%E5%A5%BD%E5%A5%BD%E7%9A%84-maven%E4%B8%80%E6%89%93%E5%8C%85%E5%B0%B1%E4%B8%A2%E5%A4%B1%E7%B1%BB/IDEA%E9%80%92%E5%BD%92%E8%AE%BE%E7%BD%AE.png" alt="IDEA的设置"></p><h3 id="我的操作"><a href="#我的操作" class="headerlink" title="我的操作"></a>我的操作</h3><p>点击了下的clean 然后install. 然后dnm-web下的taget文件目录中运行了java -jar后的运行结果如图：<br><img src="https://eshop-photo1.oss-cn-beijing.aliyuncs.com/blog/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%90%E8%A1%8C%E7%9A%84%E6%97%B6%E5%80%99%E5%A5%BD%E5%A5%BD%E7%9A%84-maven%E4%B8%80%E6%89%93%E5%8C%85%E5%B0%B1%E4%B8%A2%E5%A4%B1%E7%B1%BB/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%90%E8%A1%8C%E7%9A%84%E6%97%B6%E5%80%99%E5%A5%BD%E5%A5%BD%E7%9A%84-maven%E4%B8%80%E6%89%93%E5%8C%85%E5%B0%B1%E4%B8%A2%E5%A4%B1%E7%B1%BB/%E8%BF%90%E8%A1%8C%E9%94%99%E8%AF%AF%E6%88%AA%E5%9B%BE.png" alt="运行结果"><br>总而言之不是缺这个就是缺那个.但是打包是正常的.</p><p>有个项目是多module进行打包的,打包后发现不是这里缺一个类，就是那边一个依赖没有打包完全。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>使用了maven Helper这个IDEA的插件,只要简单地进行对于标红的冲突依赖进行exclude即可，最后重新clean-package.<br><img src="https://eshop-photo1.oss-cn-beijing.aliyuncs.com/blog/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%90%E8%A1%8C%E7%9A%84%E6%97%B6%E5%80%99%E5%A5%BD%E5%A5%BD%E7%9A%84-maven%E4%B8%80%E6%89%93%E5%8C%85%E5%B0%B1%E4%B8%A2%E5%A4%B1%E7%B1%BB/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%90%E8%A1%8C%E7%9A%84%E6%97%B6%E5%80%99%E5%A5%BD%E5%A5%BD%E7%9A%84-maven%E4%B8%80%E6%89%93%E5%8C%85%E5%B0%B1%E4%B8%A2%E5%A4%B1%E7%B1%BB/%E6%9C%80%E7%BB%88pom.xml%E6%B2%A1%E6%9C%89%E5%86%B2%E7%AA%81.png" alt="最终的pom.xml依赖树"></li><li>也可以通过 mvn dependency:tree -Dverbose -includes&#x3D;gid:aid看看所依赖的版本和实际用的版本对不对，gid:aid换成这个依赖的ga信息<br>例如:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs Java">➜  target mvn dependency:tree -Dverbose -Dincludes=io.springfox:springfox-boot-starter<br></code></pre></td></tr></table></figure><h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><p><img src="https://eshop-photo1.oss-cn-beijing.aliyuncs.com/blog/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%90%E8%A1%8C%E7%9A%84%E6%97%B6%E5%80%99%E5%A5%BD%E5%A5%BD%E7%9A%84-maven%E4%B8%80%E6%89%93%E5%8C%85%E5%B0%B1%E4%B8%A2%E5%A4%B1%E7%B1%BB/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%90%E8%A1%8C%E7%9A%84%E6%97%B6%E5%80%99%E5%A5%BD%E5%A5%BD%E7%9A%84-maven%E4%B8%80%E6%89%93%E5%8C%85%E5%B0%B1%E4%B8%A2%E5%A4%B1%E7%B1%BB/%E5%AE%8C%E7%BE%8E%E8%BF%90%E8%A1%8C.png" alt="完美运行"></p>]]></content>
    
    
    <categories>
      
      <category>项目实践</category>
      
      <category>maven</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指Offer30包含min函数的栈</title>
    <link href="/2022/05/05/%E5%89%91%E6%8C%87Offer30%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/"/>
    <url>/2022/05/05/%E5%89%91%E6%8C%87Offer30%E5%8C%85%E5%90%ABmin%E5%87%BD%E6%95%B0%E7%9A%84%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<p>🔗<a href="https://leetcode-cn.com/problems/bao-han-minhan-shu-de-zhan-lcof/">剑指 Offer 30. 包含min函数的栈</a></p><p>通过ArrayList来实现</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 骆佳俊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/5/5 7:10 AM</span><br><span class="hljs-comment"> *     &lt;p&gt;第一版代码</span><br><span class="hljs-comment"> *     &lt;p&gt;执行结果： 通过 显示详情 添加备注</span><br><span class="hljs-comment"> *     &lt;p&gt;执行用时： 110 ms , 在所有 Java 提交中击败了 5.66% 的用户 内存消耗： 43.3 MB , 在所有 Java 提交中击败了 56.68% 的用户</span><br><span class="hljs-comment"> *     通过测试用例： 19 / 19</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MinStack</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MinStack</span> <span class="hljs-variable">minStack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MinStack</span>();<br>        minStack.push(-<span class="hljs-number">2</span>);<br>        minStack.push(<span class="hljs-number">0</span>);<br>        minStack.push(-<span class="hljs-number">3</span>);<br>        System.out.println(minStack.min());<br>        minStack.pop();<br>        System.out.println(minStack.top());<br>        System.out.println(minStack.min());<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ArrayList&lt;Integer&gt; arrayList;<br><br>    <span class="hljs-comment">/** initialize your data structure here. */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MinStack</span><span class="hljs-params">()</span> &#123;<br>        arrayList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        arrayList.add(x);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>        arrayList.remove(arrayList.size() - <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">top</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> arrayList.get(arrayList.size() - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> integer.intValue();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">min</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">minValue</span> <span class="hljs-operator">=</span> arrayList.get(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arrayList.size(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (minValue &gt; arrayList.get(i)) &#123;<br>                minValue = arrayList.get(i);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> minValue;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过 LinkedList 来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.roger.leetcodejava.jianzhi.solution_30.byLinkedList;<br><br><span class="hljs-keyword">import</span> java.util.Deque;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 骆佳俊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/5/5 7:28 AM</span><br><span class="hljs-comment"> *     &lt;p&gt;为什么使用Deque 而不是直接使用Stack</span><br><span class="hljs-comment"> *     &lt;p&gt;首先因为class Stack&lt;E&gt; extends Vector&lt;E&gt; 继承自 Vector</span><br><span class="hljs-comment"> *     &lt;p&gt;Stack作为java语言的栈，是被诟病的地方，作为栈数据结构，却继承了vector，对外暴露了get(index)这样的方法，不是一种合理的实现方式，所以后来java开发提倡使用ArrayDeque</span><br><span class="hljs-comment"> *     &lt;p&gt;另外题目中有要求说调用 min、push 及 pop 的时间复杂度都是O(1) 所以有一个minStack 存放最小值</span><br><span class="hljs-comment"> *     &lt;p&gt;执行用时： 13 ms , 在所有 Java 提交中击败了 63.74% 的用户 内存消耗： 43.5 MB , 在所有 Java 提交中击败了 34.30% 的用户</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MinStack</span> &#123;<br>  <span class="hljs-comment">/** initialize your data structure here. */</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">MinStack</span> <span class="hljs-variable">minStack</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MinStack</span>();<br>    minStack.push(-<span class="hljs-number">2</span>);<br>    minStack.push(<span class="hljs-number">0</span>);<br>    minStack.push(-<span class="hljs-number">3</span>);<br>    System.out.println(minStack.min());<br>    minStack.pop();<br>    System.out.println(minStack.top());<br>    System.out.println(minStack.min());<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> Deque&lt;Integer&gt; xStack;<br><br>  <span class="hljs-keyword">private</span> Deque&lt;Integer&gt; minStack;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">MinStack</span><span class="hljs-params">()</span> &#123;<br>    xStack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    minStack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    minStack.push(Integer.MAX_VALUE);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 这里 Math.min(x,minStack.peek()) 是非常巧妙的 因为如果xStack pop的话 minStack也会同步pop</span><br><span class="hljs-comment">     * 并且保证了minStack的第一个元素是最小的.</span><br><span class="hljs-comment">     */</span><br>    xStack.push(x);<br>    minStack.push(Math.min(x, minStack.peek()));<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span> &#123;<br>    xStack.pop();<br>    minStack.pop();<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">top</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> xStack.peek();<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">min</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> minStack.peek();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
      <category>剑指Offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指Offer33二叉搜索树的后序遍历序列</title>
    <link href="/2022/05/04/%E5%89%91%E6%8C%87Offer33%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97/"/>
    <url>/2022/05/04/%E5%89%91%E6%8C%87Offer33%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 骆佳俊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/5/4 9:46 AM</span><br><span class="hljs-comment"> *     &lt;p&gt;解题思路: 概念介绍: 二叉搜索树: 左子树上的节点的值 小于 根,右子树上的节点的值 大于 根。 如何判断是否跳出递归? left&gt;right? left right end</span><br><span class="hljs-comment"> *     左子树 右子树 根</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> verifyPostorder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>&#125;);<br>    System.out.println(b);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">verifyPostorder</span><span class="hljs-params">(<span class="hljs-type">int</span>[] postorder)</span> &#123;<br>    <span class="hljs-keyword">return</span> mainCore(postorder, <span class="hljs-number">0</span>, postorder.length - <span class="hljs-number">1</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">mainCore</span><span class="hljs-params">(<span class="hljs-type">int</span>[] postOrder, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<br>    <span class="hljs-comment">/** 跳出递归的条件 */</span><br>    <span class="hljs-keyword">if</span> (start &gt; end) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> start;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> postOrder[end];<br>    <span class="hljs-comment">// 找到第一个右子树的节点</span><br>    <span class="hljs-keyword">for</span> (; count &lt; postOrder.length; count++) &#123;<br>      <span class="hljs-keyword">if</span> (postOrder[count] &gt;= head) &#123;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> count; i &lt; end; i++) &#123;<br>      <span class="hljs-keyword">if</span> (postOrder[i] &lt;= head) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">/** mark! 这里的end需要-1 */</span><br>    <span class="hljs-keyword">return</span> mainCore(postOrder, start, count - <span class="hljs-number">1</span>) &amp;&amp; mainCore(postOrder, count, end - <span class="hljs-number">1</span>);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
      <category>剑指Offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>请写出一个死锁的demo</title>
    <link href="/2022/05/04/%E8%AF%B7%E5%86%99%E5%87%BA%E4%B8%80%E4%B8%AA%E6%AD%BB%E9%94%81%E7%9A%84demo/"/>
    <url>/2022/05/04/%E8%AF%B7%E5%86%99%E5%87%BA%E4%B8%80%E4%B8%AA%E6%AD%BB%E9%94%81%E7%9A%84demo/</url>
    
    <content type="html"><![CDATA[<h3 id="先写一个通过Synchronized造成死锁的demo"><a href="#先写一个通过Synchronized造成死锁的demo" class="headerlink" title="先写一个通过Synchronized造成死锁的demo."></a>先写一个通过Synchronized造成死锁的demo.</h3><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SynchronizedTest</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">SynchronizedTest</span> <span class="hljs-variable">synchronizedTest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SynchronizedTest</span>();<br>    synchronizedTest.test();<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">numA</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">numB</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>              <span class="hljs-meta">@Override</span><br>              <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">synchronized</span> (numA) &#123;<br>                  System.out.println(<span class="hljs-string">&quot;AAA&quot;</span>);<br>                  <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">3</span> * <span class="hljs-number">1000</span>);<br>                  &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                  &#125;<br>                  <span class="hljs-keyword">synchronized</span> (numB) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;CCC&quot;</span>);<br>                  &#125;<br>                &#125;<br>              &#125;<br>            &#125;,<br>            <span class="hljs-string">&quot;A&quot;</span>);<br>    a.start();<br><br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>              <span class="hljs-meta">@Override</span><br>              <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">synchronized</span> (numB) &#123;<br>                  System.out.println(<span class="hljs-string">&quot;BBB&quot;</span>);<br>                  <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">3</span> * <span class="hljs-number">1000</span>);<br>                  &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                  &#125;<br>                  <span class="hljs-keyword">synchronized</span> (numA) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;DDD&quot;</span>);<br>                  &#125;<br>                &#125;<br>              &#125;<br>            &#125;,<br>            <span class="hljs-string">&quot;B&quot;</span>);<br>    b.start();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="那么如何感知是否死锁了呢？"><a href="#那么如何感知是否死锁了呢？" class="headerlink" title="那么如何感知是否死锁了呢？"></a>那么如何感知是否死锁了呢？</h3><ol><li>可以通过dump线程</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">➜  ~ jps<br><span class="hljs-number">16342</span> Jps<br><span class="hljs-number">2281</span><br><span class="hljs-number">16169</span> Launcher<br><span class="hljs-number">16170</span> SynchronizedTest<br></code></pre></td></tr></table></figure><p>然后通过jstack发现了以下内容:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Java">Found one Java-level deadlock:<br>=============================<br><span class="hljs-string">&quot;B&quot;</span>:<br>  waiting to lock monitor <span class="hljs-number">0x000000013a80b620</span> (object <span class="hljs-number">0x000000076ab33a68</span>, a java.lang.Integer),<br>  which is held by <span class="hljs-string">&quot;A&quot;</span><br><span class="hljs-string">&quot;A&quot;</span>:<br>  waiting to lock monitor <span class="hljs-number">0x000000013a80deb0</span> (object <span class="hljs-number">0x000000076ab33a78</span>, a java.lang.Integer),<br>  which is held by <span class="hljs-string">&quot;B&quot;</span><br><br>Java stack information <span class="hljs-keyword">for</span> the threads listed above:<br>===================================================<br><span class="hljs-string">&quot;B&quot;</span>:<br>at roger.com.javafundament.deadLock.SynchronizedTest$<span class="hljs-number">2.</span>run(SynchronizedTest.java:<span class="hljs-number">52</span>)<br>- waiting to lock &lt;<span class="hljs-number">0x000000076ab33a68</span>&gt; (a java.lang.Integer)<br>- locked &lt;<span class="hljs-number">0x000000076ab33a78</span>&gt; (a java.lang.Integer)<br>at java.lang.Thread.run(Thread.java:<span class="hljs-number">748</span>)<br><span class="hljs-string">&quot;A&quot;</span>:<br>at roger.com.javafundament.deadLock.SynchronizedTest$<span class="hljs-number">1.</span>run(SynchronizedTest.java:<span class="hljs-number">31</span>)<br>- waiting to lock &lt;<span class="hljs-number">0x000000076ab33a78</span>&gt; (a java.lang.Integer)<br>- locked &lt;<span class="hljs-number">0x000000076ab33a68</span>&gt; (a java.lang.Integer)<br>at java.lang.Thread.run(Thread.java:<span class="hljs-number">748</span>)<br><br>Found <span class="hljs-number">1</span> deadlock.<br></code></pre></td></tr></table></figure><h3 id="避免死锁的几个常见方法"><a href="#避免死锁的几个常见方法" class="headerlink" title="避免死锁的几个常见方法"></a>避免死锁的几个常见方法</h3><p>1避免同一个线程或者多个锁.</p><ol start="2"><li>避免在一个线程在锁内占用多个资源,尽量保证每个锁只占用一个资源.</li><li>尝试使用定时锁,使用lock.tryLock(timeout)来替代内部锁的机制.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SynchronizedTryLockTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">SynchronizedTryLockTest</span> <span class="hljs-variable">synchronizedTest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SynchronizedTryLockTest</span>();<br>        synchronizedTest.test();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lockA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>        <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lockB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            <span class="hljs-keyword">if</span> (lockA.tryLock(<span class="hljs-number">3</span>, TimeUnit.SECONDS)) &#123;<br>                                System.out.println(<span class="hljs-string">&quot;AAA&quot;</span>);<br>                                <span class="hljs-keyword">if</span> (lockB.tryLock(<span class="hljs-number">3</span>, TimeUnit.SECONDS)) &#123;<br>                                    System.out.println(<span class="hljs-string">&quot;BBB&quot;</span>);<br>                                &#125;<br>                            &#125;<br>                        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br>                    &#125;<br>                &#125;)<br>                .start();<br><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                        <span class="hljs-keyword">try</span> &#123;<br>                            <span class="hljs-keyword">if</span> (lockA.tryLock(<span class="hljs-number">3</span>, TimeUnit.SECONDS)) &#123;<br>                                System.out.println(<span class="hljs-string">&quot;CCC&quot;</span>);<br>                                <span class="hljs-keyword">if</span> (lockB.tryLock(<span class="hljs-number">3</span>, TimeUnit.SECONDS)) &#123;<br>                                    System.out.println(<span class="hljs-string">&quot;DDD&quot;</span>);<br>                                &#125;<br>                            &#125;<br>                        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br>                    &#125;<br>                &#125;)<br>                .start();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="4"><li>对于数据库锁,加锁和解锁必须在同一个数据库连接里面,否则会出现解锁失效的情况.</li></ol><h3 id="github-源码链接🔗"><a href="#github-源码链接🔗" class="headerlink" title="github 源码链接🔗"></a>github 源码链接🔗</h3><ol><li><a href="https://github.com/ZuccRoger/JavaFundament/blob/master/src/main/java/roger/com/javafundament/deadLock/SynchronizedTest.java">SynchronizedTest</a></li><li><a href="https://github.com/ZuccRoger/JavaFundament/blob/master/src/main/java/roger/com/javafundament/deadLock/SynchronizedTryLockTest.java">SynchronizedTryLockTest</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指Offer32.3从上到下打印二叉树</title>
    <link href="/2022/05/04/%E5%89%91%E6%8C%87Offer32-3%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2022/05/04/%E5%89%91%E6%8C%87Offer32-3%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/">题目链接</a></p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">levelOrder</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    ArrayList&lt;List&lt;Integer&gt;&gt; resultList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-comment">/** 空树 */</span><br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> resultList;<br>    &#125;<br>    LinkedList&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    queue.add(root);<br>    <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>      ArrayList&lt;Integer&gt; layerList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>      <span class="hljs-comment">/** 个人认为这个分层是比较难的。不知道如何处理 */</span><br>      <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> queue.size();<br>      <span class="hljs-keyword">while</span> (size &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">firstNode</span> <span class="hljs-operator">=</span> queue.poll();<br>        layerList.add(firstNode.val);<br>        <span class="hljs-keyword">if</span> (firstNode.left != <span class="hljs-literal">null</span>) &#123;<br>          queue.add(firstNode.left);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (firstNode.right != <span class="hljs-literal">null</span>) &#123;<br>          queue.add(firstNode.right);<br>        &#125;<br>        size--;<br>      &#125;<br>      resultList.add(layerList);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; resultList.size(); i++) &#123;<br>      <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>        Collections.reverse(resultList.get(i));<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> resultList;<br>  &#125;<br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
      <category>剑指Offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指Offer32.2从上到下打印二叉树</title>
    <link href="/2022/05/03/%E5%89%91%E6%8C%87Offer32-2%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2022/05/03/%E5%89%91%E6%8C%87Offer32-2%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">levelOrder</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    Queue&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    queue.add(root);<br>    List&lt;List&lt;Integer&gt;&gt; lists = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>      ArrayList&lt;Integer&gt; itemList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>      <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> queue.size();<br>      <span class="hljs-keyword">while</span> (len &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">tmpNode</span> <span class="hljs-operator">=</span> queue.remove();<br>        itemList.add(tmpNode.val);<br>        <span class="hljs-keyword">if</span> (tmpNode.left != <span class="hljs-literal">null</span>) &#123;<br>          queue.add(tmpNode.left);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (tmpNode.right != <span class="hljs-literal">null</span>) &#123;<br>          queue.add(tmpNode.right);<br>        &#125;<br>        len--;<br>      &#125;<br>      lists.add(itemList);<br>    &#125;<br>    <span class="hljs-keyword">return</span> lists;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
      <category>剑指Offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指Offer32.1从上到下打印二叉树</title>
    <link href="/2022/05/02/%E5%89%91%E6%8C%87Offer32-1%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2022/05/02/%E5%89%91%E6%8C%87Offer32-1%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p>题目: <a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-lcof/">剑指Offer32.1从上到下打印二叉树</a><br>代码块为:</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] levelOrder(TreeNode root) &#123;<br>    <span class="hljs-comment">/** 防止异常case */</span><br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>    &#125;<br>    <span class="hljs-comment">/** bfs 需要一个额外变量 去存储元素 */</span><br>    Queue&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    queue.add(root);<br>    <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>      <span class="hljs-comment">/** 记得这里需要用remove 而不是poll 因为 poll 会返回null 但是remove不会 */</span><br>      root = queue.remove();<br>      list.add(root.val);<br>      <span class="hljs-keyword">if</span> (root.left != <span class="hljs-literal">null</span>) &#123;<br>        queue.add(root.left);<br>      &#125;<br>      <span class="hljs-keyword">if</span> (root.right != <span class="hljs-literal">null</span>) &#123;<br>        queue.add(root.right);<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">/** 这里的list 转 int[]数组非常巧妙 */</span><br>    <span class="hljs-keyword">return</span> list.stream().mapToInt(Integer::intValue).toArray();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
      <category>剑指Offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指Offer13机器人的运动范围</title>
    <link href="/2022/05/02/%E5%89%91%E6%8C%87Offer13%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4/"/>
    <url>/2022/05/02/%E5%89%91%E6%8C%87Offer13%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>剪绳子(I)</title>
    <link href="/2022/05/02/%E5%89%AA%E7%BB%B3%E5%AD%90/"/>
    <url>/2022/05/02/%E5%89%AA%E7%BB%B3%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<p> 题目: <a href="https://leetcode-cn.com/problems/jian-sheng-zi-lcof/">剑指 Offer 14- I. 剪绳子</a><br>代码块为:</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/** 处理特殊case */</span><br><span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">2</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n == <span class="hljs-number">3</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-comment">/** 开启dp mode */</span><br><span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>];<br>dp[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>dp[<span class="hljs-number">2</span>] = <span class="hljs-number">2</span>;<br>dp[<span class="hljs-number">3</span>] = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>; i &lt;= n; i++) &#123;<br>  <span class="hljs-comment">/** 此处要保证j从下标1开始到 i/2 因为是对称性的 比如 1+3 和 2+2 最后3+1其实 j的范围是 i/2 即可 */</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= (i / <span class="hljs-number">2</span>); j++) &#123;<br>    <span class="hljs-comment">/** 此处要保证 j 以及 i-j是俩下标。 */</span><br>    dp[i] = Math.max(dp[i], dp[j] * dp[i - j]);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">return</span> dp[n];<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
      <category>剑指Offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何注册一个bean</title>
    <link href="/2022/05/01/%E5%A6%82%E4%BD%95%E6%B3%A8%E5%86%8C%E4%B8%80%E4%B8%AAbean/"/>
    <url>/2022/05/01/%E5%A6%82%E4%BD%95%E6%B3%A8%E5%86%8C%E4%B8%80%E4%B8%AAbean/</url>
    
    <content type="html"><![CDATA[<p>通过BeanDefinition以及外部的单体对象来注册</p><p>三个方向</p><ol><li>注解<ul><li>@Bean</li><li>@Component</li><li>@Import</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
      <category>todo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webClient扫盲</title>
    <link href="/2022/05/01/webClient/"/>
    <url>/2022/05/01/webClient/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在spring5之前我们知道有http client 以及 web client两种,毫无意外都是同步执行的,然而webclient是异步回调的.</p><h4 id="发送请求的种类"><a href="#发送请求的种类" class="headerlink" title="发送请求的种类"></a>发送请求的种类</h4><ol><li>apache httpclient</li><li>webclient</li><li>resttemplate</li></ol><table><thead><tr><th></th><th>apache httpclient</th><th>resttemplate</th><th>webclient</th></tr></thead><tbody><tr><td>代码简洁程度</td><td>低</td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><p><img src="https://note.youdao.com/yws/res/9441/WEBRESOURCE1403f079524010b181d7f9527f979a6f" alt="image.png"><br>代码量大</p><h4 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h4><p>1. </p><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><p>非阻塞系统(non-blocking servers)</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ol><li>创建</li></ol><ul><li>WebClient.create()<figure class="highlight livecodeserver"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs livecodeserver">WebClient.<span class="hljs-built_in">create</span>()<br><br>WebClient.<span class="hljs-built_in">create</span>(String baseUrl)<br></code></pre></td></tr></table></figure></li><li>WebClient.builder()<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">uriBuilderFactory:</span> Customized UriBuilderFactory <span class="hljs-keyword">to</span> use <span class="hljs-keyword">as</span> a base URL.<br><br><span class="hljs-symbol">defaultUriVariables:</span> <span class="hljs-keyword">default</span> values <span class="hljs-keyword">to</span> use <span class="hljs-keyword">when</span> expanding URI templates.<br><br><span class="hljs-symbol">defaultHeader:</span> Headers <span class="hljs-keyword">for</span> every request.<br><br><span class="hljs-symbol">defaultCookie:</span> Cookies <span class="hljs-keyword">for</span> every request.<br><br><span class="hljs-symbol">defaultRequest:</span> Consumer <span class="hljs-keyword">to</span> customize every request.<br><br><span class="hljs-symbol">filter:</span> Client filter <span class="hljs-keyword">for</span> every request.<br><br><span class="hljs-symbol">exchangeStrategies:</span> HTTP message reader/writer customizations.<br><br><span class="hljs-symbol">clientConnector:</span> HTTP client library settings.<br></code></pre></td></tr></table></figure></li></ul><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><ul><li><strong>retrieve()</strong> 定义如何去提取响应结果.<br>有三种</li></ul><ol><li>toEntity</li><li>bodyToMono</li><li>bodyToFlux<br>定制错误类型<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Mono&lt;Person&gt; result = client.get<span class="hljs-literal">()</span><br>        .uri(<span class="hljs-string">&quot;/persons/&#123;id&#125;&quot;</span>, id).accept(MediaType.APPLICATION_JSON)<br>        .retrieve<span class="hljs-literal">()</span><br>        .on<span class="hljs-constructor">Status(HttpStatus::<span class="hljs-params">is4xxClientError</span>, <span class="hljs-params">response</span> -&gt; <span class="hljs-operator">...</span>)</span><br>        .on<span class="hljs-constructor">Status(HttpStatus::<span class="hljs-params">is5xxServerError</span>, <span class="hljs-params">response</span> -&gt; <span class="hljs-operator">...</span>)</span><br>        .body<span class="hljs-constructor">ToMono(Person.<span class="hljs-params">class</span>)</span>;<br></code></pre></td></tr></table></figure></li></ol><ul><li>exchange()</li><li></li></ul><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">1</span>: 参考资料 https://elim<span class="hljs-number">168</span>.github.io/spring/bean/<span class="hljs-number">31</span>.Spring<span class="hljs-variable">%E4</span><span class="hljs-variable">%B9</span><span class="hljs-variable">%8</span>BWebClient<span class="hljs-variable">%E4</span><span class="hljs-variable">%BB</span><span class="hljs-variable">%8</span>B<span class="hljs-variable">%E7</span><span class="hljs-variable">%BB</span><span class="hljs-variable">%8</span>D.html<br></code></pre></td></tr></table></figure><h4 id="我的疑问"><a href="#我的疑问" class="headerlink" title="我的疑问"></a>我的疑问</h4><ol><li>这个webclient需要配置一个http连接池吗？</li><li>Jetty vs  Netty</li></ol><h4 id="项目中遇到的困难"><a href="#项目中遇到的困难" class="headerlink" title="项目中遇到的困难"></a>项目中遇到的困难</h4><ol><li>302的时候无法捕获到这个cookie</li></ol><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ol><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html#webflux-client">spring.io Web Clinent</a></li><li><a href="https://www.baeldung.com/spring-webclient-resttemplate">link</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AOP常见错误</title>
    <link href="/2022/05/01/AOP%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/"/>
    <url>/2022/05/01/AOP%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/</url>
    
    <content type="html"><![CDATA[<p>AOP本质上是一个代理模式<br>Spring AOP 的底层是动态代理。而创建代理的方式有两种，JDK 的方式和 CGLIB 的方式。</p><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><ol><li>Aop异常抛错竟然拦截了两次！可以看到这个报警系统连续发送了两次这个消息。</li></ol><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2n5w98zaij20xc0bqta2.jpg" alt="image-20220527185716880"></p><p>看一下代码到底发生了什么</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@PostMapping(&quot;/review/modifyMergeOrder&quot;)</span><br><span class="hljs-meta">@ApiOperation(value = &quot;/修改merge订单的状态&quot;)</span><br><span class="hljs-meta">@ICheckReviewToken</span><br><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title function_">modifyMergeOderStatus</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-meta">@RequestBody</span> <span class="hljs-meta">@Validated(MergeOrderDTO.UpdateFromReviewAfterMerge.class)</span></span><br><span class="hljs-params">        MergeOrderDTO mergeOrderDTO,</span><br><span class="hljs-params">    HttpServletRequest request)</span> &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">* 省略业务逻辑A</span><br><span class="hljs-comment">*/</span><br> mergeCartService.modifyMergeOrder(mergeOrderDTO);<br> <br>  <span class="hljs-keyword">return</span> AjaxResult.ajaxSuccess(<span class="hljs-string">&quot;OK&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>其中在service层中一旦抛出了 异常 ，那么在controller中没有 try catch住这个异常就会导致出现 两次 出现AOP异常 捕获的情况！</p><p><strong>我的问题</strong>,比如说有一个controller -&gt; serivce -&gt; 多个 Component的情况下,该怎么办？ 这个时候一个Bean会往上不断抛出 然后不断被AOP的after Exception拿到。</p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【TODO】详述bean生命周期</title>
    <link href="/2022/05/01/bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <url>/2022/05/01/bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="抛出问题"><a href="#抛出问题" class="headerlink" title="抛出问题"></a>抛出问题</h3><ol><li></li></ol><p>问题解决： 即 Spring 初始化单例类的一般过程，基本都是 getBean()-&gt;doGetBean()-&gt;getSingleton()，如果发现 Bean 不存在，则调用 createBean()-&gt;doCreateBean() 进行实例化。</p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>完整的生命周期:</p><ol><li>Spring的容器准备过程</li><li>实例化bean</li><li>注入依赖关系</li><li>初始化bean</li><li>使用bean</li><li>销毁bean</li></ol><h3 id="class到Bean中间经历了哪些生命周期什么？"><a href="#class到Bean中间经历了哪些生命周期什么？" class="headerlink" title="class到Bean中间经历了哪些生命周期什么？"></a>class到Bean中间经历了哪些生命周期什么？</h3><h4 id="spring的容器准备过程"><a href="#spring的容器准备过程" class="headerlink" title="spring的容器准备过程"></a>spring的容器准备过程</h4><p><img src="/spring%E5%AE%B9%E5%99%A8%E5%87%86%E5%A4%87.png" alt="img.png"></p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>notify&amp;wait实现生产者消费者模型</title>
    <link href="/2022/04/30/notify&amp;wait%E5%AE%9E%E7%8E%B0%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/"/>
    <url>/2022/04/30/notify&amp;wait%E5%AE%9E%E7%8E%B0%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-keyword">import</span> java.util.Queue;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 骆佳俊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/4/19 8:06 AM</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(Producer.class);<br>  <span class="hljs-keyword">private</span> Queue&lt;Integer&gt; queue;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> maxSize;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">pc</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">Producer</span><span class="hljs-params">(Queue&lt;Integer&gt; queue, <span class="hljs-type">int</span> maxSize, String threadName)</span> &#123;<br>    <span class="hljs-built_in">super</span>(threadName);<br>    <span class="hljs-built_in">this</span>.queue = queue;<br>    <span class="hljs-built_in">this</span>.maxSize = maxSize;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">super</span>.run();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        Thread.sleep(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(<span class="hljs-number">2</span>));<br>      &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>      &#125;<br>      <span class="hljs-comment">/** 在条件判断之前给共享资源加锁 */</span><br>      <span class="hljs-keyword">synchronized</span> (queue) &#123;<br>        <span class="hljs-keyword">while</span> (queue.size() == maxSize) &#123;<br>          <span class="hljs-keyword">try</span> &#123;<br>            logger.info(<span class="hljs-string">&quot;消息队列已满: 生产者线程调用wait方法进入等待状态 ...&quot;</span>);<br>            queue.wait();<br>          &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>          &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">messageId</span> <span class="hljs-operator">=</span> pc++;<br>        logger.info(<span class="hljs-string">&quot;生产消息:&#123;&#125; &quot;</span>, messageId);<br>        queue.add(messageId);<br>        queue.notify();<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-keyword">import</span> java.util.Queue;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 骆佳俊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/4/19 8:13 AM</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(Consumer.class);<br>  <span class="hljs-keyword">private</span> Queue&lt;Integer&gt; queue;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">Consumer</span><span class="hljs-params">(Queue&lt;Integer&gt; queue, String threadName)</span> &#123;<br>    <span class="hljs-built_in">super</span>(threadName);<br>    <span class="hljs-built_in">this</span>.queue = queue;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">super</span>.run();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>      <span class="hljs-keyword">synchronized</span> (queue) &#123;<br>        <span class="hljs-keyword">while</span> (queue.isEmpty()) &#123;<br>          <span class="hljs-keyword">try</span> &#123;<br>            logger.info(<span class="hljs-string">&quot;消息队列为空: 消费者线程调用wait方法进入等待状态 ...&quot;</span>);<br>            queue.wait();<br>          &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>          &#125;<br>        &#125;<br>        logger.info(<span class="hljs-string">&quot;消费信息:&#123;&#125;&quot;</span>, queue.remove());<br>        queue.notify();<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 骆佳俊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/4/19 8:46 AM</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Launch</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    Queue&lt;Integer&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">maxSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Producer</span>(queue, maxSize, <span class="hljs-string">&quot;producer-thread&quot;</span>).start();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>(queue, <span class="hljs-string">&quot;consumer-thread&quot;</span>).start();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行截图:<br><img src="http://pfp.ps.netease.com/kmspvt/file/625e4fc4935599814c6250b2Th1x8iSc01?sign=1m7oZcDS-4WGCnZHfhOFX8Lg0lw=&expire=1651311214" alt="image.png"><br>源码自取:<br><a href="https://github.com/ZuccRoger/JavaFundament">https://github.com/ZuccRoger/JavaFundament</a><br>包路径为：<a href="https://github.com/ZuccRoger/JavaFundament/tree/master/src/main/java/roger/com/javafundament/produceAndConsume/notifyAndWait">https://github.com/ZuccRoger/JavaFundament/tree/master/src/main/java/roger/com/javafundament/produceAndConsume/notifyAndWait</a></p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring中如何自己去实现一个starter</title>
    <link href="/2022/04/30/spring%E4%B8%AD%E5%A6%82%E4%BD%95%E8%87%AA%E5%B7%B1%E5%8E%BB%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAstarter/"/>
    <url>/2022/04/30/spring%E4%B8%AD%E5%A6%82%E4%BD%95%E8%87%AA%E5%B7%B1%E5%8E%BB%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAstarter/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是自动装配"><a href="#什么是自动装配" class="headerlink" title="什么是自动装配"></a>什么是自动装配</h3><p>通过注解或者一些简单的配置就能在 Spring Boot 的帮助下实现某块功能。</p><h3 id="spring是如何实现自动装配的？"><a href="#spring是如何实现自动装配的？" class="headerlink" title="spring是如何实现自动装配的？"></a>spring是如何实现自动装配的？</h3><p>springboot的自动配置是基于spring factories机制实现的，这是一种服务发现机制，类似Java SPI。 spring会自动扫描所有jar包类路径下的META-INF&#x2F;spring.factories文件，读取其中的类型并进项实例化。<br>spring.factories文件中的内容实际上就是要导入的接口名和实现类组成的kv对，key为文件中定义的一些标识工厂类，value就是能自动配置的一些工厂实现的类。   在自动装配时，其实就是去加载AutoConfiguration类和实现类，<br>在加载自动配置类的时候，并不是将spring.factories的配置全部加载进来，而是通过@Conditional等注解的判断进行动态加载，只有当容器满足了注解中的条件的时候，才会将类加载到容器中</p><hr><p>偷来的八股文：<br>自动装配依托@Import的强大功能和spring的SPI机制。通过SPI机制发现类，通过@Import将类注册到spring中。@SpringBootApplication这个注解时组合注解里面包含自动扫描注解，里面包含一个EnableAutoConfiguration注解，这个注解作用是去寻找每个jar包里面的META-INF&#x2F;spring.factories文件，之后将文件里面的类全部实例化。<br>每个需要自动装配的模块都需要编写一个AutoConfiguration类，这些AutoConfiguration类的原理大概是通过@Import注解将其属性类Properties全部到注册spring容器中，属性类通过注解@ConfigurationProperties从配置文件里面取到配置值。之后将关键的类注册为bean自动注入属性类进行初始化完成自动装配的功能。</p><h4 id="细分相关知识如下："><a href="#细分相关知识如下：" class="headerlink" title="细分相关知识如下："></a>细分相关知识如下：</h4><p>我们知道</p><figure class="highlight less"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@SpringBootApplication</span> = <span class="hljs-variable">@SpringBootConfiguration</span>+<span class="hljs-variable">@EnableAutoConfiguration</span>+<span class="hljs-variable">@ComponentScan</span><br></code></pre></td></tr></table></figure><p>我们要重点关注这个@EnableAutoConfiguration.<br>看到 EnableAutoConfiguration.class 文件有个@Import({AutoConfigurationImportSelector.class})</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@AutoConfigurationPackage</span><br><span class="hljs-meta">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableAutoConfiguration &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">ENABLED_OVERRIDE_PROPERTY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;spring.boot.enableautoconfiguration&quot;</span>;<br><br>    Class&lt;?&gt;[] exclude() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    String[] excludeName() <span class="hljs-keyword">default</span> &#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><ol><li>第一步会去看这个<br><img src="https://eshop-photo1.oss-cn-beijing.aliyuncs.com/blog/%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/%E6%A3%80%E6%B5%8B%E6%98%AF%E5%90%A6%E5%BC%80%E5%90%AF%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D.png" alt="image.png"><br>可以看到默认是spring.boot.enableautoconfiguration的值默认是true。</li><li>得到排除的依赖项<br><img src="https://eshop-photo1.oss-cn-beijing.aliyuncs.com/blog/%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/%E5%BE%97%E5%88%B0%E6%8E%92%E9%99%A4%E7%9A%84%E4%BE%9D%E8%B5%96%E9%A1%B9.png" alt="image"></li><li>得到配置内容<br><img src="https://eshop-photo1.oss-cn-beijing.aliyuncs.com/blog/%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/%E5%BE%97%E5%88%B0factories%E4%B8%AD%E7%9A%84bean.png" alt="img"></li></ol><h3 id="如何自己实现一个starter？"><a href="#如何自己实现一个starter？" class="headerlink" title="如何自己实现一个starter？"></a>如何自己实现一个starter？</h3><ol><li>在resources&#x2F;META-INF中新建spring.factories文件<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\<br>com.roger.demospringbootstarter.config.DemoConfig<br></code></pre></td></tr></table></figure></li><li>在这个EnableAutoConfiguration的属性所对应的java文件中写入自己想装配的bean.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 骆佳俊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/4/27 10:21 AM</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoConfig</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(DemoConfig.class);<br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">demoService</span><span class="hljs-params">()</span> &#123;<br>    logger.info(<span class="hljs-string">&quot;我是自动装配进来的&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>在外部如何引用？<br>本地打包的时候可以直接点击mvn clean pakcage.然后会在本地的maven仓库中出现该jar文件。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.roger<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>demo-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="如何自动配置是否生效"><a href="#如何自动配置是否生效" class="headerlink" title="如何自动配置是否生效"></a>如何自动配置是否生效</h3><p>启动的时候可以增加-Ddebug参数.<br>会有以下4种形式的输出</p><table><thead><tr><th>类型</th><th>意义</th></tr></thead><tbody><tr><td>Positive matches</td><td>@Conditional条件为真，配置类被Spring容器加载</td></tr><tr><td>Negative matches</td><td>@Conditional条件为假，配置类未被Spring容器加载</td></tr><tr><td>Exclusions</td><td>应用端明确排除加载配置</td></tr><tr><td>Unconditional classes</td><td>自动配置类不包含任何类级别的条件，也就是说，类始终会被自动加载。</td></tr></tbody></table><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Unconditional classes:<br>----------------------<br><br>    org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.autoconfigure</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.ConfigurationPropertiesAutoConfiguration</span><br><br>    com<span class="hljs-selector-class">.roger</span><span class="hljs-selector-class">.demospringbootstarter</span><span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.DemoConfig</span><br><br>    org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.autoconfigure</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.LifecycleAutoConfiguration</span><br><br>    org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.autoconfigure</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.PropertyPlaceholderAutoConfiguration</span><br><br>    org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.autoconfigure</span><span class="hljs-selector-class">.availability</span><span class="hljs-selector-class">.ApplicationAvailabilityAutoConfiguration</span><br><br>    org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.autoconfigure</span><span class="hljs-selector-class">.info</span>.ProjectInfoAutoConfiguration<br></code></pre></td></tr></table></figure><p>最终在输出的命令行中我看见了    com.roger.demospringbootstarter.config.DemoConfig 该Bean.</p><h3 id="最后的效果"><a href="#最后的效果" class="headerlink" title="最后的效果"></a>最后的效果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-number">2022</span>-<span class="hljs-number">04</span>-<span class="hljs-number">30</span> <span class="hljs-number">10</span>:<span class="hljs-number">57</span>:<span class="hljs-number">06.150</span>  INFO <span class="hljs-number">56979</span> --- [           main] r.c.j.JavaFundamentApplication           : Starting JavaFundamentApplication using Java <span class="hljs-number">1.8</span><span class="hljs-number">.0_312</span> on YolandadeMacBook-Air.local with PID <span class="hljs-number">56979</span> (/Users/yolanda/code/javaProject/javaFundament/target/classes started by yolanda in /Users/yolanda/code/javaProject/javaFundament)<br><span class="hljs-number">2022</span>-<span class="hljs-number">04</span>-<span class="hljs-number">30</span> <span class="hljs-number">10</span>:<span class="hljs-number">57</span>:<span class="hljs-number">06.152</span>  INFO <span class="hljs-number">56979</span> --- [           main] r.c.j.JavaFundamentApplication           : No active profile set, falling back to <span class="hljs-number">1</span> <span class="hljs-keyword">default</span> profile: <span class="hljs-string">&quot;default&quot;</span><br><span class="hljs-number">2022</span>-<span class="hljs-number">04</span>-<span class="hljs-number">30</span> <span class="hljs-number">10</span>:<span class="hljs-number">57</span>:<span class="hljs-number">09.567</span>  INFO <span class="hljs-number">56979</span> --- [           main] c.r.d.config.DemoConfig                  : 我是自动装配进来的<br>asdas dlksa dsj kldsja kldsaj klasjdl ksaj<br><span class="hljs-number">2022</span>-<span class="hljs-number">04</span>-<span class="hljs-number">30</span> <span class="hljs-number">10</span>:<span class="hljs-number">57</span>:<span class="hljs-number">09.656</span>  INFO <span class="hljs-number">56979</span> --- [           main] r.c.j.JavaFundamentApplication           : Started JavaFundamentApplication in <span class="hljs-number">3.71</span> seconds (JVM running <span class="hljs-keyword">for</span> <span class="hljs-number">4.835</span>)<br>Disconnected from the target VM, address: <span class="hljs-string">&#x27;127.0.0.1:61225&#x27;</span>, transport: <span class="hljs-string">&#x27;socket&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="源代码自取"><a href="#源代码自取" class="headerlink" title="源代码自取"></a>源代码自取</h3><ol><li><a href="https://github.com/ZuccRoger/AutoConfigaration">https://github.com/ZuccRoger/AutoConfigaration</a></li></ol><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://javaguide.cn/system-design/framework/spring/spring-boot-auto-assembly-principles.html">Javaguide</a></li><li><a href="https://time.geekbang.org/course/detail/100023501-87617">极客时间-了解自动装配实现原理</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
