<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>剑指Offer33二叉搜索树的后序遍历序列</title>
    <link href="/2022/05/04/%E5%89%91%E6%8C%87Offer33%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97/"/>
    <url>/2022/05/04/%E5%89%91%E6%8C%87Offer33%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 骆佳俊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/5/4 9:46 AM</span><br><span class="hljs-comment"> *     &lt;p&gt;解题思路: 概念介绍: 二叉搜索树: 左子树上的节点的值 小于 根,右子树上的节点的值 大于 根。 如何判断是否跳出递归? left&gt;right? left right end</span><br><span class="hljs-comment"> *     左子树 右子树 根</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> verifyPostorder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>&#125;);<br>    System.out.println(b);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">verifyPostorder</span><span class="hljs-params">(<span class="hljs-type">int</span>[] postorder)</span> &#123;<br>    <span class="hljs-keyword">return</span> mainCore(postorder, <span class="hljs-number">0</span>, postorder.length - <span class="hljs-number">1</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">mainCore</span><span class="hljs-params">(<span class="hljs-type">int</span>[] postOrder, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<br>    <span class="hljs-comment">/** 跳出递归的条件 */</span><br>    <span class="hljs-keyword">if</span> (start &gt; end) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> start;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> postOrder[end];<br>    <span class="hljs-comment">// 找到第一个右子树的节点</span><br>    <span class="hljs-keyword">for</span> (; count &lt; postOrder.length; count++) &#123;<br>      <span class="hljs-keyword">if</span> (postOrder[count] &gt;= head) &#123;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> count; i &lt; end; i++) &#123;<br>      <span class="hljs-keyword">if</span> (postOrder[i] &lt;= head) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">/** mark! 这里的end需要-1 */</span><br>    <span class="hljs-keyword">return</span> mainCore(postOrder, start, count - <span class="hljs-number">1</span>) &amp;&amp; mainCore(postOrder, count, end - <span class="hljs-number">1</span>);<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
      <category>剑指Offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>请写出一个死锁的demo</title>
    <link href="/2022/05/04/%E8%AF%B7%E5%86%99%E5%87%BA%E4%B8%80%E4%B8%AA%E6%AD%BB%E9%94%81%E7%9A%84demo/"/>
    <url>/2022/05/04/%E8%AF%B7%E5%86%99%E5%87%BA%E4%B8%80%E4%B8%AA%E6%AD%BB%E9%94%81%E7%9A%84demo/</url>
    
    <content type="html"><![CDATA[<p>先写一个通过Synchronized造成死锁的demo.</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SynchronizedTest</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">SynchronizedTest</span> <span class="hljs-variable">synchronizedTest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SynchronizedTest</span>();<br>    synchronizedTest.test();<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">numA</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">numB</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>              <span class="hljs-meta">@Override</span><br>              <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">synchronized</span> (numA) &#123;<br>                  System.out.println(<span class="hljs-string">&quot;AAA&quot;</span>);<br>                  <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">3</span> * <span class="hljs-number">1000</span>);<br>                  &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                  &#125;<br>                  <span class="hljs-keyword">synchronized</span> (numB) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;CCC&quot;</span>);<br>                  &#125;<br>                &#125;<br>              &#125;<br>            &#125;,<br>            <span class="hljs-string">&quot;A&quot;</span>);<br>    a.start();<br><br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>              <span class="hljs-meta">@Override</span><br>              <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">synchronized</span> (numB) &#123;<br>                  System.out.println(<span class="hljs-string">&quot;BBB&quot;</span>);<br>                  <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">3</span> * <span class="hljs-number">1000</span>);<br>                  &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                  &#125;<br>                  <span class="hljs-keyword">synchronized</span> (numA) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;DDD&quot;</span>);<br>                  &#125;<br>                &#125;<br>              &#125;<br>            &#125;,<br>            <span class="hljs-string">&quot;B&quot;</span>);<br>    b.start();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么如何感知是否死锁了呢？</p><ol><li>可以通过dump线程</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">➜  ~ jps<br><span class="hljs-number">16342</span> Jps<br><span class="hljs-number">2281</span><br><span class="hljs-number">16169</span> Launcher<br><span class="hljs-number">16170</span> SynchronizedTest<br></code></pre></td></tr></table></figure><p>然后通过jstack发现了以下内容:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Java">Found one Java-level deadlock:<br>=============================<br><span class="hljs-string">&quot;B&quot;</span>:<br>  waiting to lock monitor <span class="hljs-number">0x000000013a80b620</span> (object <span class="hljs-number">0x000000076ab33a68</span>, a java.lang.Integer),<br>  which is held by <span class="hljs-string">&quot;A&quot;</span><br><span class="hljs-string">&quot;A&quot;</span>:<br>  waiting to lock monitor <span class="hljs-number">0x000000013a80deb0</span> (object <span class="hljs-number">0x000000076ab33a78</span>, a java.lang.Integer),<br>  which is held by <span class="hljs-string">&quot;B&quot;</span><br><br>Java stack information <span class="hljs-keyword">for</span> the threads listed above:<br>===================================================<br><span class="hljs-string">&quot;B&quot;</span>:<br>at roger.com.javafundament.deadLock.SynchronizedTest$<span class="hljs-number">2.</span>run(SynchronizedTest.java:<span class="hljs-number">52</span>)<br>- waiting to lock &lt;<span class="hljs-number">0x000000076ab33a68</span>&gt; (a java.lang.Integer)<br>- locked &lt;<span class="hljs-number">0x000000076ab33a78</span>&gt; (a java.lang.Integer)<br>at java.lang.Thread.run(Thread.java:<span class="hljs-number">748</span>)<br><span class="hljs-string">&quot;A&quot;</span>:<br>at roger.com.javafundament.deadLock.SynchronizedTest$<span class="hljs-number">1.</span>run(SynchronizedTest.java:<span class="hljs-number">31</span>)<br>- waiting to lock &lt;<span class="hljs-number">0x000000076ab33a78</span>&gt; (a java.lang.Integer)<br>- locked &lt;<span class="hljs-number">0x000000076ab33a68</span>&gt; (a java.lang.Integer)<br>at java.lang.Thread.run(Thread.java:<span class="hljs-number">748</span>)<br><br>Found <span class="hljs-number">1</span> deadlock.<br></code></pre></td></tr></table></figure><ol start="2"><li>避免同一个线程或者多个锁.</li><li>避免在一个线程在锁内占用多个资源,尽量保证每个锁只占用一个资源.</li><li>尝试使用定时锁,使用lock.tryLock(timeout)来替代内部锁的机制.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SynchronizedTryLockTest</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">SynchronizedTryLockTest</span> <span class="hljs-variable">synchronizedTest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SynchronizedTryLockTest</span>();<br>    synchronizedTest.test();<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lockA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lockB</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>              <span class="hljs-meta">@Override</span><br>              <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                  <span class="hljs-keyword">if</span> (lockA.tryLock(<span class="hljs-number">3</span>, TimeUnit.SECONDS)) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;AAA&quot;</span>);<br>                    <span class="hljs-keyword">if</span> (lockB.tryLock(<span class="hljs-number">3</span>, TimeUnit.SECONDS)) &#123;<br>                      System.out.println(<span class="hljs-string">&quot;BBB&quot;</span>);<br>                    &#125;<br>                  &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                  e.printStackTrace();<br>                &#125;<br>              &#125;<br>            &#125;)<br>        .start();<br><br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>              <span class="hljs-meta">@Override</span><br>              <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                  <span class="hljs-keyword">if</span> (lockA.tryLock(<span class="hljs-number">3</span>, TimeUnit.SECONDS)) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;CCC&quot;</span>);<br>                    <span class="hljs-keyword">if</span> (lockB.tryLock(<span class="hljs-number">3</span>, TimeUnit.SECONDS)) &#123;<br>                      System.out.println(<span class="hljs-string">&quot;DDD&quot;</span>);<br>                    &#125;<br>                  &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                  e.printStackTrace();<br>                &#125;<br>              &#125;<br>            &#125;)<br>        .start();<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="5"><li>对于数据库锁,加锁和解锁必须在同一个数据库连接里面,否则会出现解锁失效的情况.</li></ol><h3 id="github-源码链接🔗"><a href="#github-源码链接🔗" class="headerlink" title="github 源码链接🔗"></a>github 源码链接🔗</h3><ol><li><a href="https://github.com/ZuccRoger/JavaFundament/blob/master/src/main/java/roger/com/javafundament/deadLock/SynchronizedTest.java">SynchronizedTest</a><br>2<a href="https://github.com/ZuccRoger/JavaFundament/blob/master/src/main/java/roger/com/javafundament/deadLock/SynchronizedTryLockTest.java">SynchronizedTryLockTest</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>我是面试官系列</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指Offer32.3从上到下打印二叉树</title>
    <link href="/2022/05/04/%E5%89%91%E6%8C%87Offer32-3%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2022/05/04/%E5%89%91%E6%8C%87Offer32-3%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/">题目链接</a></p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">levelOrder</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    ArrayList&lt;List&lt;Integer&gt;&gt; resultList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-comment">/** 空树 */</span><br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> resultList;<br>    &#125;<br>    LinkedList&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    queue.add(root);<br>    <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>      ArrayList&lt;Integer&gt; layerList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>      <span class="hljs-comment">/** 个人认为这个分层是比较难的。不知道如何处理 */</span><br>      <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> queue.size();<br>      <span class="hljs-keyword">while</span> (size &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">firstNode</span> <span class="hljs-operator">=</span> queue.poll();<br>        layerList.add(firstNode.val);<br>        <span class="hljs-keyword">if</span> (firstNode.left != <span class="hljs-literal">null</span>) &#123;<br>          queue.add(firstNode.left);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (firstNode.right != <span class="hljs-literal">null</span>) &#123;<br>          queue.add(firstNode.right);<br>        &#125;<br>        size--;<br>      &#125;<br>      resultList.add(layerList);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; resultList.size(); i++) &#123;<br>      <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>        Collections.reverse(resultList.get(i));<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> resultList;<br>  &#125;<br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
      <category>剑指Offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指Offer32.2从上到下打印二叉树</title>
    <link href="/2022/05/03/%E5%89%91%E6%8C%87Offer32-2%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2022/05/03/%E5%89%91%E6%8C%87Offer32-2%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode(int x) &#123; val = x; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">levelOrder</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    Queue&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    queue.add(root);<br>    List&lt;List&lt;Integer&gt;&gt; lists = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>      ArrayList&lt;Integer&gt; itemList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>      <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> queue.size();<br>      <span class="hljs-keyword">while</span> (len &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">tmpNode</span> <span class="hljs-operator">=</span> queue.remove();<br>        itemList.add(tmpNode.val);<br>        <span class="hljs-keyword">if</span> (tmpNode.left != <span class="hljs-literal">null</span>) &#123;<br>          queue.add(tmpNode.left);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (tmpNode.right != <span class="hljs-literal">null</span>) &#123;<br>          queue.add(tmpNode.right);<br>        &#125;<br>        len--;<br>      &#125;<br>      lists.add(itemList);<br>    &#125;<br>    <span class="hljs-keyword">return</span> lists;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
      <category>剑指Offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指Offer32.1从上到下打印二叉树</title>
    <link href="/2022/05/02/%E5%89%91%E6%8C%87Offer32-1%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2022/05/02/%E5%89%91%E6%8C%87Offer32-1%E4%BB%8E%E4%B8%8A%E5%88%B0%E4%B8%8B%E6%89%93%E5%8D%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<p>题目: <a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-lcof/">剑指Offer32.1从上到下打印二叉树</a><br>代码块为:</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] levelOrder(TreeNode root) &#123;<br>    <span class="hljs-comment">/** 防止异常case */</span><br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">0</span>];<br>    &#125;<br>    <span class="hljs-comment">/** bfs 需要一个额外变量 去存储元素 */</span><br>    Queue&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    ArrayList&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    queue.add(root);<br>    <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>      <span class="hljs-comment">/** 记得这里需要用remove 而不是poll 因为 poll 会返回null 但是remove不会 */</span><br>      root = queue.remove();<br>      list.add(root.val);<br>      <span class="hljs-keyword">if</span> (root.left != <span class="hljs-literal">null</span>) &#123;<br>        queue.add(root.left);<br>      &#125;<br>      <span class="hljs-keyword">if</span> (root.right != <span class="hljs-literal">null</span>) &#123;<br>        queue.add(root.right);<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">/** 这里的list 转 int[]数组非常巧妙 */</span><br>    <span class="hljs-keyword">return</span> list.stream().mapToInt(Integer::intValue).toArray();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
      <category>剑指Offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指Offer13机器人的运动范围</title>
    <link href="/2022/05/02/%E5%89%91%E6%8C%87Offer13%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4/"/>
    <url>/2022/05/02/%E5%89%91%E6%8C%87Offer13%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E8%BF%90%E5%8A%A8%E8%8C%83%E5%9B%B4/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>剪绳子(I)</title>
    <link href="/2022/05/02/%E5%89%AA%E7%BB%B3%E5%AD%90/"/>
    <url>/2022/05/02/%E5%89%AA%E7%BB%B3%E5%AD%90/</url>
    
    <content type="html"><![CDATA[<p>题目: <a href="https://leetcode-cn.com/problems/jian-sheng-zi-lcof/">剑指 Offer 14- I. 剪绳子</a><br>代码块为:</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/** 处理特殊case */</span><br><span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">2</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n == <span class="hljs-number">3</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-comment">/** 开启dp mode */</span><br><span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">1</span>];<br>dp[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>dp[<span class="hljs-number">2</span>] = <span class="hljs-number">2</span>;<br>dp[<span class="hljs-number">3</span>] = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>; i &lt;= n; i++) &#123;<br>  <span class="hljs-comment">/** 此处要保证j从下标1开始到 i/2 因为是对称性的 比如 1+3 和 2+2 最后3+1其实 j的范围是 i/2 即可 */</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= (i / <span class="hljs-number">2</span>); j++) &#123;<br>    <span class="hljs-comment">/** 此处要保证 j 以及 i-j是俩下标。 */</span><br>    dp[i] = Math.max(dp[i], dp[j] * dp[i - j]);<br>  &#125;<br>&#125;<br><span class="hljs-keyword">return</span> dp[n];<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
      <category>剑指Offer</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何注册一个bean</title>
    <link href="/2022/05/01/%E5%A6%82%E4%BD%95%E6%B3%A8%E5%86%8C%E4%B8%80%E4%B8%AAbean/"/>
    <url>/2022/05/01/%E5%A6%82%E4%BD%95%E6%B3%A8%E5%86%8C%E4%B8%80%E4%B8%AAbean/</url>
    
    <content type="html"><![CDATA[<p>通过BeanDefinition以及外部的单体对象来注册</p><p>三个方向</p><ol><li>注解<ul><li>@Bean</li><li>@Component</li><li>@Import</li><li></li></ul></li><li>API</li><li></li></ol>]]></content>
    
    
    <categories>
      
      <category>我是面试官系列</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webClient扫盲</title>
    <link href="/2022/05/01/webClient/"/>
    <url>/2022/05/01/webClient/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在spring5之前我们知道有http client 以及 web client两种,毫无意外都是同步执行的,然而webclient是异步回调的.</p><h4 id="发送请求的种类"><a href="#发送请求的种类" class="headerlink" title="发送请求的种类"></a>发送请求的种类</h4><ol><li>apache httpclient</li><li>webclient</li><li>resttemplate</li></ol><table><thead><tr><th></th><th>apache httpclient</th><th>resttemplate</th><th>webclient</th></tr></thead><tbody><tr><td>代码简洁程度</td><td>低</td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><p><img src="https://note.youdao.com/yws/res/9441/WEBRESOURCE1403f079524010b181d7f9527f979a6f" alt="image.png"><br>代码量大</p><h4 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h4><p>1. </p><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><p>非阻塞系统(non-blocking servers)</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ol><li>创建</li></ol><ul><li>WebClient.create()<figure class="highlight livecodeserver"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs livecodeserver">WebClient.<span class="hljs-built_in">create</span>()<br><br>WebClient.<span class="hljs-built_in">create</span>(String baseUrl)<br></code></pre></td></tr></table></figure></li><li>WebClient.builder()<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">uriBuilderFactory:</span> Customized UriBuilderFactory <span class="hljs-keyword">to</span> use <span class="hljs-keyword">as</span> a base URL.<br><br><span class="hljs-symbol">defaultUriVariables:</span> <span class="hljs-keyword">default</span> values <span class="hljs-keyword">to</span> use <span class="hljs-keyword">when</span> expanding URI templates.<br><br><span class="hljs-symbol">defaultHeader:</span> Headers <span class="hljs-keyword">for</span> every request.<br><br><span class="hljs-symbol">defaultCookie:</span> Cookies <span class="hljs-keyword">for</span> every request.<br><br><span class="hljs-symbol">defaultRequest:</span> Consumer <span class="hljs-keyword">to</span> customize every request.<br><br><span class="hljs-symbol">filter:</span> Client filter <span class="hljs-keyword">for</span> every request.<br><br><span class="hljs-symbol">exchangeStrategies:</span> HTTP message reader/writer customizations.<br><br><span class="hljs-symbol">clientConnector:</span> HTTP client library settings.<br></code></pre></td></tr></table></figure></li></ul><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><ul><li><strong>retrieve()</strong> 定义如何去提取响应结果.<br>有三种</li></ul><ol><li>toEntity</li><li>bodyToMono</li><li>bodyToFlux<br>定制错误类型<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Mono&lt;Person&gt; result = client.get<span class="hljs-literal">()</span><br>        .uri(<span class="hljs-string">&quot;/persons/&#123;id&#125;&quot;</span>, id).accept(MediaType.APPLICATION_JSON)<br>        .retrieve<span class="hljs-literal">()</span><br>        .on<span class="hljs-constructor">Status(HttpStatus::<span class="hljs-params">is4xxClientError</span>, <span class="hljs-params">response</span> -&gt; <span class="hljs-operator">...</span>)</span><br>        .on<span class="hljs-constructor">Status(HttpStatus::<span class="hljs-params">is5xxServerError</span>, <span class="hljs-params">response</span> -&gt; <span class="hljs-operator">...</span>)</span><br>        .body<span class="hljs-constructor">ToMono(Person.<span class="hljs-params">class</span>)</span>;<br></code></pre></td></tr></table></figure></li></ol><ul><li>exchange()</li><li></li></ul><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">1</span>: 参考资料 https://elim<span class="hljs-number">168</span>.github.io/spring/bean/<span class="hljs-number">31</span>.Spring<span class="hljs-variable">%E4</span><span class="hljs-variable">%B9</span><span class="hljs-variable">%8</span>BWebClient<span class="hljs-variable">%E4</span><span class="hljs-variable">%BB</span><span class="hljs-variable">%8</span>B<span class="hljs-variable">%E7</span><span class="hljs-variable">%BB</span><span class="hljs-variable">%8</span>D.html<br></code></pre></td></tr></table></figure><h4 id="我的疑问"><a href="#我的疑问" class="headerlink" title="我的疑问"></a>我的疑问</h4><ol><li>这个webclient需要配置一个http连接池吗？</li><li>Jetty vs  Netty</li></ol><h4 id="项目中遇到的困难"><a href="#项目中遇到的困难" class="headerlink" title="项目中遇到的困难"></a>项目中遇到的困难</h4><ol><li>302的时候无法捕获到这个cookie</li></ol><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ol><li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html#webflux-client">spring.io Web Clinent</a></li><li><a href="https://www.baeldung.com/spring-webclient-resttemplate">link</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Spring框架</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AOP常见错误</title>
    <link href="/2022/05/01/AOP%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/"/>
    <url>/2022/05/01/AOP%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/</url>
    
    <content type="html"><![CDATA[<p>AOP本质上是一个代理模式<br>Spring AOP 的底层是动态代理。而创建代理的方式有两种，JDK 的方式和 CGLIB 的方式。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>详述bean生命周期</title>
    <link href="/2022/05/01/bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <url>/2022/05/01/bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="抛出问题"><a href="#抛出问题" class="headerlink" title="抛出问题"></a>抛出问题</h3><ol><li></li></ol><p>问题解决：<br>即 Spring 初始化单例类的一般过程，基本都是 getBean()-&gt;doGetBean()-&gt;getSingleton()，如果发现 Bean 不存在，则调用 createBean()-&gt;doCreateBean() 进行实例化。</p><h3 id="class到Bean中间经历了哪些生命周期什么？"><a href="#class到Bean中间经历了哪些生命周期什么？" class="headerlink" title="class到Bean中间经历了哪些生命周期什么？"></a>class到Bean中间经历了哪些生命周期什么？</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>元信息配置阶段</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>notify&amp;wait实现生产者消费者模型</title>
    <link href="/2022/04/30/notify&amp;wait%E5%AE%9E%E7%8E%B0%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/"/>
    <url>/2022/04/30/notify&amp;wait%E5%AE%9E%E7%8E%B0%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>生产者</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-keyword">import</span> java.util.Queue;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 骆佳俊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/4/19 8:06 AM</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(Producer.class);<br>  <span class="hljs-keyword">private</span> Queue&lt;Integer&gt; queue;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> maxSize;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">pc</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">Producer</span><span class="hljs-params">(Queue&lt;Integer&gt; queue, <span class="hljs-type">int</span> maxSize, String threadName)</span> &#123;<br>    <span class="hljs-built_in">super</span>(threadName);<br>    <span class="hljs-built_in">this</span>.queue = queue;<br>    <span class="hljs-built_in">this</span>.maxSize = maxSize;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">super</span>.run();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        Thread.sleep(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(<span class="hljs-number">2</span>));<br>      &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>        e.printStackTrace();<br>      &#125;<br>      <span class="hljs-comment">/** 在条件判断之前给共享资源加锁 */</span><br>      <span class="hljs-keyword">synchronized</span> (queue) &#123;<br>        <span class="hljs-keyword">while</span> (queue.size() == maxSize) &#123;<br>          <span class="hljs-keyword">try</span> &#123;<br>            logger.info(<span class="hljs-string">&quot;消息队列已满: 生产者线程调用wait方法进入等待状态 ...&quot;</span>);<br>            queue.wait();<br>          &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>          &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">messageId</span> <span class="hljs-operator">=</span> pc++;<br>        logger.info(<span class="hljs-string">&quot;生产消息:&#123;&#125; &quot;</span>, messageId);<br>        queue.add(messageId);<br>        queue.notify();<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-keyword">import</span> java.util.Queue;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 骆佳俊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/4/19 8:13 AM</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(Consumer.class);<br>  <span class="hljs-keyword">private</span> Queue&lt;Integer&gt; queue;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">Consumer</span><span class="hljs-params">(Queue&lt;Integer&gt; queue, String threadName)</span> &#123;<br>    <span class="hljs-built_in">super</span>(threadName);<br>    <span class="hljs-built_in">this</span>.queue = queue;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">super</span>.run();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>      <span class="hljs-keyword">synchronized</span> (queue) &#123;<br>        <span class="hljs-keyword">while</span> (queue.isEmpty()) &#123;<br>          <span class="hljs-keyword">try</span> &#123;<br>            logger.info(<span class="hljs-string">&quot;消息队列为空: 消费者线程调用wait方法进入等待状态 ...&quot;</span>);<br>            queue.wait();<br>          &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>          &#125;<br>        &#125;<br>        logger.info(<span class="hljs-string">&quot;消费信息:&#123;&#125;&quot;</span>, queue.remove());<br>        queue.notify();<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 骆佳俊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/4/19 8:46 AM</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Launch</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    Queue&lt;Integer&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">maxSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Producer</span>(queue, maxSize, <span class="hljs-string">&quot;producer-thread&quot;</span>).start();<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>(queue, <span class="hljs-string">&quot;consumer-thread&quot;</span>).start();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行截图:<br><img src="http://pfp.ps.netease.com/kmspvt/file/625e4fc4935599814c6250b2Th1x8iSc01?sign=1m7oZcDS-4WGCnZHfhOFX8Lg0lw=&expire=1651311214" alt="image.png"><br>源码自取:<br><a href="https://github.com/ZuccRoger/JavaFundament">https://github.com/ZuccRoger/JavaFundament</a><br>包路径为：<a href="https://github.com/ZuccRoger/JavaFundament/tree/master/src/main/java/roger/com/javafundament/produceAndConsume/notifyAndWait">https://github.com/ZuccRoger/JavaFundament/tree/master/src/main/java/roger/com/javafundament/produceAndConsume/notifyAndWait</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring中如何自己去实现一个starter</title>
    <link href="/2022/04/30/spring%E4%B8%AD%E5%A6%82%E4%BD%95%E8%87%AA%E5%B7%B1%E5%8E%BB%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAstarter/"/>
    <url>/2022/04/30/spring%E4%B8%AD%E5%A6%82%E4%BD%95%E8%87%AA%E5%B7%B1%E5%8E%BB%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAstarter/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是自动装配"><a href="#什么是自动装配" class="headerlink" title="什么是自动装配"></a>什么是自动装配</h3><p>通过注解或者一些简单的配置就能在 Spring Boot 的帮助下实现某块功能。</p><h3 id="spring是如何实现自动装配的？"><a href="#spring是如何实现自动装配的？" class="headerlink" title="spring是如何实现自动装配的？"></a>spring是如何实现自动装配的？</h3><p>springboot的自动配置是基于spring factories机制实现的，这是一种服务发现机制，类似Java SPI。 spring会自动扫描所有jar包类路径下的META-INF&#x2F;spring.factories文件，读取其中的类型并进项实例化。<br>spring.factories文件中的内容实际上就是要导入的接口名和实现类组成的kv对，key为文件中定义的一些标识工厂类，value就是能自动配置的一些工厂实现的类。   在自动装配时，其实就是去加载AutoConfiguration类和实现类，<br>在加载自动配置类的时候，并不是将spring.factories的配置全部加载进来，而是通过@Conditional等注解的判断进行动态加载，只有当容器满足了注解中的条件的时候，才会将类加载到容器中</p><hr><p>偷来的八股文：<br>自动装配依托@Import的强大功能和spring的SPI机制。通过SPI机制发现类，通过@Import将类注册到spring中。@SpringBootApplication这个注解时组合注解里面包含自动扫描注解，里面包含一个EnableAutoConfiguration注解，这个注解作用是去寻找每个jar包里面的META-INF&#x2F;spring.factories文件，之后将文件里面的类全部实例化。<br>每个需要自动装配的模块都需要编写一个AutoConfiguration类，这些AutoConfiguration类的原理大概是通过@Import注解将其属性类Properties全部到注册spring容器中，属性类通过注解@ConfigurationProperties从配置文件里面取到配置值。之后将关键的类注册为bean自动注入属性类进行初始化完成自动装配的功能。</p><h4 id="细分相关知识如下："><a href="#细分相关知识如下：" class="headerlink" title="细分相关知识如下："></a>细分相关知识如下：</h4><p>我们知道</p><figure class="highlight less"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@SpringBootApplication</span> = <span class="hljs-variable">@SpringBootConfiguration</span>+<span class="hljs-variable">@EnableAutoConfiguration</span>+<span class="hljs-variable">@ComponentScan</span><br></code></pre></td></tr></table></figure><p>我们要重点关注这个@EnableAutoConfiguration.<br>看到 EnableAutoConfiguration.class 文件有个@Import({AutoConfigurationImportSelector.class})</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@AutoConfigurationPackage</span><br><span class="hljs-meta">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> EnableAutoConfiguration &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">ENABLED_OVERRIDE_PROPERTY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;spring.boot.enableautoconfiguration&quot;</span>;<br><br>    Class&lt;?&gt;[] exclude() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    String[] excludeName() <span class="hljs-keyword">default</span> &#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><ol><li>第一步会去看这个<br><img src="https://eshop-photo1.oss-cn-beijing.aliyuncs.com/blog/%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/%E6%A3%80%E6%B5%8B%E6%98%AF%E5%90%A6%E5%BC%80%E5%90%AF%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D.png" alt="image.png"><br>可以看到默认是spring.boot.enableautoconfiguration的值默认是true。</li><li>得到排除的依赖项<br><img src="https://eshop-photo1.oss-cn-beijing.aliyuncs.com/blog/%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/%E5%BE%97%E5%88%B0%E6%8E%92%E9%99%A4%E7%9A%84%E4%BE%9D%E8%B5%96%E9%A1%B9.png" alt="image"></li><li>得到配置内容<br><img src="https://eshop-photo1.oss-cn-beijing.aliyuncs.com/blog/%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/%E5%BE%97%E5%88%B0factories%E4%B8%AD%E7%9A%84bean.png" alt="img"></li></ol><h3 id="如何自己实现一个starter？"><a href="#如何自己实现一个starter？" class="headerlink" title="如何自己实现一个starter？"></a>如何自己实现一个starter？</h3><ol><li>在resources&#x2F;META-INF中新建spring.factories文件<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\<br>com.roger.demospringbootstarter.config.DemoConfig<br></code></pre></td></tr></table></figure></li><li>在这个EnableAutoConfiguration的属性所对应的java文件中写入自己想装配的bean.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: 骆佳俊</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/4/27 10:21 AM</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DemoConfig</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(DemoConfig.class);<br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">demoService</span><span class="hljs-params">()</span> &#123;<br>    logger.info(<span class="hljs-string">&quot;我是自动装配进来的&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>在外部如何引用？<br>本地打包的时候可以直接点击mvn clean pakcage.然后会在本地的maven仓库中出现该jar文件。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.roger<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>demo-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="如何自动配置是否生效"><a href="#如何自动配置是否生效" class="headerlink" title="如何自动配置是否生效"></a>如何自动配置是否生效</h3><p>启动的时候可以增加-Ddebug参数.<br>会有以下4种形式的输出</p><table><thead><tr><th>类型</th><th>意义</th></tr></thead><tbody><tr><td>Positive matches</td><td>@Conditional条件为真，配置类被Spring容器加载</td></tr><tr><td>Negative matches</td><td>@Conditional条件为假，配置类未被Spring容器加载</td></tr><tr><td>Exclusions</td><td>应用端明确排除加载配置</td></tr><tr><td>Unconditional classes</td><td>自动配置类不包含任何类级别的条件，也就是说，类始终会被自动加载。</td></tr></tbody></table><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Unconditional classes:<br>----------------------<br><br>    org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.autoconfigure</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.ConfigurationPropertiesAutoConfiguration</span><br><br>    com<span class="hljs-selector-class">.roger</span><span class="hljs-selector-class">.demospringbootstarter</span><span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.DemoConfig</span><br><br>    org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.autoconfigure</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.LifecycleAutoConfiguration</span><br><br>    org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.autoconfigure</span><span class="hljs-selector-class">.context</span><span class="hljs-selector-class">.PropertyPlaceholderAutoConfiguration</span><br><br>    org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.autoconfigure</span><span class="hljs-selector-class">.availability</span><span class="hljs-selector-class">.ApplicationAvailabilityAutoConfiguration</span><br><br>    org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.boot</span><span class="hljs-selector-class">.autoconfigure</span><span class="hljs-selector-class">.info</span>.ProjectInfoAutoConfiguration<br></code></pre></td></tr></table></figure><p>最终在输出的命令行中我看见了    com.roger.demospringbootstarter.config.DemoConfig 该Bean.</p><h3 id="最后的效果"><a href="#最后的效果" class="headerlink" title="最后的效果"></a>最后的效果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-number">2022</span>-<span class="hljs-number">04</span>-<span class="hljs-number">30</span> <span class="hljs-number">10</span>:<span class="hljs-number">57</span>:<span class="hljs-number">06.150</span>  INFO <span class="hljs-number">56979</span> --- [           main] r.c.j.JavaFundamentApplication           : Starting JavaFundamentApplication using Java <span class="hljs-number">1.8</span><span class="hljs-number">.0_312</span> on YolandadeMacBook-Air.local with PID <span class="hljs-number">56979</span> (/Users/yolanda/code/javaProject/javaFundament/target/classes started by yolanda in /Users/yolanda/code/javaProject/javaFundament)<br><span class="hljs-number">2022</span>-<span class="hljs-number">04</span>-<span class="hljs-number">30</span> <span class="hljs-number">10</span>:<span class="hljs-number">57</span>:<span class="hljs-number">06.152</span>  INFO <span class="hljs-number">56979</span> --- [           main] r.c.j.JavaFundamentApplication           : No active profile set, falling back to <span class="hljs-number">1</span> <span class="hljs-keyword">default</span> profile: <span class="hljs-string">&quot;default&quot;</span><br><span class="hljs-number">2022</span>-<span class="hljs-number">04</span>-<span class="hljs-number">30</span> <span class="hljs-number">10</span>:<span class="hljs-number">57</span>:<span class="hljs-number">09.567</span>  INFO <span class="hljs-number">56979</span> --- [           main] c.r.d.config.DemoConfig                  : 我是自动装配进来的<br>asdas dlksa dsj kldsja kldsaj klasjdl ksaj<br><span class="hljs-number">2022</span>-<span class="hljs-number">04</span>-<span class="hljs-number">30</span> <span class="hljs-number">10</span>:<span class="hljs-number">57</span>:<span class="hljs-number">09.656</span>  INFO <span class="hljs-number">56979</span> --- [           main] r.c.j.JavaFundamentApplication           : Started JavaFundamentApplication in <span class="hljs-number">3.71</span> seconds (JVM running <span class="hljs-keyword">for</span> <span class="hljs-number">4.835</span>)<br>Disconnected from the target VM, address: <span class="hljs-string">&#x27;127.0.0.1:61225&#x27;</span>, transport: <span class="hljs-string">&#x27;socket&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="源代码自取"><a href="#源代码自取" class="headerlink" title="源代码自取"></a>源代码自取</h3><ol><li><a href="https://github.com/ZuccRoger/AutoConfigaration">https://github.com/ZuccRoger/AutoConfigaration</a></li></ol><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://javaguide.cn/system-design/framework/spring/spring-boot-auto-assembly-principles.html">Javaguide</a></li><li><a href="https://time.geekbang.org/course/detail/100023501-87617">极客时间-了解自动装配实现原理</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
